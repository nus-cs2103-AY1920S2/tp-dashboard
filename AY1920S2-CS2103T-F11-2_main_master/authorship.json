[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d FitBiz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "https://travis-ci.com/AY1920S2-CS2103T-F11-2/main[image:https://travis-ci.com/AY1920S2-CS2103T-F11-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "https://coveralls.io/github/AY1920S2-CS2103T-F11-2/main[image:https://coveralls.io/repos/github/AY1920S2-CS2103T-F11-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* The Fitness Business Management App you never knew you needed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Tailored made for fitness coaches to manage their clients without the hassle of traditional pen and paper"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Here are some things you can do:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** Track your client\u0027s exercises and training schedules"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** Display detailed graphs and charts of your client\u0027s training data"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** Export a client\u0027s training data in `csv` format, allowing clients to easily store or view their own data on Excel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Adapted from the https://se-education.org/[AddressBook-Level3 project] created by SE-EDU initiative"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 1,
      "AaronCQL": 9,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    applicationDefaultJvmArgs \u003d [\u0027-Dglass.gtk.uiScale\u003d1.5\u0027]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // uncomment this to enable printing to stdout in tests"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // testLogging.showStandardStreams \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    archiveName \u003d \u0027FitBiz.jar\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027seedu/address/ui\u0027, \u0027seedu/address/model/util\u0027])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        \u0027site-name\u0027: \u0027FitBiz\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F11-2/main\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 11,
      "-": 150
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "FitBiz is developed by 5 passionate software engineering students who aim to help fitness coaches manage their clients in a dynamic and innovative way."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d Choo Qi Le Aaron"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::aaroncql.png[width\u003d\"200\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "{empty}[https://github.com/AaronCQL[GitHub]] [\u003c\u003caaroncql#, Project Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Role: Team Leader + Developer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d Fong Yong Jie"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::yonggiee.png[width\u003d\"200\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "{empty}[https://github.com/Yonggiee[GitHub]] [\u003c\u003cyonggiee#, Project Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d Li Zi Ying"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::ziyingli.png[width\u003d\"200\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "{empty}[https://github.com/ziyingli[GitHub]] [\u003c\u003cziyingli#, Project Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d Ng Ming Liang"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::dban1.png[width\u003d\"200\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "{empty}[https://github.com/Dban1[GitHub]] [\u003c\u003cdban1#, Project Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d Toh Ker Wei"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::tohkerwei.png[width\u003d\"200\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "{empty}[https://github.com/tohkerwei[GitHub]] [\u003c\u003ctohkerwei#, Project Portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 10,
      "AaronCQL": 12,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S2-CS2103T-F11-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* *Email us* : You can also reach us at `e0310119[at]u.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "Dban1": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d FitBiz Level 3 - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 1,
      "-": 47
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d FitBiz - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-F11-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "By: `AY1920S2-CS2103T-F11-2`   Since: `Feb 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete-c 1`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ".Component interactions for `delete-c 1` command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ClientListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "`GraphWindow` is a separate `Stage` from `MainWindow`. `MainWindow` creates a `GraphWindow` through a `graph` command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "// tag::logic[]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ".  `Logic` uses the `FitBizParser` class to parse the user command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding or deleting a client)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying the list of clients or exercise graphs."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Given below is the sequence diagram for interactions within the `Logic` component for the `execute(\"delete-c 1\")` API call mentioned previously."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ".Interactions Inside the Logic Component for the `delete-c 1` Command"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "// end::logic[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dban1"
        },
        "content": "// tag::dban1[]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dban1"
        },
        "content": "1. stores a `UserPref` object that represents the user\u0027s preferences"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dban1"
        },
        "content": "1. stores a `ClientInView` to represent the current selected `Client` selected by the `view-c` command"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "1. stores `FitBiz`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dban1"
        },
        "content": "1. stores `Client`, `Sports`, `Tag`, `Schedule` and `Exercise` packages, where `Client` utilises the latter packages as attributes"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dban1"
        },
        "content": "1. exposes an unmodifiable `ObservableList\u003cClient\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dban1"
        },
        "content": "As a more OOP model, we can choose to store a `Tag` list in `FitBiz`, which `Client` can reference. This would allow `FitBiz` to only require one `Tag` object per unique `Tag`, instead of each `Client` needing their own `Tag` object. An example of how such a model may look like is given below. For simplicity, we have omitted the rest of the attributes that `Client` has. Refer back to the diagram above for more details. +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dban1"
        },
        "content": "// end::dban1[]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* can save `Client`, `Exercise` and `Schedule` data in json format and read it back."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "// tag::aaron-choo[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d Command History --- Aaron Choo"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "This feature serves to improve the user experience by allowing users to browse and retrieve their previously entered commands using the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrow keys, similar to what most modern CLIs offer."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "This command history mechanism is facilitated by the logic class `CommandHistory`, which controls both the model class `CommandHistoryState` and the storage utility class `StorageReaderWriter`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Behaviour of this feature"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "The behaviour of this feature has been implemented to mimic most modern CLIs, namely:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". The empty string, `\"\"`, should not be stored in the history"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Commands that are similar to the most recently stored command in the history should not be stored (ie. duplicate commands will not be stored)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". All other user input, be it valid or invalid commands, should be stored"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Number of commands should only be stored up to a well-defined maximum number (100 in this case, for performance reasons discussed in the later section)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Pressing the kbd:[\u0026uarr;] arrow key should browse backwards towards the least recently entered commands"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Pressing the kbd:[\u0026darr;] arrow key should browse forwards towards the most recently entered commands"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". The caret position should be at the end of the command string when browsing the history"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Persistent storage of the command history should be supported (ie. a user can quit the app and come back to the same history as his previous usage of the app)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d How this feature works"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Since all user inputs, be it valid or invalid commands, should be stored, and since detection of the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrow keys must occur in the JavaFX\u0027s `TextField` class found in `CommandBox`, we have decided to let `CommandBox` directly interact with `CommandHistory`. In other words, `CommandBox` will be responsible for calling `CommandHistory#addToHistory`, `CommandHistory#getNextCommand`, and `CommandHistory#getPreviousCommand`. A simplified class diagram of the classes involved in this feature is given below:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ".Class Diagram for Command History"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::CommandHistoryClassDiagram.png[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "`CommandHistory` depends on `FileUtil` only because it uses the static method `FileUtil#writeToFile`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "In the following sequence diagram, we trace the execution of the classes involved in storing the user command into the command history. For this example, we assume the user is entering the command `list-c`:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ".Sequence Diagram for Saving a User Entered Command"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::CommandHistorySequenceDiagram.png[]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "When the `CommandBox#handleCommandEntered` method is called, `CommandBox` simply gets and passes the user input text from `TextField` to `CommandHistory`. `CommandHistory` then adds this text to the internal list within `CommandHistoryState`, retrieves the full internal list, converts it to a text-based format, and finally requests `FileUtil` to save the text-based command history to storage."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d How the Command History is persisted on storage"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Each command that the user enters is essentially just a normal string. We simply use the utility class `FileUtil` to write these lines of text to a text-based file `command.txt`. Note that each new line of text in `command.txt` represents one single command."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Whenever FitBiz first launches, we will then try to open and read from this same `command.txt` file. If no such file exists, an empty new file will be created for use in the future."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Even if the storage component somehow fails to work, the command history will still be guaranteed to work, albeit without the storage features. In other words, the `CommandHistoryState` model will continue to function since it is not dependent nor have any association with the utility class `FileUtil`. This ensure that the command history for the current usage can at least be used."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "In designing the model `CommandHistoryState`, we had to decide on the underlying data structure to store the user\u0027s command history. We currently use the Java native `ArrayList\u003cString\u003e`, where each line of command is stored as an individual entry. Another alternative that we have considered is to store the commands in a `LinkedList\u003cString\u003e`:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[options\u003d\u0027header\u0027, cols\u003d\"20%h,40%,40%\"]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "| Considerations | ArrayList (chosen) | LinkedList"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "| Time Complexity | Inserting to the list is O(1)."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Removal of the first item is O(n)."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Retrieval of any item is always O(1). | Inserting to the list is O(1)."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Removal of the first/last item is O(1)."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Retrieval of an item that is not the first/last item will require traversal of the list and will be more expensive than O(1)."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "| Ease of Implementation | Indices are concrete numbers and thus, are much easier to manipulate than pointers."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "The use of indices are enough to support the retrieval operations needed by this feature and is efficient since retrieval is always O(1)."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "| Pointers are arguably harder to keep track of and might be more difficult to implement."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "A custom linked list (as opposed to just using the native Java `LinkedList`) may have to be developed in order to support the retrieval operations that this feature requires while still keeping the retrieval time complexity to O(1)."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "In the interest of saving developement time and better code readability, we decided to use an `ArrayList` to store the commands. Since we have decided to cap the maximum size of the list, should this limit be exceeded, we would then need to remove the first item (or the zeroth index) from the list to free up space. Of course, doing a `remove(0)` on a n-item `ArrayList` will require that all remaining items in the list be reassigned to new indices, and thus incur an O(n) time operation. However, we found out through extensive testing that this causes no observable nor significant lag when the maximum capacity is reached."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Moreover, there is also a need to overwrite the whole storage file `command.txt` whenever this maximum size is reached. Before this maximum size is reached, we can easily append to the existing file the new command that the user has just entered. However, after this limit is exceeded, we must remove the first line stored in `command.txt`, shift all remaining lines up, and then append that new line. Hard disk operations like writing to storage is many order of magnitudes slower than memory operations like the reassignment of indices as discussed above. Since the much larger bottleneck is in the storage, this effectively nullifies the time complexity comparison that a `LinkedList` is faster than an `ArrayList` in removing the first item."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "In choosing the maximum size of the command history, we have to take note of some important caveats:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". This number must be small enough to not cause the app to lag when the whole history is being written to storage"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". This number must be big enough to satisfy the user"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Ultimately, we felt that 100 is a very generous estimate given that a user really only needs the past few commands at any point of time."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d Command Autocomplete --- Aaron Choo"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Similar to the previously mentioned \u003c\u003cCommand History --- Aaron Choo, Command History\u003e\u003e feature, this feature also serves to improve the user experience by allowing users to press the kbd:[Tab] key to autocomplete their partially entered commands."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[[command-history-implementation]]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "This feature is facilitated by the logic found in the `Autocomplete` class. Before we dive into the implementation, let us first define what _unambiguous_ and _ambiguous_ commands are:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "| Unambiguous Commands | Ambiguous Commands"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "| Can uniquely identify a single command using the sequence of letters that the user has entered | Cannot uniquely identify a single command using the sequence of letters that the user has entered"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "For example, assume we only have 3 commands in our app, `add-c`, `add-e`, and `edit-c`. If the user enters `e` and tries to autocomplete the command using kbd:[Tab], we say that this is an unambiguous command since clearly, `edit-c` can be uniquely identified by `e`. If instead, the user enters `a` and presses kbd:[Tab] to autocomplete the command, we say that this is an ambiguous command, since both `add-c` and `add-e` are possible choices."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[[command-history-behaviour]]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Behaviour of this feature"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Again, this feature has also been implemented to mimic most modern CLIs, namely:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Any unambiguous commands should be immediately completed upon pressing of the kbd:[Tab] key"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Any ambiguous commands should be completed up till the longest common prefix of all similar commands"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** Using the ambiguous command example in the introduction above, when the user enters `a` and presses kbd:[Tab], the autocompletion should return `add-` (the longest common prefix of `add-e` and `add-c`) to the user"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". A list of all similar commands should be presented to the user should he try to autocomplete an ambiguous command"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". [[command-history-behaviour-4]]Pressing kbd:[Tab] when the command has already been completed will bring the user\u0027s caret to the next prefix delimitter (`/` in our case) with wraparound"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d How the Trie data structure works"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Since Java does not provide a native Trie data structure, we had to implement our own version of it. Moreover, Java also does not allow methods with multiple return values, and thus, we had to create a wrapper class `SimilarWordsResult` to store the multiple results returned by `Trie#listAllSimilarWords`. In this section, we shall take a more in depth look at the overall implementation of this data structure."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "We first look at the `Node` class provided in the same package which `Trie` relies on. Each `Node` object should contain the following attributes:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* The parent node (`null` if the node is the root of the Trie)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* The current letter it represents"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* The children nodes (if any)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* A boolean to know whether that node represents a completed word"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Since each node stores with it their parent node pointer, we can easily construct the word represented by a node by recursively building the word up letter by letter until the root is reached. This is implemented in `Node#constructWord`, as shown here:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "```java"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public String constructWord() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      if (isRoot()) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return EMPTY_STRING;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      return parent.constructWord() + getLetter();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "```"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Now, let us discuss about how we implemented `Trie` to support the \u003c\u003ccommand-history-behaviour, behaviours discussed above\u003e\u003e by first looking at `Trie#getLongestPrefixNode`. This method takes in an argument `word` and returns in 3 distinct cases:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". If the argument `word` matches no words currently in the `Trie`: `null`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". If the argument `word` is unambiguous: the `Node` whose constructed word (using `Node#constructWord`) is the longest word contained in `Trie` that can be formed from `word`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". If the argument `word` is ambiguous: the `Node` whose constructed word is the longest common prefix of all words similar to `word` contained in `Trie`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Refer to \u003c\u003cautocomplete-activity-diagram\u003e\u003e given in the next section for the complete sequence of the key decisions."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Let us move on to `Trie#listAllSimilarWords` which makes use of the `Node` found by `Trie#getLongestPrefixNode`. Cases 1 and 2 discussed above are relatively trivial and we shall not discuss about how they are handled in `Trie#listAllSimilarWords`. For case 3, in order for us to find all the similar words, we have chosen to use a Depth-First Search (DFS) approach, starting the search from the `Node` returned by `Trie#getLongestPrefixNode`, as shown here:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "```java"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Node subtrie \u003d getLongestPrefixNode(word);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "ArrayList\u003cString\u003e similarWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Stack\u003cNode\u003e stack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "stack.push(subtrie);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "while (!stack.isEmpty()) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      Node current \u003d stack.pop();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      if (current.isWordEnd()) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            similarWords.add(current.constructWord());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            stack.addAll(current.getChildren().values());"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "```"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "The choice of a DFS approach as opposed to a Breadth-First Search (BFS) approach is arbitrary, both should work as expected."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d How this feature works"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Similar to \u003c\u003cCommand History --- Aaron Choo, Command History\u003e\u003e, this feature also relies heavily on the UI class `CommandBox`, and thus we have decided to let `CommandBox` interact with `Autocomplete` directly. A simplified class diagram of the classes involved is shown here:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ".Simplified Class Diagram for Autocomplete"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::CommandAutocompleteClassDiagram.png[]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "`Autocomplete` returns an object of type `AutocompleteResult` to `CommandBox` when the `Autocomplete#execute` is called. As such, both `Autocomplete` and `CommandBox` depend on, but are not directly associated with, `AutocompleteResult`. The same reasoning applies for `SimilarWordsResult` which have been explained in the earlier section."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "In the following sequence diagram, we follow the execution for when the user tries to autocomplete his partially entered command `gra` (which, in the current application, is an unambiguous command, and will result in the full completion of the `graph` command as well as its prefixes):"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ".Simplified Sequence Diagram for Command Autocomplete"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::CommandAutocompleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "`CommandBox` retrieves the user input command and caret position from the `TextField`, and calls the `execute` method from `Autocomplete` with these information. This `execute` method (shown and explained in full in the next sequence diagram) creates an `AutocompleteResult` object and returns this to `CommandBox`, which retrieves all the information required and sets the `TextField` and `ResultDisplay` accordingly."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ".Sequence Diagram for the Autocomplete#execute Method"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::CommandAutocompleteSequenceDiagramRef.png[]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Within the `execute` method, `Autocomplete` calls the `listAllSimilarWords` method from `Trie` with the user input text. `Trie`, which would already have all the commands stored, finds the longest prefix node, calls the `constructWord` method from this node, and checks if this node represents the end of a completed word. Since it is indeed a completed word, `Trie` immediately creates a `SimilarWordsResult` object to store these information and returns it to `Autocomplete`. Then, `Autocomplete` retrieves these information, realises that it is dealing with an unambiguous command, and constructs the corresponding prefixes. It then creates a `AutocompleteResult` object to store all the information that `CommandBox` requires, and finally returns this object to `CommandBox`."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Lastly, in order to explain the key decisions that this feature does at each step starting from the point where the user presses kbd:[Tab], we have provided the following activity diagram:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[[autocomplete-activity-diagram]]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ".Activity Diagram for the Autocomplete Logic"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::CommandAutocompleteActivityDiagram.png[]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "This feature currently only supports autocompletion of _commands_ and _prefixes_, and not other fields/parameters like names and addresses that have been used by the user before. Implicitly, since all commands defined in FitBiz do not have empty spaces in them, this allows us to easily determine when to allow users to press kbd:[Tab] to get to the next prefix (\u003c\u003ccommand-history-behaviour-4, behaviour 4\u003e\u003e): by simply checking for the presence of white spaces from the trimmed user input (like shown in the activity diagram)."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "As discussed in the \u003c\u003ccommand-history-implementation, implementation section\u003e\u003e, we have decided to use a Trie data structure. Of course, we have also considered other much simpler alternatives like simply storing all available commands in a native Java `List`. A quick summary of the pros and cons is given here:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[options\u003d\u0027header\u0027, cols\u003d\"20%h,40%,40%\"]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "| Considerations | Trie (chosen) | List"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "| Time Complexity | Searching if a word exists is O(n), where n is the number of letters in the word to search for."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Finding the longest common prefix of an ambiguous command is O(n), where n is the number of letters in the original word."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "| Searching if a word exists is O(nm), where n is the number of letters in the word to search for, and m is the number of words in the list."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Finding the longest common prefix of an ambiguous command is not linear with n and m."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "| Ease of Implementation | Initial development might be more difficult; developers might not be familiar with this data structure as it is not as common."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Custom class means that additional, custom logic can be easily added."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "| Much faster initial development."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Custom logic cannot be easily added."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "As such, the choice of implementing our own Trie data structure is obvious. As this app grows bigger in the forseeable future, the number of commands as well as the number of things we would want to autocomplete would increase. Overall, we felt that the Trie data structure will scale much better as compared to a List."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Exchanging some initial development time for future scalability of our app will ensure that we, or future developers, do not end up wasting time refactoring what could have been done in the first place. Moreover, the Trie data structure is much more effective and computationally inexpensive in finding the longest common prefix of all ambiguous commands. The same cannot be said when using a List."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Also, since we have implemented our own Trie data structure, it would also allow more custom logic to be added later, and allow more creative freedom with respect to the features that we, or future developers would want to add. For example, future version of this application might want to also include the autocompletion of frequently used parameters by the user."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "// end::aaron-choo[]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Dban1"
        },
        "content": "// tag::dban1[]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d Scheduling for a Client --- Ng Ming Liang"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Dban1"
        },
        "content": "This feature allows for a user to assign a weekly schedule to a client. Timings are represented in the 24-hour format `HHmm`. Each client can have none or multiple schedules that do not have overlapping timings. Multiple clients are allowed to have overlapping timings with each other."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Dban1"
        },
        "content": "This scheduling mechanism is facilitated by `ScheduleCommand` which extends `Command`. The format of the command is given by:"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Dban1"
        },
        "content": "`schedule INDEX sch/DAY-STARTTIME-ENDTIME [sch/DAY-STARTTIME-ENDTIME] ...`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Dban1"
        },
        "content": "When using this command, at least one valid complete schedule parameter must be specified. The user can follow up with additional optional valid schedule parameters in order to assign more schedules to the same client. The following 3 examples are all valid usages of the `schedule` command:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Dban1"
        },
        "content": "*Example Commands*"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Dban1"
        },
        "content": "1. `schedule 1 sch/MON-1100-1300`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Dban1"
        },
        "content": "2. `schedule 2 sch/MON-1100-1300 sch/TUE-1100-1300 sch/SAT-1800-2000`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Dban1"
        },
        "content": "3. `schedule 3 sch/`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Dban1"
        },
        "content": "*Elaboration on Example Commands*"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Dban1"
        },
        "content": "1. This command instance schedules `Client` with index 1 to have a schedule slot on every Monday, 11:00am to 1:00pm."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Dban1"
        },
        "content": "2. This command instance schedules `Client` with index 2 to have schedule slots on every Monday 11:00am to 1:00pm, Tuesday 11:00am to 1:00pm, and Saturday 6:00pm to 8:00pm."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Dban1"
        },
        "content": "3. This command instance schedules `Client` with index 3 to have no schedule slots, that is essentially clearing the schedule of `Client` with index 3. The `sch/` parameter is required when clearing the schedule."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Do note that the schedule parameters given in the `schedule` command will entirely overwrite the client\u0027s current list of schedules."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Dban1"
        },
        "content": "The list of schedules of each client are structured as a `ScheduleList`, which is a wrapper class for an `ArrayList` of `Schedule` objects. Each `Client` contains one `ScheduleList` attribute to keep track of all `Schedule` assigned to it. If there are no assigned `Schedule` for the `Client`, then the `ScheduleList` simply contains an empty `ArrayList` of `Schedule`."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Dban1"
        },
        "content": "`Schedule` comprises three attributes:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Dban1"
        },
        "content": "1. `Day`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Dban1"
        },
        "content": "2. `StartTime`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Dban1"
        },
        "content": "3. `EndTime`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Dban1"
        },
        "content": "`Day` wraps the enum `DayEnum.Weekday` and represents the day of the week the schedule takes place on."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Dban1"
        },
        "content": "`StartTime` and `EndTime` represent the start time and end time of the schedule in the \"HHmm\" format respectively."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Dban1"
        },
        "content": "The relations between these classes are shown in the class diagram below."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::ScheduleClassDiagram.png[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Dban1"
        },
        "content": "These attributes are bounded by these characteristics:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Dban1"
        },
        "content": "1. Each `Client` can only contain unique `Schedule`, that is, there are no overlaps in timings between any two `Schedule` in the `ScheduleList`. This is ensured by `ScheduleCommandParser#checkIfOverlaps()`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Dban1"
        },
        "content": "2. Overlapping timings between the `Schedule` of different `Client` is allowed"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Dban1"
        },
        "content": "3. The maximum timeframe between `StartTime` and `EndTime` is from `0000` to `2359`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Dban1"
        },
        "content": "4. `StartTime` cannot be later than `EndTime`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Dban1"
        },
        "content": "5. `Day` can only take up the 7 values of the week (MON/TUE/WED/THU/FRI/SAT/SUN)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Here is an activity diagram displaying the steps taken when FitBiz receives a user input for the `schedule` command:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::ScheduleActivityDiagram.png[]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Dban1"
        },
        "content": "In the following sequence diagram, we trace the execution for when the user decides to enter the command `schedule 1 day/mon st/1100 et/1200` into FitBiz. For simplicity, we will refer to this command input as `commandText`:"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::ScheduleSequenceDiagram.png[]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Dban1"
        },
        "content": "This sequence diagram shows how the schedule command is processed in FitBiz. The LogicManager receives the input commandText and parses it with `FitBizParser` to obtain arguments that are then parsed into `ScheduleCommandParser` to construct a `ScheduleCommand`. This `ScheduleCommand` is returned back up to the `LogicManager` which then executes it with reference to the `model` argument. Subsequently, the `Model` is updated with a new `Client` with the schedule changes through a series of commands as shown in the right hand side of the sequence diagram, and control is return back to LogicManager."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Dban1"
        },
        "content": "In designing this feature, we had to consider the alternative ways in which we can choose to store the information of a schedule. One option of storing the relevant information (day, start, end times) for a schedule was simply to concatenate these values into a single String, for example, `monday-1100-1200`. However, we found that this did not exploit the desirable principles of Object-Oriented Programming. As respective sanity checks had to be done for the day"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Dban1"
        },
        "content": "and timing, wrapping each of these properties into their wrapper classes allowed for better modularity and organisation of these attributes. For example, `Day#isValidDay` handles the validation of the input for day and `Time#isValidTimingFormat` handles the validation of time."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Considerations also then had to be made for how to contain multiple `Schedule`. The current implementation uses the `ArrayList` data structure to hold multiple `Schedule`. Other considered alternative for `ScheduleList` was `HashSet`."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Dban1"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|  | ArrayList | HashSet"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|Ensuring no overlaps"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|Does not ensure that its elements are unique"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|Ensures no duplicate values"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|Ensuring order of elements"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|Elements can be sorted and retrieved in ascending order"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|Does not return elements in order"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Dban1"
        },
        "content": "*Displaying the Schedule Panel*"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Dban1"
        },
        "content": "The schedules of all the clients are displayed in a time-sorted manner on the `SchedulePanel` of the main FitBiz GUI as shown in the picture below, demarcated by the red rectangle:"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::SchedulePanelGUIExample.png[]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Dban1"
        },
        "content": "The `SchedulePanel` extends `UiPart\u003cRegion\u003e` and takes in a `ScheduleDay` class. `ScheduleDay` is similar to `ScheduleList`, the difference being:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `ScheduleDay` wraps an ArrayList of `Schedule` for a specific `Day`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `ScheduleList` wraps an ArrayList of `Schedule` for a specific `Client`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Dban1"
        },
        "content": "As the nature of the `SchedulePanel` was to display a sorted collection of `Schedule`, we chose `ArrayList` as the underlying data structure, due to the ability to sort the ArrayList via a comparator that compares `Schedule` according to their `Day` and `StartTime`. The code snippet below shows how the `Schedule` are being sorted using an anonymous comparator in the constructor for `ScheduleDay`:"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Dban1"
        },
        "content": " this.scheduleList.sort(Comparator.comparingInt(o -\u003e o.getStartTime().getDirectTimeInt()));"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Dban1"
        },
        "content": "In addition, we also harnessed the capability of the `HashSet` to ensure no overlaps between `Schedule` within each `Client`, which is implemented by `ScheduleCommandParser#checkIfOverlaps`. As the ArrayList of `Schedule` is being populated in the constructor of `ScheduleDay`, we used a `HashSet` to check for any overlapping `Schedule`. The `equals` method of `Schedule` was overriden to consider overlapping timeframes between `StartTime` and `EndTime` to be equal."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Dban1"
        },
        "content": "// end::dban1[]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "// tag::exercise[]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d Exercise Feature --- Yong Jie"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "This feature allows users to record the exercises done by a client. The exercises are displayed in a table form, after the `view-c` command is called."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of Exercise class"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "The `Exercise` class is facilitated by the `UniqueExerciseList`, which is a wrapper class for an `ObservableList` of `Exercise` objects. Each Client contains one `UniqueExerciseList` attribute to keep track of all `Exercises` the client has."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "`Exercise` comprises five attributes:"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". `ExerciseName`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". `ExerciseDate`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". `ExerciseReps`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". `ExerciseWeight`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". `ExerciseSets`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "All instances of `Exercise` of a client will be contained in the client\u0027s `UniqueExerciseList`. There is an additional class `PersonalBest` which is also associated to `Exercise`. It is omitted and will be discussed in the \u003c\u003cPersonal Best --- Li Zi Ying,Personal Best Section\u003e\u003e due to its high significance. Below shows a UML class diagram which shows `Exercise` class interactions."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ".Simplified Class Diagram for Exercise"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ExerciseClassDiagram.png[]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "An important point to note about our implementation of `Exercise` is the method, `isSameExercise()`. We will consider two `Exercise` as the same if `isSameExercise()` returns true."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". Executes when adding a new `Exercise` to client\u0027s `UniqueExerciseList`. This includes `add-e` and `edit-e`."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". Checks if the new `Exercise` is the same with an existing instance of `Exercise` in the client\u0027s `UniqueExerciseList`."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". Two `Exercises` are the same does not mean that they are equal."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Two `Exercise` are equal only if *all* attributes are equal."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Below shows an object diagram of two `Exercises` that will return true for `isSameExercise()`."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ".Object diagram of two instances of Exercise objects"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::IsSameExerciseObjectDiagram.png[]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "The two `Exercise` only have different values in `ExerciseSets` but equal values in:"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". `ExerciseName`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". `ExerciseDate`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". `ExerciseReps`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". `ExerciseWeight`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "This implementation is chosen as we felt that the user should increment the value in `ExerciseSets` in the existing `Exercise`. We followed the same idea as in the real life context and want to combine the sets of exercises with the same name, date, reps and weight."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "We do consider that the user might want to record the two instances separately as it might be done at different periods of the day. In the future, when adding a same `Exercise`, we can implement it such that the sets value of the exising `Exercise` gets incremented automatically instead of showing an error. For now, this implementation keeps the exercise table neat and compact for the user."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Execution flow of exercise commands"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "The exercise commands edits the client\u0027s `UniqueExerciseList`. Currently, there are 3 exercise commands."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". `add-e` : Adds an exercise to a client"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". `edit-e` : Edits a client\u0027s exercise"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". `delete-e` : Deletes a client\u0027s exercise"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "The commands follow a similar execution flow as other commands."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ".Activity Diagram for exercise commands"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ExerciseCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". The `FitBizParser` will create the associated exercise command parser. e.g. `AddExerciseCommandParser`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". Using `ParserUtil`, the parser will extract attribute details from the input and create the `Command`. e.g. `AddExerciseCommand`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". The exercise `Command` will be executed and modify the client\u0027s `UniqueExerciseList`."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ".. Exceptions like no client being viewed and invalid input are thrown here."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". The change will be reflected in the exercise table in GUI."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". Result box will display success message for the `Command`."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Adding an exercise to UniqueExerciseList"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "When adding a new `Exercise` to `UniqueExerciseList`, it is important which index it is added. This is such that the exercises for the client will be displayed in descending chronological order in the table after a `view-c` command. `TableView` provides sorting for dates. However, having `TableView` to do the sorting would result in mismatch of indexes of the exercises in the `UniqueExerciseList` and in the `TableView`. This will result in problems when using exercise commands that specifies an index like `delete-e`."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "To address this problem, a custom insertion sort has been written in UniqueExerciseList, under the `addToSorted(Exercise)` method. This method will do a single pass of the internal list to insert the element at the correct position. This assumes that the internal list is initially sorted (which it should be, since reading from storage will do an initial sort on it)."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "We will use an example of a `add-e` command to illustrate the execution of `addToSorted(Exercise)`. Consider an instance where user inputs `add-e n/pushup d/12-12-2011 reps/20`. The sequence diagram below shows the execution flow when the `AddExerciseCommand` is executed. Details of exception thrown are omitted as this is a postive instance and for simplicity."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ".Sequence Diagram for AddExerciseCommand"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::AddExerciseCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "`AddExerciseCommand` checks if there is an client being viewed. For this instance, we will consider the positive case where indeed there is a client being viewed. `AddExerciseCommand` will retrieve the client being viewed from the `Model` so that details like the existing exercise list of the client can be obtained. The sequence diagram illustrates the execution flow of `addToSorted(Exercise)` to obtain details of the `Exercise` being added and the existing `Exercise` in `UniqueExerciseList`. `AddCommand` will then check if there is an exercise that we consider as the same in the `UniqueExerciseList`."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ".Sequence Diagram for the addToSorted Method"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::AddExerciseCommandSequenceDiagramPart2.png[]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "`UniqueExerciseList` loops through the exercises in the list. and calls `getExerciseDate()` and `getExerciseName()`. The `LocalDate` and exercise name in `String` type are then used for comparision. The sequence diagram below illustrates the conditional checks during the comparision."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ".Sequence Diagram for conditional checks in addToSorted Method"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::AddExerciseCommandSequenceDiagramPart3.png[]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "The conditional checks are such that `UniqueExerciseList` maintain sorted by descending chronological order, followed by alphabetical order for exercises with the same dates."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Below shows a code snippet of the conditional checks in `addToSorted(Exercise)`."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "[.small]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "----"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "int dateComparision \u003d toAddDate.compareTo(currDate);"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "if (dateComparision \u003e 0) {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    break;"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "} else if (dateComparision \u003d\u003d 0) {"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    if (toAddName.compareTo(currName) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        break;"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        idx++;"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "} else {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    idx++;"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "----"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "`Arrays.sort()` can be used to sort the exercises in `UniqueExerciseList` after every addition. However, the worse case time complexity of `Arrays.sort()` is O(nlogn). This custom insertion sort will guarantee an O(n) time complexity to insert the new `Exercise` correctly. This is as efficient as it gets as any insertion will already incur an O(n) time complexity to first check if the internal list contains the same exercise. It is important to keep the time complexity low as clients can have many exercises."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "This section explains the our design considerations and analysis for the storage of exercises."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "[cols\u003d\"2,2,2,2\"]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Considerations | Store exercises with client and all clients in one JSON file (chosen) | Store all exercises into a separate JSON file | Store exercises with client but one JSON for each client"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Ease of retrieving / storing"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Easy to link the exercises to the client"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Hard to link the exercises to the client"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Hard to identify which JSON file is for which client"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Separation of data"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Does not keep client and exercise data separate"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Keep client data separate from exercise data"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Does not keep client and exercise data separate +"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Might have too many JSON files, one for each client"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Size limit of JSON files"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| High chances of having one large JSON file and potentially exceed the size limit of a JSON file"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Low chances of exceeding the size limit of a JSON file"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Low chances of exceeding the size limit of a JSON file"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Separation of concerns"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Non-separate code for reading/storing exercises and clients data"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Separate code for reading/storing exercises and clients data"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Non-separate ode for reading/storing exercises and clients data"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "We decided to use the first approach of storing the exercises with the associated client and have all the clients data in one JSON file. Codewise, each `JsonAdaptedClient` will have a list of `JsonAdaptedExercise`."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ClientExerciseStorageClassDiagram.png[]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "We want to keep the implementation of reading and storing of data simple. The first approach is the most simple. When reading the data, it removes the need to associate the exercises to the client. A client might potentially have a large amount of exercises, resulting in the reading process to be extremely slow. Therefore, a bad user experience."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Moreover, storing the exercise data from client data does not provide any performance benefits. Due to time constraints, we decided that the application should store all the data everytime it closes. This is regardless if the particular exercise or client data has been changed. Having to keep track of which data is edited and only overwrite those data would greatly increase the complexity of the application. Therefore, keeping exercises data separate from client data would be unnecessary and provide little additional functionality/benefits to the user."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Lastly, we foresee that it is improbable for the data size of both clients and exercises to exceed the maximum size limit of a JSON file. With the target user in mind, it is unlikely that he will have an enormous amount of clients. The application is meant to be used by a single user and not an organisation. Even though each client might have many exercises, the information of each exercise is relatively small. For now, collectively, the client and exercise data is unlikely to exceed the JSON size limit. We might consider to have multiple JSON files if the data size gets too big in future versions."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Indeed, `JsonAdaptedClient` having a list of `JsonAdaptedExercise` would violate separation of concerns. `JsonAdaptedClient` is now in charge of the client\u0027s information and the exercises. However, we felt that the benefits outweighted the costs and proceeded with the first choice."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "// end::exercise[]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "// tag::ziyingli[]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d Personal Best --- Li Zi Ying"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "This feature allows the users (ie. gym managers) to view the personal bests of exercises done by a client. This information is displayed in a table form, after the command `view-c INDEX` is called."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "The personal best feature is facilitated by the model `PersonalBest`, and the logic behind it is in `PersonalBestFinder`. The behaviour of this feature determines the personal best of each exercise done by the client based on these considerations:"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". If the `ExerciseWeight` attribute is recorded in the `Exercise`, then the `ExerciseWeight` is used as comparison"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". If there is no `ExerciseWeight` recorded in the `Exercise`, then `ExerciseReps` will be used as comparison"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". If neither of `ExerciseWeight` and `ExerciseReps` are recorded into the `Exercise`, then this particular exercise will not be put into the Exercise Personal Best table"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".. However, if the another `Exercise` of the same name is added in the future with `ExerciseWeight` and/or `ExerciseReps` specified, then the personal best of this exercise will still be calculated and shown in the Exercise Personal Best table"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". Note that `ExerciseSets`, although an attribute of the `Exercise` model, is not considered when checking for `PersonalBest` as the number of sets of an exercise does not contribute to a personal best record"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "A simplified class diagram of the classes involved in this feature is given below:"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".Simplified Class Diagram for Personal Best"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::PersonalBestClassDiagram.png[]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "In the following sequence diagram, we trace the execution for when the user decides to enter the command `view-c` into FitBiz:"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".Sequence Diagram of the View#execute Method for Personal Best"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::PersonalBestSequenceDiagram.png[]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "The explanation for the sequence diagram is as follows: when the user inputs `view-c`, `add-e`, `edit-c` or `delete-c`, `PersonalBestFinder#generateAndSetPersonalBest` is called, taking the client currently in view as the parameter. `PersonalBestFinder#generateAndSetPersonalBest` then retrieves client\u0027s list of exercises using `Client#getExerciseList` and creates a new `HashMap`, where the `key` is `ExerciseName` and the `value` is `Exercise`. Then the personal bests of each exercise of the client in view are generated using the above considerations. Finally the list of personal bests is set using `PersonalBest#setPersonalBest`."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "In designing this feature, we had to decide on the placement of the `PersonalBest` class in the model to comply with the OOP standards. Currently, the `PersonalBest` model has a whole-part relationship with `Client`, with `Client` being the whole and `PersonalBest` being a part of `Client`. The alternative is to consider `PersonalBest` as a part of `Exercise` instead."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".Table of Design Considerations"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| |  Put `PersonalBest` as a part of `Client`(Chosen) | Put `PersonalBest` as a part of `Exercise`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| *Adhering to OOP standards (Coupling and Cohesion)* | Increases cohesion as it logically makes more sense, currently each client has a list of exercises to themselves, and thus each client should also have a list of `PersonalBest` of each of these exercises to themselves |  Increases coupling between the logic and model as every time the commands `view-c`, `add-e`, `edit-e` and `delete-e` are called, the personal best table has to be updated, a new `PersonalBest` object has to be created. Then the `Client` will have to be dependent on this `PersonalBest` object created in the logic component, which causes unnecessary dependencies and higher coupling"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| *Ease of Implementation* | Might have significant conflicts as the `Client` model is changed to include one more attribute | Easier to implemention as methods related to `PersonalBest` is kept under `Exercise` model and separate from `Client` data and methods, so no refactoring is needed"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "We decided to use the first approach of placing `PersonalBest` as a part of `Client` instead of `Exercise`. There are multiple reasons for our choice as mentioned below."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "We want to maintain the OOP structure of the program. Logically, the personal best should belong to the client as the list of exercises belongs to the client. As the list of exercises is unique to every client, the personal best should also be so. We also do not want to increase coupling of the program as mentioned in the table above."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Moreover, even though personal best is generated using the list of exercises in the client, it can be instantiated even without an exercise list. Therefore it does not require the exercise class to exist and does not have a whole-part relationship with exercise. Coupling will also be increased as the client will be relying on the exercise class to generate the personal best. Therefore, the final choice was to place the personal best under client, with every client having their own personal best attribute."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "This personal best feature also leads into the `Graph` feature, which will be discussed in the next section, where we plot a graph of the client\u0027s progress of a specified exercise."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d Graph --- Li Zi Ying"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "This feature allows users to see the progress graph of the current client in view. The user has to specify the exercise name, the y-axis (either weights or reps), the start date and the end date. There has to be existing exercises in the client\u0027s exercise list for the specified axis and time period for the graph to be plotted, if no graph can be plotted, an error will be thrown."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "The graph mechanism is faciliated by the model class `Graph`, which contains the details of the graph. These include `ExerciseName`, `Axis`, `StartDate` and `EndDate`. The figure below is a UML class diagram to illustrate the `Graph` model."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".Simplified Class Diagram for Graph"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::GraphClassDiagram.png[]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "These attributes are bounded by these characteristics:"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". `ExerciseName` can only be alphanumeric characters"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". `Axis` can either be `reps` or `weight` only, case insensitive (`sets` are not considered due to the same reasoning in the above section)"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". Earliest `StartDate` possible can only be one year before the current date and cannot be after `EndDate`. `StartDate` also cannot be a future date"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". Earliest `EndDate` possible can only be one year before the current date and cannot be before `StartDate`. `EndDate` also cannot be a future date"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Here is an activity diagram displaying the steps taken when FitBiz receives a user input for the `graph` command:"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".Activity Diagram for Graph Command"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::GraphCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "The behaviour of this feature determines the graph plotted of the exercise specified based on these considerations:"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". If there is no such exercise with the matching `ExerciseName` in the client\u0027s exercise list from the specified `StartDate` to `EndDate`, then the graph cannot be plotted"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". If the `Axis` input is `reps` and the exercise specified does not have any reps input withint the `StartDate` to `EndDate`, then the graph cannot be plot"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". If the `Axis` input is `weight` and the exercise specified does not have any weight input within the `StartDate` to `EndDate`, then the graph cannot be plot"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". If all of the above are fulfilled (ie. there is at least one valid exercise with the matching `ExerciseName` and has weight/reps input depending on the `Axis` specified), then the graph will be plotted, with each exercise in chronological order"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "The flow of the program is illustrated using the sequence diagram below:"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".Sequence Diagram for Graph Command"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::GraphSequenceDiagram.png[]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "The explanation is as follows: when the user inputs `graph` with all relevant arguments input correctly, a new `GraphCommand()` is created, taking the newly created `Graph` object as parameter."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "`GraphCommand#execute()` then retrieves the exercise list from the client currently in view and checks if there is at least one exercise with a matching exercise name. If there is no exercise to plot, then an error `GraphCommand.MESSAGE_EXERCISE_NOT_IN_LIST` will be thrown. Next, the list of exercises to be plot will be generated using `Graph#generateGraphList()`. Once again, there will be a sanity check to see if the list size is zero, which means that no graph cannot be plotted."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "In designing this feature, we had to decide on the implementation of certain classes like `Axis` to comply with the OOP standards of Abstraction."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".Table of Design Considerations"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| |  Create enum class `Axis Type`(Chosen) | Check for `Axis` value using raw types"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| *Adhering to OOP standards (Abstraction)* | Increases level of abstraction as there are only two different types of axis that can be chosen |  Less abstraction and increases complexity as we will have to check for the equality of the axis type using the equality check for the `String` raw type"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| *Ease of Implementation* | Requires some refactoring to include `AxisType` class and the relevant getter methods | Easier to implemention as no extra classes or methods are needed, so no refactoring is needed"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "We decided to use the approach of abstracting the axis types away into `AxisType` enum class. As the graph implementation will require a substantial amount of equality checks, especially for the attributes of `Graph` to make sure that we are drawing the correct graph for the user. As such equality checks are made, it makes it difficult to keep checking `String` equality as regular data types like `String` would allow invalid values to be assigned to a variable."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "As our axis values can only be `REPS`, `WEIGHT` or `NA`, we can check for each case using the switch case method instead of checking for equality using raw types. This is also much more efficient than using multiple if-else statements. For example, in the code snippet below, the method `fillSeries()` uses switch case statements to add data values depending on the `AxisType`."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".Code snippet"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "----"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private void fillSeries() {"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        switch (axisType) {"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        case REPS:"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            fillRepsSeries();"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            yAxis.setLabel(\"Reps\");"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        case WEIGHT:"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            fillWeightSeries();"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            yAxis.setLabel(\"Weight\");"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "----"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Moreover, to keep in line with the OOP standards, we decided that it will be better to abstract away data types like `AxisType` into its separate class instead of storing it as a raw type in `Axis`. This ensures the code quality of our program and reduces complexity (especially in terms of equality checking as mentioned above) by abstracting away the more complex details into classes of a lower level. The consideration of abstracting details away is also used for creating `StartDate` and `EndDate` classes as attributes of `Graph`, instead of using the Java in-built `LocalDate`."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "By considering the above two factors, despite having to put in the extra effort to create a new `AxisType` class and thus requiring extra methods like getters and setters, we decided to move with the approach of creating the `AxisType` enum class and refactor to accomodate for the additional data type."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "// end::ziyingli[]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "// tag::filter-c-command[]"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d Filtering the list of clients --- Toh Ker Wei"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "This feature allows users to filter the list of clients by specifying the `Tag` or `Sport` of the clients they want to view."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "This filtering mechanism is facilitated by `TagAndSportContainsKeywordsPredicate`, that implements `Predicate\u003cClient\u003e` which is a wrapper class for a boolean. `FilterCommand` is associated with `Model` is responsible for calling `Model#updateFilteredClientList` based on `TagAndSportContainsKeywordsPredicate`. `TagAndSportContainsKeywordsPredicate` will call `test` on `Client` to check if the clients `Tag` and `Sport` contains all the keyword. the relations between these classes are shown in the class diagram below."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::FilterClassDiagram.png[]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "To further elaborate,"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "`TagAndSportContainsKeywordsPredicate` contains 2 booleans:"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "1. `hasTag`: evaluates if the client has all the `Tag` specified"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "2. `hasSport`: evaluates if the client has all the `Sport` specified"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "If there is no keyword specified for either `Tag` or `Sport`, the corresponding boolean will return `true`. There must be at least 1 keyword specified, regardless of whether it is a `Tag` or `Sport`. `TagAndSportContainsKeywordsPredicate` will then evaluate and return the logical addition of `hasTag` and `hasSport`."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "In the following sequence diagram, we will be tracing the execution of the command `filter t/obese s/swim` entered by the user."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::FilterSequenceDiagram.png[]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ".Table of Design Considerations"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "| |Using separate booleans to check for `Tag` and `Sport` keywords  (Chosen) | Using one boolean to check for all keywords"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "| Ease of Implementation | Checks for client\u0027s `Tags` and `Sports` containing keywords can be done separately ensuring that individual results are correct before combining them |Simpler logic but errors are more difficult to pinpoint to either `TAG` or `SPORT`"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "| Ease of Expanding Feature | Easier to add new parameters to filter since a separate check will be done before combining with the result of previous checks | Boolean conditions can get very complex and logical error will be prone to occur"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "We decided to use the first approach of checking if the client contains `Tag` specified and `Sport` specified separately."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Firstly, by separating the checks for each attributes, a correct implementation of checking `Tag` against the keywords will allow us to easily duplicate the logic to be done for `Sport`. This makes the code easier to debug as we can simply check the hasAttribute boolean to see if it gives the correct value."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Secondly, separating the checks for each attributes will allow us to add attributes of different types stored in different data structure easier. We could simply add another check on the attribute against the keyword specified then do a logical addition of the result against the others."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Therefore, as we foresee us adding more attributes to be filtered increasing the need to ensure logical correctness, the first approach is the most ideal."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "// end::filter-c-command[]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "// tag::view-c-command[]"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d Viewing the information of a client --- Toh Ker Wei"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "This feature allows users to view the information of a specific client using his `INDEX` in the clients list. Information displayed includes additional information of the client, exercises done and his personal best of exercises done."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "The view client\u0027s information feature is primarily facilitated by the model `Client`. The details for list of exercises done and personal best will be discussed in section 3.7 and not be covered here. The client\u0027s `INDEX` in the clients list will be used to identify and retrieve his information. Additionally, only when a client\u0027s information is being viewed, graph of his exercises can be plotted."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "In the following sequence diagram, we will be tracing the execution when the user enters the command `view-c 3`"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::ViewSequenceDiagram.png[]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "| | Choose client to view based on `INDEX` (Chosen)| Choose client to view based on `NAME`"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "| Adhering to Single Responsibilities Principle| `view-c` only has to retrieve and display the client based on `INDEX` entered"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "| `view-c` has to retrieve clients with the same name and use `INDEX` to specify the client to view"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "|Ease of Implementation | Easier to implement as `MODEL` only needs to be accessed once | Harder to implement as `view-c` needs to return a list of clients with the same name before using `INDEX` to specify the client"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "We decided to use the first approach of using the client\u0027s `INDEX` to view his information."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Firstly, as the client\u0027s `INDEX` is unique, `view-c` will only be responsible for retrieving and displaying the client\u0027s information and will not need to resolve clients with the same names."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Secondly, for clients with the same name, `INDEX` qill be used to specify the client to be view. This causes extra work for the implementation. Furthermore, in cases where users manage many clients and some with same names, there are functions like find and filter which allow users to scope the clients list and easily find the desired client\u0027s `INDEX`."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Therefore, viewing a client by his `INDEX` minimises the responsibility of the command and will not need to resolve conflicting clients and is the most ideal."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "// end::view-c-command[]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Has a need to manage a significant number of gym clients and their information (clients\u0027 details and exercises)"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Prefer desktop apps over other types"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Can type fast"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Prefers typing over mouse input"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Wants to book facilities easily [v2.0]"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*Value proposition*: Keep track of your gym training schedule and clients\u0027 exercises faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Dban1"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c30%,\u003c35%,\u003c50%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|`* * *` |coach for fitness competitors |record the cliental bests of my clients |monitor their progress"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`* * *` |coach for fitness competitors |record the exercise type and intensity my clients have done for the day |know if they are on track for their competitions"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`* * *` |coach for fitness competitors|record the date and time of my clients’ training sessions and keep track of which day they work out|"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|`* * *` |coach with many fitness competitors |view my overall schedule for the day/week|"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|`* * *` |coach that communicates with my clients |display visualisations (graphs/charts) |convey the client\u0027s training progress better"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`* * *` |coach |add new profiles to the app to keep track of new clients|"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`* * *` |coach |list all my clients|"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`* * *` |coach |edit a client’s details |change and update an existing client’s details"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|`* * *` |coach |delete my client|"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`* * *` |coach |search my client by typing their name |find my client’s information easily"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`* * *` |coach |add, edit and delete new exercises that are not found in the application|"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`* * *`| coach |look for user help |get help on how to use the features"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`* *` |coach with many clients |be reminded of my daily schedule at the start of the day |track my appointments"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|`* *` |forgetful coach with many clients |look at my records on clients |know what exercises they are weak in or require more assistance"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`* *` |coach with a tight schedule |display my open slots |plan for training more effectively"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|`* *` |coach with many clients |set clientalised goals for my clients |plan a workout routine that is achievable"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`* *` |coach with many different clients |easily export the data of a client (to a CSV file) |backup and store that data in another format"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`* *` |coach |track my clients by using a tag |easily view the clients I want to"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`*` |coach with clients all over SG |find the nearest gym based on where my client stays|"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`*` |coach with a tight schedule |view a summary page to present to me just the important data, configurable by me|"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`*` |coach |track my total earnings from all my clients|"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|`*` |coach that likes to vary my clients’ training |choose from a list of different exercises with the same purposes|"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`*` |coach for fitness competitors |view incoming competitions of my clients |be reminded to focus on them more"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`*` |coach who wants to visually track the progress of my clients |store photos to monitor the changes in my client’s physique|"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|`*` |coach |check if the gym I am going to is closed|"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`*` |coach |use the timer in the application |seamlessly execute the time interval of the workout planned"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`*` |coach |book the facilities required by the workout|"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`*` |coach |see upcoming competitions or meet |plan for my clients to attend them"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`*` |coach for fitness competitors |record the food intake of my clients |know if they are following my diet plan for them"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`*` |coach |monitor my clients caloric intake |know he is meeting his dietary requirements"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`*` |coach |manage the payment fee/payment day of the clients |charge them accordingly"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "(For all use cases below, the *System* is the `FitBiz` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d Use case 1: Add client"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "1.  User requests to add a client"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "2.  FitBiz requests for details (eg. name, phone number, address, email)"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "3.  User enters the requested details"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "4.  FitBiz adds client to database"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* 3a.  The input format is invalid"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "** 3a1.  FitBiz shows an error message"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 3a2.  User enters the new details"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Steps 3a1 to 3a2 are repeated until the data entered is correct."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Use case resumes from step 4"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d Use case 2: View client"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "1.  User requests to view all the available information of client"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "2.  FitBiz shows a list of clients"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "3.  User requests to view a specific client in the list"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "4.  FitBiz shows all available information of the client"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* 2a.  The list is empty"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 2a1. FitBiz displays an empty client list"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* 3a.  The given index is invalid or out of range"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 3a1. FitBiz shows an error message"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 3a2. User enters the new index"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Steps 3a1 to 3a2 are repeated until the data entered is correct."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d Use case 3: Edit client"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "1.  User requests to edit a client\u0027s details"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "2.  FitBiz shows a list of clients"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "3.  User requests to edit a specific client in the list and inputs the attributes and values"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "4.  FitBiz edits client\u0027s details"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* 2a.  The list is empty"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 2a1. FitBiz displays an empty client list"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* 3a.  The given input is invalid"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 3a1. FitBiz shows an error message"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 3a2. User enters the new details"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Steps 3a1 to 3a2 are repeated until the data entered is correct."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d Use case 4: Delete client"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "1.  User requests to delete a client"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "2.  FitBiz shows a list of clients"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "3.  User requests to delete a specific client in the list"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "4.  FitBiz deletes the client"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* 2a.  The list is empty"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 2a1. FitBiz displays an empty client list"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* 3a.  The given index is invalid or out of range"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 3a1. FitBiz shows an error message"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 3a2. User enters the new index"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Steps 3a1 to 3a2 are repeated until the data entered is correct."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d Use case 5: List clients"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "1.  User requests to list all existing clients"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "2.  FitBiz lists all existing clients"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* 1a.  The input format is invalid"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 1a1.  FitBiz shows an error message"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 1a2.  User provides new input"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Steps 1a1 to 1a2 are repeated until the input entered is correct."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d Use case 6: Add exercise"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "1.  User requests to add an exercise to a client"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "2.  FitBiz shows a list of clients"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "3.  User requests to add exercise to a specific client in the list"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "4.  FitBiz adds exercise to the client"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* 2a.  The list is empty"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 2a1. FitBiz displays an empty client list"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* 3a.  The input format is invalid"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 3a1. FitBiz shows an error message"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 3a2. User enters the new details"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Steps 3a1 to 3a2 are repeated until the data entered is correct."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d Use case 7: Filter clients"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "1.  User requests to filter clients based on a keyword in a client\u0027s tag and/or sports"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "2.  FitBiz filters and displays clients based on specified keywords"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* 1a.  The input format is invalid"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 1a1.  FitBiz shows an error message"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 1a2.  User provides new input"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Steps 1a1 to 1a2 are repeated until the input entered is correct."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d Use case 8: Add schedule"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "1.  User requests to add schedule for a client"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "2.  FitBiz displays a list of clients"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "3.  Client inputs the schedule for the day or the time specified for a particular client"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "4.  FitBiz adds and displays the schedule"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* 2a.  The list is empty"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 2a1. FitBiz displays an empty client list"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* 3a.  The given input format is incorrect"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 3a1. FitBiz shows an error message"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 3a2. User enters the new input"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Steps 3a1 to 3a2 are repeated until the data entered is correct."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d Use case 9: View graph visualisations"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "1.  User requests to view graph visualisations of a client\u0027s progress"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "2.  FitBiz shows a list of clients"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "3.  User requests to view the specified client in the list by index"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "4.  Fitbiz shows all available information of the client"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "5.  User requests to view the graph of the specified exercise in the client\u0027s exercise list"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "6.  FitBiz displays the graph of the specified exercise"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* 2a.  The list is empty"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 2a1. FitBiz displays an empty client list"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* 3a.  The given index is invalid or out of range"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 3a1. FitBiz shows an error message"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 3a2. User enters the new index"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Steps 3a1 to 3a2 are repeated until the data entered is correct."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* 5a. The given input format is incorrect"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 5a1. FitBiz shows an error message"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** 5a2. User enters the new input"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Steps 5a1 to 5a2 are repeated until the data entered is correct."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Use case resumes at step 6."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".  Should be able to hold up to 1000 clients without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ".  Should work mostly without the need for the Internet."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".  Should work reliably."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".  Should be able to store data in a human-readable format."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".  Should be for a single user."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".  Should not use DBMS to store data."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".  Should not exceed 100Mb in file size."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Client::"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "The client of the fitness coach."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Client In View::"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "The client currently in view (after the `view-c` command is used)."
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Client List::"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "The GUI section which shows all client currently listed in FitBiz."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Client View::"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "The GUI section which shows all the information of the client in view"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "Dban1"
        },
        "content": "[[exercise]] Exercise::"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "A workout activity done by a client that can be recorded."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Exercise Table::"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "The GUI section which shows the list of the client in view\u0027s exercises"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Fitness Coach::"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "The targer user base of FitBiz."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Graph::"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "The graph of an exercise done by a client (reps/weights vs. date)."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Any modern OS like Windows, Linux, Unix, or OS-X."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Personal Best::"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "The exercise done by the client with the highest weight (or highest rep if weight does not exist)."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Personal Best Table::"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "The GUI section which shows the list of the client in view\u0027s personal best exercises"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Schedule::"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "The client\u0027s training schedule per week. Note that one client cannot have overlapping schedules but other client\u0027s schedule can overlap with another client\u0027s."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Schedule Panel::"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "The GUI section which shows the list of all clients\u0027 schedules from the current client list"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "Dban1"
        },
        "content": "   Expected: Shows the GUI without the client view populated with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d Command autocomplete"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Unambiguous, single command found"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ".. Test case: type `gr` into the command box and press kbd:[Tab] +"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "   Expected: command box shows completed `graph n/ a/ sd/ ed/` command, with the caret position right after `n/`. Result box shows the `graph` command usage."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ".. Test case: type `add-e` into the command box and press kbd:[Tab] +"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "   Expected: command box shows completed `add-e n/ d/ reps/ ew/ sets/` command, with the caret position right after `n/`. Result box shows the `add-e` command usage."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Ambiguous, multiple commands found"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ".. Test case: type `a` into the command box and press kbd:[Tab] +"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "   Expected: command box shows longest common prefix `add-`, with the caret position at the end of the line. Result box indicates and lists that `add-e` and `add-c` commands are found."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". No valid commands found"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ".. Test case: type `Fitbiz!` into the command box and press kbd:[Tab] +"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "   Expected: command box and caret positions does not change. Result box indicates that no commands were found."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Prefix traversal when commands are completed with white spaces"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ".. Test case: type `graph n/ a/ sd/ ed/` into the command box and press kbd:[Tab] +"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "   Expected: caret position travels around all the `/` with wraparound."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ".. Test case: type `///` into the command box and press kbd:[Tab] +"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "   Expected: command box and caret positions does not change. Result box indicates that no commands were found. This is similar to 3, no valid commands found."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Commands with white spaces but without `/`"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ".. Test case: type `i \u003c3 2103` into the command box and press kbd:[Tab] +"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "   Expected: command box and caret positions does not change. Result box does not change. Basically nothing happens."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d Deleting a client"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "Dban1"
        },
        "content": ". Deleting a client while all clients are listed"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".. Prerequisites: At least one client in the list. List all clients using the `list-c` command."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".. Test case: `delete-c 1` +"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "   Expected: First client is deleted from the list. Details of the deleted client shown in the status message."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".. Test case: `delete-c 0` +"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "   Expected: No client is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".. Other incorrect delete commands to try: `delete-c`, `delete-c x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d Adding an exercise"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". Adding an exercise to the client in view\u0027s exercise table"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ".. Prerequisites: View a client using the `view-c` command. A list of exercises done by the client can be seen in the exercise table. It is possible to have no exercises recorded at the moment."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ".. Test case: Substitute DATE with the current date +"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "`add-e n/bench press date/DATE reps/30 sets/4 ew/10` +"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Expected: The added exercise can be seen in the exercise table. A success message stating that there is a new exercise recorded will also be shown in the result box."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ".. Test case: Substitute DATE with the current date +"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "`add-e n/pushup date/DATE` +"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Expected: The added exercise can be seen in the exercise table. A success message stating that there is a new exercise recorded will also be shown in the result box."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ".. Test case: Substitute DATE with the day after the current date +"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "`add-e n/bench press date/DATE reps/30 sets/4 ew/10` +"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Expected: No exercise added. An error message stating that the valid range for date will be shown."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ".. Test case: Substitute DATE with the current date +"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "`add-e n/pushup d/DATE reps/ten` +"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Expected: No exercise added. An error message stating that input for reps have to be a whole number from 1 to 9999 will be shown."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ".. `add-e n/pushup` +"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Expected: No exercise added. An error message stating \"invalid command format!\" and a description on how to use `add-e` command will be shown."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ".. Test case: Substitute DATE with the current date +"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "`add-e n/pushup d/DATE sets/4` +"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "`add-e n/pushup d/DATE sets/2` +"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Expected: No exercise added. An error message stating that the exercise already exists and ask user to increment the existing exercise will be shown."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d Filtering the client list"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ". Filtering the client list with different `Tag` and `Sport` specified"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ".. Test case: `filter-c t/normal s/hockey` +"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Expected: Client with `Tag` normal and `Sport` listed."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ".. Test case: `filter-c s/sumo wrestling` +"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Expected: Client with `Sport` `sumo wrestling` listed."
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ".. Test case: `filter-c t/normal vegetarian` +"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Expected: Error stating \"Tags names should be alphanumeric\" shown."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ".. Test case: `filter-c t/normal t/vegetarian` +"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Expected: Client with `Tag` `normal` and `vegetarian` listed."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d Adding new client into FitBiz"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ". Adding a new client into FitBiz with different parameters stated"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ".. Test case: `add-c n/John Cena p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 g/Male b/26-01-1980 cw/96 tw/69 h/156 s/Sumo Wrestling t/Vegan t/healthy r/History of back injuries` +"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Expected: New client added."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ".. Test case: `add-c n/Micheal Jordan p/98254 e/mikeyboii@example.com a/basketball court blk 666 #02-25` +"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Expected: New client added."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ".. Test case: `add-c n/Simba p/98543456 e/thelionking@gmail.com` +"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Expected: Error \"Invalid command format!\" shown."
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ".. Test case: `add-c n/Secret Man p/97656561 e/cantseemee@void.com a/here @ dodo coast g/ b/ cw/ tw/ h/ r/ s/ t/` +"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Expected: New client added."
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ".. Test case: `add-c n/Rachel tan p/93214321 e/RachelTan@mail.com a/choa chu kang ave 22 blk 909` followed by `add-c n/Rachellie Tan p/98786110 e/RachelTan@mail.com a/bishan grove 45` +"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Expected: Error \"This phone number and/or email already exists in FitBiz.\" shown."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d Scheduling clients"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "Dban1"
        },
        "content": ". Scheduling a valid client from the current *Client List* to have *_1_* schedule"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".. Prerequisites: At least one client in the *Client List*"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".. Test Case: `schedule 1 sch/MON-1100-1200` +"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Expected: `FIRST_CLIENT_NAME` \u0027s overall schedule has been changed to:"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "Dban1"
        },
        "content": "MON Time: 11:00 - 12:00"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "Dban1"
        },
        "content": ". Scheduling an invalid client index"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".. Test Case: `schedule -1 sch/MON-1100-1200` +"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Expected: Invalid command format! +"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "Dban1"
        },
        "content": "schedule: Adds the training schedule of the client, identified by the index number used in the displayed client list. The schedule should include the first 3 letters of the day,"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "Dban1"
        },
        "content": "start and end time in 24 hour format, in 1-minute denominations. Multiple training schedule can be added to a client."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "Dban1"
        },
        "content": ". Multiple scheduling"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".. Prerequisite: At least one client in the *Client List*"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".. Test Case: `schedule 1 sch/MON-1300-1400 sch/TUE-1700-1900` +"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Expected: Alex Yeoh\u0027s overall schedule has been changed to: +"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "Dban1"
        },
        "content": "MON Time: 13:00 - 14:00 +"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "Dban1"
        },
        "content": "TUE Time: 17:00 - 19:00"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d Listing all clients"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "Dban1"
        },
        "content": ". Using list-c"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".. Test Case: `list-c` +"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Expected: Listed all clients"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d Editing a client"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "Dban1"
        },
        "content": ". Editing a client\u0027s address"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".. Prerequisites: At least one client in the *Client List*"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".. Test Case: `edit-c 1 a/New Address` +"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Expected: Edited Client: `CLIENT INFORMATION`"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "Dban1"
        },
        "content": ". Adding multiple sports to a client"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".. Prerequisites: At least one client in the *Client List*"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".. Test Case: `edit-c 1 s/Tennis s/Soccer` +"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Expected: Edited Client: `CLIENT INFORMATION`"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "Dban1"
        },
        "content": ". Removing client\u0027s sports"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".. Prerequisites: At least one client in the *Client List*, with existing sports"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".. Test Case: `edit-c 1 s/` +"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Expected: Edited Client: `CLIENT INFORMATION`"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d Viewing a client"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". Viewing a client while all clients are listed"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".. Prerequisites: At least one client in the list. List all clients using the `list-c` command."
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".. Test case: `view-c 1` +"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "   Expected: First client is viewed from the list. Success message shows that you are currently viewing the first client."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".. Test case: `view-c 0` +"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "   Expected: No client is viewed. Error details shown in the status message."
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".. Other incorrect delete commands to try: `view-c`, `view-c x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d Viewing a graph of an exercise"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". Viewing a graph of the specified exercise while a client is in view"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".. Prerequisities: Have a client currently in view using the `view-c` command. Have at least one exercise in the exercise table."
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".. Test case: `graph n/Push Up a/reps sd/01-01-2020 ed/01-04-2020` command format is correct and no other input issues +"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Expected: Graph is displayed and success message is shown."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".. Test case: `graph` or any other parameters missing +"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Expected: No graph displayed, error stating \"Invalid command format!\" with the correct usage is shown."
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".. Test case: Correct graph command format but no exercise record within the stipulated timeframe +"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Expected: No graph displayed, error stating \"Graph cannot be plotted\" as there are no records of this exercise within the given timeframe."
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".. Test case: Correct graph command format and existing exercise records but no valid inputs for the given axis +"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Expected: No graph displayed, error stating \"There is no graph to be plotted for this axis specified\" is shown and the user is asked to pick a different axis or exericse."
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".. Test case: Correct graph command format but the start date is chronologically later than the end date +"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Expected: No graph displayed, error stating \"Invalid command format!\" with the correct usage is shown"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 210,
      "ziyingli": 398,
      "tohkerwei": 109,
      "Dban1": 187,
      "AaronCQL": 242,
      "-": 329
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d FitBiz Level 3 - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 1,
      "-": 122
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all clients who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dban1"
        },
        "content": "The above method can be used to get a printable string representing a bunch of client details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dban1"
        },
        "content": "// p is a Client object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "Dban1": 3,
      "-": 213
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d FitBiz Level 3 - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your cliental fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 1,
      "Dban1": 1,
      "-": 82
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d FitBiz Level 3 - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 1,
      "-": 51
    }
  },
  {
    "path": "docs/UmlSubmission_ZY.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d UML Submission - Li Zi Ying"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-F11-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".Personal Best Class Diagram"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::PersonalBestClassDiagram.png[width\u003d500]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "The personal best class diagram helps to illustrate how the classes used in implementing the Personal Best feature relate to each other. From the diagram, `ViewCommand`, `AddExerciseCommand`, `EditExerciseCommand` and `DeleteExerciseCommand`, all know of `PersonalBestFinder` but `PersonalBestFinder` does not know of them. This ensures that `PersonalBestFinder` does not know any extra information that is not useful to it. From the diagram, `PersonalBestFinder` is the bridge between the `Logic` component and the `Model` component so that coupling between the classes is minimised. The `PersonalBestFinder` then has to know about `UniqueExerciseList`, `Client` and `PersonalBest` in order to generate and set the personal best of the client."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".Personal Best Sequence Diagram"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::PersonalBestSequenceDiagram.png[width\u003d500]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "This diagram helps to better illustrate the program flow when a user keys in the `view-c` command, which will call `PersonalBestFinder#generateAndSetPersonalBest` to generate and set the client\u0027s personal best table by retrieving the exercise list from the client in view. After finding each exercise\u0027s personal best, the client\u0027s personal best is set using `Client#setPersonalBest` and updated in the GUI."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".Graph Class Diagram"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::GraphClassDiagram.png[width\u003d300]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "This diagram helps to better illustrate how the classes used in implementing the Graph feature relate to each other. From the diagram, the `Graph` has four attributes `ExerciseName`, `Axis`, `StartDate` and `EndDate`, which are also the parameters of the `graph` command. `Axis` has its own unique type `AxisType` to facilitate with equality checking and maintain abstraction. The `ExerciseName` is also part of the `Exercise` model."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".Graph Sequence Diagram"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::GraphSequenceDiagram.png[width\u003d500]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "This diagram helps to better illustrate the program flow when a `graph` command is entered. First, we make sure that there is a client in view and retrieve his exercise list. If there is no client in view, then the graph cannot be displayed. Next, we check if the client\u0027s exercise list contains the required exercise name within the given timeframe. If there is no exercise that matches the given exercise name within the timeframe, then the graph cannot be plotted. Finally if both checks pass, the graph list is generated and a `CommandResult` will be returned from the `execute()` method."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ".Grand Command Activity Diagram"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::GraphCommandActivityDiagram.png[width\u003d500]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "This diagram helps to illustrate how FitBiz should act when a user tries to use the graph command. When a user enters a graph command, FitBiz will parse the arguments accordingly and try to execute the command. A check is made to see if there is a client in view. Next, a check is made to see if there is an existing exercise record within the stipulated timeframe. If all checks pass, then the graph will be successfully displayed and feedback showing execution success will be given to the user."
      }
    ],
    "authorContributionMap": {
      "ziyingli": 40
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d FitBiz - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-F11-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "By: `CS2103T-F11-2` Since: `Feb 2020` Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[[overview]]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d About FitBiz"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "FitBiz is a fitness business management tool tailor made for fitness coaches to manage their clients. From managing your client\u0027s profile to planning your schedules, FitBiz will surely ease the pain and monotony of managing a small to medium client portfolio."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "This program is primarily a desktop application and is very optimised for those who prefer to work with a Command Line Interface (CLI). If you can type fast, and have clients to train and manage, FitBiz is definitely for you!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d About this User Guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "This User Guide explains how to use FitBiz, as well as provides an understanding of the features and commands and some common use cases of this application."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "In this guide, we cover:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* How to navigate the Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* How to use the Command Line Interface (CLI)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Syntax of the commands available in FitBiz"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Common use cases for each command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Common problems encountered by users"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[[understanding-the-gui]]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d Understanding the Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "When you first launch FitBiz, you will be greeted by the GUI. In this section, we shall learn about what each section of this GUI is responsible for."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "// diagram for hello world command box"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ".FitBiz GUI Layout"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::Ui-annotated.png[]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* **Command Box**: this is where you enter your commands"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** Note that the border will glow green if your command is successfully executed, and red otherwise"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* **Result Box**: this displays feedback and other useful information about your commands that you have just entered"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* **Client List**: this displays all your clients currently recorded in FitBiz"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* **Schedule Panel**: this displays all your schedules of your clients"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* **Client View**: this displays all the important details about the client you are currently viewing (which we refer to as _client in view_). In here, we have 3 further sections:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** **Client Details**: this displays other information about your client that is otherwise not found in **Client List**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** **Exercise Table**: this displays all the exercises recorded for the current _client in view_"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** **Personal Best Table**: this displays the personal bests of the exercises done by the current _client in view_"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "If this is your first time using FitBiz and you have just started up the application, you may realise that the *Client View* section is missing. This is because you are currently not viewing a client. Refer to \u003c\u003cview-c-command\u003e\u003e for more information about what you need to do."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "// tag::understanding-the-cli[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[[understanding-the-cli]]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d Understanding the Command Line Interface (CLI) --- Aaron Choo"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Even though FitBiz comes with a GUI, it is mainly used to display data. Most of the user interaction occurs via the CLI, which in FitBiz, is comprised of the *Command Box* and the *Result Box*. We understand that CLIs have higher barriers to entry and may scare some inexperienced users away. As such, we have provided some features common to most modern CLIs to make your user experience with FitBiz much better. In this section, we shall look at the **Command History** and the **Command Autocomplete** feature, and learn how to effectively utilise them."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[[command-history]]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d Command History"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Similar to most modern CLIs, users of FitBiz can press the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrow keys to cycle through their previously entered commands. If you have prior experience in using a CLI, feel free to skip this section as this should be second nature to you. If not, here is a quick tutorial on how to use this time saving feature."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "First, start by typing anything into the *Command Box*. It _need not_ have to be a valid command (like those shown in \u003c\u003cCommands\u003e\u003e). In our example, we chose to type `Hello World`:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "// diagram for hello world command box"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::command-history-hello-world.png[]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Next, hit the kbd:[Enter] key to enter the command into FitBiz. Notice that whatever you have typed in the *Command Box* should have disappeared. If you did not enter a valid command (like `Hello World`), the border of the *Command Box* would have turned red, and you would have been prompted by a message saying `Unknown command` in the *Result Box* like shown:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "// diagram for invalid command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::command-history-unknown-command.png[]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Next, continue entering different commands into the *Command Box*. You can safely ignore all the `Unknown command` prompts for now."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Once you feel like you have entered enough commands into FitBiz, try hitting the kbd:[\u0026uarr;] key several times. You should start to see the history of your entered commands displaying in the *Command Box* in reverse chronological order. If you press the kbd:[\u0026uarr;] key enough times (or simply hold down the key), you would realise that the command in the *Command Box* no longer changes. In our case, it displays `Hello World`, our first ever entered command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Likewise, you can also see your more recent commands by pressing the kbd:[\u0026darr;] key. Again, if you press it enough times, you would realise that the text from the *Command Box* disappeares (right after displaying your most recent command). This means that you have reached the end of your command history."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "If you are not currently browsing the history, you can press the kbd:[\u0026darr;] key to immediately clear what you are currently typing in the *Command Box*."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[[command-autocomplete]]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d Command Autocomplete"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Again, similar to most modern CLIs, users of FitBiz can press the kbd:[Tab] key to autocomplete commands that they have partially typed. If the partially typed letters uniquely identifies a valid command in FitBiz (see \u003c\u003cCommands\u003e\u003e), the complete command will automatically appear in the *Command Box*. Otherwise, a list of all commands similar to the ambiguous letters will appear in the *Result Box*."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Also, we understand that some of FitBiz\u0027s commands may be particularly long and diffcult to remember. In order to remedy this, we have also provided *autocompletion of parameter prefixes* for some commands, as well as the *use of kbd:[Tab] to easily get to the next prefix*. When autocompleting commands, the caret position will also be automatically set to the most optimal position corresponding to the completed command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "To see this feature in action, type `add-c` into the *Command Box* and press kbd:[Tab]:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::autocomplete-1.png[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Immediately, you should have noticed three things:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". All the parameter prefixes pertaining to the `add-c` command have been automatically completed for you"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Your caret is placed right after the `n/` for you to type your parameter"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". The **Result Box** shows you the usage of the `add-c` command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Now, you can also press the kbd:[Tab] key repeatedly to go to the next parameter prefix, instead of wasting time using your mouse."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Note however, that there are some similar commands in FitBiz that have the same few starting letters. For example: both `add-c` and `add-e` starts with the letter \"a\". As such, hitting kbd:[Tab] when you have only typed `a` in the *Command Box* will not autocomplete either command (unfortunately, FitBiz cannot read your mind). However, you will find that the command will be completed up till `add-`, the point where `add-e` and `add-c` differs. The **Result Box** will also prompt you with the list of all similar commands found:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::autocomplete-2.png[]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "To autocomplete the parameter prefixes like in the first example above, you would just have to complete the command and press kbd:[Tab] once more."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Commands and their parameters in FitBiz are always separated by white spaces (ie. ``schedule 1 sch/``). As such, the kbd:[Tab] key will only try to autocomplete your command if your current input in the *Command Box* is a single word. In other words, if your input is made up of more than one word separated by white spaces, FitBiz will ignore your use of kbd:[Tab]. Do not be surprised when you try to autocomplete more than a single word like `add some thing`, and yet receive no response from FitBiz."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "The autocompletion of the parameter prefixes are only for these commands: `add-c`, `add-e`, `filter-c`, `graph`, and `schedule`. Autocompletion of prefixes for edit commands are not included as we understand that most likely than not, users would only choose to edit one field at a time."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "// end::understanding-the-cli[]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Ensure you have Java 11 or above installed in your Computer"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Download the latest `FitBiz.jar` link:{repoURL}/releases[here]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Move the `FitBiz.jar` file to the folder you want to use as the home folder of this application (to reduce clutter, an empty folder is recommended as files will be generated)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Double-click the file to start the app. The following GUI should appear in a few seconds:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::Ui.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Type the command in the *Command Box* and press kbd:[Enter] to execute it"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "** For example, executing the `help` command will lead you to this page"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Refer to the \u003c\u003cunderstanding-the-gui, GUI\u003e\u003e and \u003c\u003cunderstanding-the-cli, CLI\u003e\u003e guides if you need help navigating this application"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Refer to \u003c\u003cCommands\u003e\u003e for the details and syntax of each command"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d Commands"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "This section introduces the syntax and the usages of the commands available in FitBiz. In explaining the syntax, we will adhere to the following format:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Words in `UPPER_SNAKE_CASE` are the parameters to be supplied by the user"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "** e.g. in `add-c n/NAME`, `NAME` is a parameter which can be used as `add-c n/John Doe`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Items in square brackets are optional"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** e.g. `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Items with `…` after them can be used multiple times including zero times"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "** e.g. `[t/TAG]…` can be used as (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Parameters can be in any order"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "** e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d View help: `help`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Entering `help` into FitBiz will bring you right here! 😬"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dban1"
        },
        "content": "// tag::list-c[]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d List all clients: `list-c` ---Ng Ming Liang"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Dban1"
        },
        "content": "You can list all clients on the *Client List*. This is useful when your *Client List* has been filtered by the `filter-c` command, and you want to view all clients again. When using `list-c`, there will be no difference to the *Client List* if it is already showing all clients."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*Format*: `list-c`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d Parameters"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Dban1"
        },
        "content": "The command is simply `list-c`, and has no additional parameters."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Let\u0027s say you start off with the full *Client List* as shown below."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGListCDiagram0.png[]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Now, let\u0027s say you use the command `filter-c` to filter the clients with the `Paleo` tag as such:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGListCDiagram2.png[]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Your *Client List* will now display only the clients that have the `Paleo` tag. In this example, the only client that fit this requirement is `Alex Yeoh`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGListCDiagram3.png[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Let\u0027s say you are done with the filter, and want to list all your clients on the *Client List* again. Simply enter `list-c`into the *Command Box* and you should be able to see the following:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGListCDiagram4.png[]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d\u003d Common errors / problems"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Dban1"
        },
        "content": "*No clients shown on the Client List*"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Dban1"
        },
        "content": "You may be greeted with the following scene. This means that there are no clients in your FitBiz. You can begin adding clients by using the `add-c` command. Do refer to the `add-c` section in this document for help regarding `add-c`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGListCDiagram5.png[]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Dban1"
        },
        "content": "// end::list-c[]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "// tag::find-c[]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d Find clients by name: `find-c` --- Yong Jie"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "`find-c` allows you to find clients with the names that are specified in your input. You might have many clients and finding a particular client by scrolling through the entire *Client List* might be troublesome and difficult. `find-c` is the command for you."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*Format*: `find-c KEYWORD [KEYWORD]...`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d Parameters"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "This section acts as a summary of the important things to note when using `find-c` including their parameters."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "[cols\u003d\"15%,85%\"]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Parameters | Important points to note"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| `KEYWORD` |"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* At least one `KEYWORD` must be entered."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Substitute `KEYWORD` with the names you want to search with +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* You can use multiple `KEYWORD`. +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "e.g. You can enter `find-c bryan low`."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* `KEYWORD` are case insensitive. +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "e.g. Typing `find-c hans` will show clients even with the name `Hans`. +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "For a better understanding, you can refer to the example section ."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* The words used for `KEYWORD` have to match at least one word in the name of the clients. +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "e.g. Typing `find-c Bry` will not show clients with the name `Bryan`. +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "For a detailed explanation, you can refer to the commons errors / problems section."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Clients matching at least one `KEYWORD` will be returned and does not require all the words in their name to match. +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "e.g. Typing `find-c Hans Bo` will show clients `Hans Gruber` and `Bo Yang` and not necessarily just client `Hans Bo`. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "For a detailed explanation, you can refer to the commons errors / problems section."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Let\u0027s say that you want to find a client named \"Bryan Low\" in *Client List*. You can simply use the `find-c` command as shown."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". Type `find-c bryan` into *Command Box*, and press `Enter` to execute it."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "+"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-findcExamplePart1.png[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". *Result Box* will display the message of the number of clients listed. In this case, there are 2 clients with \"bryan\" in their name."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "+"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-findcExamplePart2.png[]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". You can now see the clients with \"bryan\" in their names. As you can see, the name you use to search does not need to be case-senstive. The client that we are looking for \"Bryan Low\" is in *Client List*."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "+"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-findcExamplePart3.png[]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d Common errors / problems"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "You might face some errors or difficulties when you `find-c`. In this section, you will be able to understand these errors and resolve them. You will also get a better understanding of the reply from the result box when using `find-c`."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Using incomplete KEYWORD"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "You might wonder why `find-c` do not show the clients even though the client is clearly in your client list records. It might be possible that you have entered an incomplete name and does not match any word in the name of that client. The example below might help you understand better."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "You want to find the client named \"Bryan Low\" in *Client List*. Below shows that \"Bryan Low\" indeed exists and is recorded."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-findcIncompleteNamePart1.png[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Type `find-c bry` into *Command Box*, and press `Enter` to execute it."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-findcIncompleteNamePart2.png[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "You will obtain \"0 clients listed!\" in *Result Box*."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-findcIncompleteNamePart3.png[]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "This is because the name that you have entered is incomplete and does not match any word in the name of any of the clients. To correct this, you have to enter `find-c bryan` as seen in the example."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Using multiple KEYWORD"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "You might wonder why the application shows more clients than you intended. It might be possible that you have misunderstood how the `KEYWORD` parameter gets the client you are finding. The application will show clients as long as one of the words of the client match a keyword you use for name. The example below might help you understand better."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "You want to find the client named \"Bryan Low\" in *Client List*."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Type `find-c bryan low` in to *Command Box*, and press `Enter` to execute it."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-findcMultiplePart1.png[]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "You will obtain clients which have `bryan` in their name or `low` in the name. In the case below, there are 3 clients. `Bryan Low`, `Bryan Tan` and `Alice Low`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-findcMultiplePart2.png[]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "You can try to enter keywords for `NAME` that are more specific to the client you are looking for. This will help to keep your search more scoped."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "// end::find-c[]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "// tag::add-c-command[]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d Add a new client profile: `add-c` --- Toh Ker Wei"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "After setting up the program, the first thing you might want to do is to add your client to FitBiz. You can do so by using the `add-c` command, followed by the details of your client."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*Format*: `add-c n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [g/GENDER] [b/BIRTHDAY] [h/HEIGHT] [cw/CURRENT_WEIGHT] [tw/TARGET_WEIGHT] [r/REMARK] [s/SPORT]… [t/TAG]…`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d Parameters"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "This section summarises the format and important information to note while using the `add-c` command."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "[cols\u003d\"15%,85%\"]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "| Parameters | Important points to note"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `n/NAME` + |"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Substitute `NAME` with the name of the client."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `NAME` should only contain alphanumeric characters, spaces and commas, and it should not be blank."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `NAME` is compulsory."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `p/PHONE` + |"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Substitute `PHONE` with the phone number of the client. +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `PHONE` should only contain numbers. +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `PHONE` should be at least 3 digits long."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `PHONE` is compulsory."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `e/EMAIL` + |"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Substitute `EMAIL` with the email of the client. +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `EMAIL` should be of the format `xxx@yyy`, where: +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `xxx` should only contain alphanumeric characters and the set of special characters* shown below this table"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `yyy` must be at least 2 characters long, start and end with alphanumeric characters, and consist of alphanumeric characters, a period or a hyphen for the characters in between, if any."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `EMAIL` is compulsory."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `a/ADDRESS` + |"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Substitute `ADDRESS` as the address of the client."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `ADDRESS` can take any value, but it should not be blank, or start with a whitespace."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `ADDRESS` is compulsory."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[g/GENDER]` + |"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Substitue `GENDER` with the gender of the client."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `GENDER` is case insensitive"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `GENDER` can only be `male` or `m`, `female` or `f`, or `others` or `o`."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `GENDER` is optional."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[b/BIRTHDAY]` + |"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Substitue `BIRTHDAY` with the birthday of the client."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `BIRTHDAY` should be in the format DD-MM-YYYY"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `BIRTHDAY` cannot exceed the current date."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `BIRTHDAY` cannot be earlier than 120 years from the current year."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `BIRTHDAY` is optional."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[cw/CURRENT_WEIGHT]` + |"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Substitute `CURRENT_WEIGHT` with the current weight of the client."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `CURRENT_WEIGHT` must take the value of a whole or decimal number(eg. 65 or 86.22)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `CURRENT_WEIGHT` can only have a maximum of 3 digits before the decimal place and a maximum of 2 digits after the decimal place (eg. 101.25 or 120.20)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `CURRENT_WEIGHT` is optional."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[tw/TARGET_WEIGHT]` + |"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Substitute `TARGET_WEIGHT` with the target weight for the client."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `TARGET_WEIGHT` must take the value of a whole or decimal number(eg. 65 or 86.22)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `TARGET_WEIGHT` can only have a maximum of 3 digits before the decimal place and a maximum of 2 digits after the decimal place (eg. 101.25 or 120.20)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `TARGET_WEIGHT` is optional."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[h/HEIGHT]` + |"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Substitue `HEIGHT` with the height of the client."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `HEIGHT` must either be a whole or decimal number."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `HEIGHT` can only have a maximum of 3 digits before the decimal place and a maximum of 2 digits after the decimal place (eg. 101.25 or 120.20)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `HEIGHT` is optional."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[s/SPORT]` + |"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Substitute `SPORT` with the sports of the client."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `SPORT` should only contain alphanumeric characters and spaces."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Sports given in this command will overwrite all of the client\u0027s existing sports."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `SPORT` is optional."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[t/TAG]` + |"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Substitue `TAG` with a tag for the client."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `TAG` should only contain alphanumeric characters."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Tags given in the command will overwrite the Client\u0027s existing tags"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* You can remove all of the client\u0027s tags by typing `t/` without specifying any `TAG`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `TAG` is optional."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[r/REMARK]` + |"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Substitute `REMARK` with remarks for the client."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `REMARK` should be alphanumeric."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Any whitespace at the start of `REMARK` will be removed."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `REMARK` is optional."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\\*The set of special characters are `!#$%\u0026\u0027*+/\u003d?`{|}~^.-`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Lets say you want to add a new client with the following details: +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Name: Amanda Low +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Phone number: 95436543 +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Email: AmandaLow@dmail.com +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Address: West Coast Grove 69 +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Birthday: 5 April 1990 +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Sport: Swimmer +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Tag: Vegetarian"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ". Type the command below into the command box."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "* `add-c n/Amanda Low p/95436543 e/AmandaLow@dmail.com a/West Coast Grove 69 s/Swimmer t/Vegetarian`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::AddExampleCommand.png[]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ". Press enter to execute."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ". After Amanda has been successfully added to the clients list, the result will be displayed as shown."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::AddExampleSuccess.png[]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d\u003d Common errors/ problems:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "If you are facing errors or difficulty adding a client, you can refer to the common errors and problems listed below and resolve your error using the solution given."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ". *Compulsory fields missing*"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "If you are adding a client and miss out any of the compulsory parameters. You will not be able to add the client."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "For example, when you want to add a `Rachel Tan` into FitBiz but did not include the compulsory field `a/ADDRESS`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::AddNoAddress.png[]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "After pressing enter, the following error message will be shown."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::AddNoAddressError.png[]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "To solve this error, ensure that all compulsory parameters are included when adding a client. The compulsory parameters include: `n/NAME`, `p/PHONE`, `e/EMAIl` and `a/ADDRESS`. To continue with the same example, the command will now include Rachel\u0027s address."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::AddWithAddressCommand.png[]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "The result of successfully adding Rachel will show the following"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::AddAddressSuccess.png[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ". *Adding clients with the same phone number or email*"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "In FitBiz, you cannot add 2 clients with the either same phone number or email."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "For example, you have client with the email `RachelTan@dmail.com` and you want to add another client with the same email."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::AddSameEmailCommand.png[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "The following error message will be shown."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::AddSameEmailError.png[]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "To solve this issue, ensure that any new client you add does not have the same phone number or email as existing client."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "// end::add-c-command[]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Dban1"
        },
        "content": "// tag::edit-c[]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d Edit a client’s profile: `edit-c` ---Ng Ming Liang"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Dban1"
        },
        "content": "`edit-c` allows you to edit an existing client\u0027s details from the *Client List*. There are various attributes that can be edited for the client using this command, which will be covered in this section."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*Format*: `edit-c INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [g/GENDER] [b/BIRTHDAY] [cw/CURRENT_WEIGHT] [tw/TARGET_WEIGHT] [h/HEIGHT] [s/SPORT]... [t/TAG]... [r/REMARK]`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d\u003d Parameters"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Dban1"
        },
        "content": "This section acts as a summary of the important things to note when using `edit-c` and its parameters. The square bracket shows that it is optional and your command will still execute even if you do not enter them. However, at least one of them have to be specified. The ellipsis after a parameter `...` means that there can be multiple of that same type of parameter."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Dban1"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Dban1"
        },
        "content": "[cols\u003d\"15%,85%\"]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Dban1"
        },
        "content": "| Parameters | Important points to note"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `INDEX` + |"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitute `INDEX` with the index of the desired client to edit. +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `INDEX` is compulsory and you have to specify it. +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `INDEX` must be a positive number, and must be a valid index number for a client as displayed from the list of clients. +"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[n/NAME]` + |"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitute `NAME` with the name of the client."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `NAME` should only contain alphanumeric characters, spaces and commas, and it should not be blank."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `NAME` is optional."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[p/PHONE]` + |"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitute `PHONE` with the phone number of the client. +"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `PHONE` should only contain numbers. +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `PHONE` should be at least 3 digits long."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `PHONE` is optional."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[e/EMAIL]` + |"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitute `EMAIL` with the email of the client. +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `EMAIL` should be of the format `xxx@yyy`, where: +"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `xxx` should only contain alphanumeric characters and the set of special characters* shown below this table"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `yyy` must be at least 2 characters long, start and end with alphanumeric characters, and consist of alphanumeric characters, a period or a hyphen for the characters in between, if any."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `EMAIL` is optional."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[a/ADDRESS]` + |"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitute `ADDRESS` as the address of the client."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `ADDRESS` can take any value, but it should not be blank, or start with a whitespace."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `ADDRESS` is optional."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[g/GENDER]` + |"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitue `GENDER` with the gender of the client."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `GENDER` is case insensitive"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `GENDER` can only be `male` or `m`, `female` or `f`, or `others` or `o`."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `GENDER` is optional."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[b/BIRTHDAY]` + |"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitue `BIRTHDAY` with the birthday of the client."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `BIRTHDAY` should be in the format DD-MM-YYYY"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `BIRTHDAY` cannot exceed the current date."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `BIRTHDAY` cannot be earlier than 120 years from the current year."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `BIRTHDAY` is optional."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[cw/CURRENT_WEIGHT]` + |"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitute `CURRENT_WEIGHT` with the current weight of the client."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `CURRENT_WEIGHT` must take the value of a whole or decimal number(eg. 65 or 86.22)"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `CURRENT_WEIGHT` can only have a maximum of 3 digits before the decimal place and a maximum of 2 digits after the decimal place (eg. 101.25 or 120.20)"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `CURRENT_WEIGHT` is optional."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[tw/TARGET_WEIGHT]` + |"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitute `TARGET_WEIGHT` with the target weight for the client."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `TARGET_WEIGHT` must take the value of a whole or decimal number(eg. 65 or 86.22)"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `TARGET_WEIGHT` can only have a maximum of 3 digits before the decimal place and a maximum of 2 digits after the decimal place (eg. 101.25 or 120.20)"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `TARGET_WEIGHT` is optional."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[h/HEIGHT]` + |"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitue `HEIGHT` with the height of the client."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `HEIGHT` must either be a whole or decimal number."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `HEIGHT` can only have a maximum of 3 digits before the decimal place and a maximum of 2 digits after the decimal place (eg. 101.25 or 120.20)"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `HEIGHT` is optional."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[s/SPORT]` + |"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitute `SPORT` with the sports of the client."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `SPORT` should only contain alphanumeric characters and spaces."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Sports given in this command will overwrite all of the client\u0027s existing sports."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `SPORT` is optional."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[t/TAG]` + |"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitue `TAG` with a tag for the client."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `TAG` should only contain alphanumeric characters."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Tags given in the command will overwrite the Client\u0027s existing tags"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* You can remove all of the client\u0027s tags by typing `t/` without specifying any `TAG`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `TAG` is optional."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[r/REMARK]` + |"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitute `REMARK` with remarks for the client."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `REMARK` should be alphanumeric."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Any whitespace at the start of `REMARK` will be removed."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `REMARK` is optional."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\\*The set of special characters are `!#$%\u0026\u0027*+/\u003d?`{|}~^.-`"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Dban1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Dban1"
        },
        "content": " At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Let\u0027s say you want to edit the address and assign 3 sports (Tennis, Hockey, Badminton) to client `Irfan Ibrahim`. From the `Client List`, you can see that his client `INDEX` is 3."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGEditCDiagram1.png[]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Next, you can enter the command `edit-c 3 a/New Address #123456 s/Tennis s/Hockey s/Badminton` in the *Command Box*."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGEditCDiagram2.png[]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Enter the command, and you should see that the *Result Box* displays the edited client\u0027s information, and that the *Client List* has updated `Irfan Ibrahim` to show the new changes."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGEditCDiagram3.png[]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d\u003d Common Errors/Problems"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Dban1"
        },
        "content": "You might face some errors or difficulties when you use edit-e. In this section, you will be able to understand these errors and resolve them."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Dban1"
        },
        "content": "*Result box not displaying updated client\u0027s information*"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Dban1"
        },
        "content": "When you use `edit-c`, instead of seeing the updated client\u0027s information in the *Result Box*, you might sometimes encounter an error message informing you about the specifications for the format of the command. This error message varies according to the mistake detected in the parameters given. For simplicity, let\u0027s look at one example scenario."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Let\u0027s say you attempt to edit the email of `Irfan Ibrahim` and happen to give an incorrect format of the email that does not follow the rules given in the parameters table above for `EMAIL`. Consider the following command: `edit-c 3 e/invalidEmail`."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGEditCDiagram4.png[]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Dban1"
        },
        "content": "As seen above, the `EMAIL` is of the wrong format as it does not include the `@` symbol and not of the `xxx@yyy` format."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Dban1"
        },
        "content": "In the example above, the `EMAIL` field was faulty. This behaviour of FitBiz also applies to other faulty parameters for the `edit-c` command, where FitBiz will display information relevant to the faulty parameter, to help you troubleshoot and correct your input."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Dban1"
        },
        "content": "// end::edit-c[]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "// tag::delete-c-command[]"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d Delete a client: `delete-c` --- Li Zi Ying"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "You find that your client list contains a client who is no longer working with you and you would like to remove his details from your client list. `delete-c` allows you to delete the client at the specified index from your list of clients."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*Format*: `delete-c INDEX`"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d Parameters"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "This section acts as a summary of the important things to note when using `delete-c` including their parameters."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[cols\u003d\"15%,85%\"]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| Parameters | Important points to note"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `INDEX` + |"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "`INDEX` refers to the index number shown in the displayed client list +"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "`INDEX` must be a positive integer (ie. 1, 2, 3, ...) +"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d Examples"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Let’s say that you want to delete the client named \"Alex Yeoh\" in client list. You can simply use the `delete-c` command as shown."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". Type `delete-c 1` into the Command Box and press `Enter` to execute it."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-delete-1.png[]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". Result Box will display the message of the details of the deleted client. You can now see that the Client List no longer contains the deleted client."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-delete-2.png[]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d Common errors/problems"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "You might face some errors or difficulties when you use `delete-c`. In this section, you will be able to understand these errors and resolve them."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d No index specified"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "If you type in `delete-c` without specifying the `INDEX`, no client will be deleted and an error message will be shown."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-delete-3.png[]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "This happens because there is no `INDEX` specified. To correct this, you have to enter a valid `INDEX` after `delete-c`."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Index out of range"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "If you key in an `INDEX` that is out of range, that is if there are only 4 clients in the list but you try to key in `delete-c 5`, no client will be deleted and an error message will be shown."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-delete-4.png[]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "To correct this, you have to enter a valid `INDEX` that is not more than the number of clients in the client list."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "// end::delete-c-command[]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "// tag::view-c-command[]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d View a client profile: `view-c` --- Li Zi Ying"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "You might want to view the complete information of a certain client in your client list. This complete information includes the client\u0027s full details, their exercise table and personal best table. `view-c INDEX` shows all available information of the client at the specified index."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*Format*: `view-c INDEX`"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d Parameters"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "This section acts as a summary of the important things to note when using `view-c` including their parameters."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[cols\u003d\"15%,85%\"]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| Parameters | Important points to note"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `INDEX` + |"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "`INDEX` refers to the index number shown in the displayed client list +"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "`INDEX` must be a positive integer (ie. 1, 2, 3, ...) +"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d Examples"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Let’s say that you want to view the details of the client named \"Alex Yeoh\" in client list. You can simply use the `view-c` command as shown."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". Type `view-c 1` into the Command Box and press `Enter` to execute it."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-view-1.png[]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". Result Box will display the message telling you the client currently in view. You can now see that the Client View is now populated with the client\u0027s details, the exercise table and the personal best table."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-view-2.png[]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d Common errors/problems"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "You might face some errors or difficulties when you use `view-c`. In this section, you will be able to understand these errors and resolve them."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d No index specified"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "If you type in `view-c` without specifying the `INDEX`, no client will be viewed and an error message will be shown."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-view-3.png[]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "This happens because there is no `INDEX` specified. To correct this, you have to enter a valid `INDEX` after `view-c`."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Index out of range"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "If you key in an `INDEX` that is out of range, that is if there are only 5 clients in the list but you try to key in `view-c 10`, no client will be viewed and an error message will be shown."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-view-4.png[]"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "To correct this, you have to enter a valid `INDEX` that is not more than the number of clients in the client list."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "// end::view-c-command[]"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "// tag::add-e[]"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d Add a client\u0027s exercise: `add-e`  --- YongJie"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "`add-e` allows you to record an exercise done by the client that you are currently viewing. You will be able to see the exercises recorded and their information in the *Exercise Table*."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*Format*: `add-e n/EXERCISE_NAME d/DATE [ew/EXERCISE_WEIGHT] [reps/REPS] [sets/SETS]`"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d Parameters"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "This section acts as a summary of the important things to note when using `add-e` including their parameters. The square bracket shows that it is optional and your command will still execute even if you do not enter them."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "[cols\u003d\"15%,85%\"]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Parameters | Important points to note"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `n/NAME` + |"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Substitute `NAME` with the name of the exercise. +"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* `n/NAME` is compulsory and you have to specify it. +"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* `n/NAME` is case sensitive. +"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "e.g. An exercise named `pushup` will be considered to have a different name as an exercise named `Pushup`."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `d/DATE` + |"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Substitute `DATE` with the date of the exercise. +"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* `d/DATE` is compulsory and you have to specify it. +"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* `DATE` must be of the form `DD-MM-YYYY` (ie. 02-07-2020 for 2nd July 2020)"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* The range of `DATE` is from one year before the current date to the current date (inclusive)."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[reps/REPS]` + |"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Substitute `REPS` with the reps of the exercise. +"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* `reps/REPS` is optional."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Range for `REPS` is 1-9999. +"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[sets/SETS]` + |"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Substitute `SETS` with the sets of the exercise. +"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* `sets/SETS` is optional."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Range for `SETS` is 1-9999. +"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[ew/WEIGHT]` + |"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Substitute `Weight` with the weight of the exercise. +"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* `ew/WEIGHT` is optional."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Range for `WEIGHT` is 1-9999. +"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Let\u0027s say that you want to add an exercise with the following details: +"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "[width\u003d\"50%\"]"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Name: Bench Press +"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Date: 12-02-2020 +"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Reps: 4 +"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Weight: 100 +"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Sets: 4 +"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "You can use the `add-e` command to add the exercise as shown."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". View the client that you want to add the exercise to. For information on how to view the client, you can refer to the `view-c` section. For this example, we will add the exercise to the first client in the list, `Alex Yeoh`. After you entered `view-c 1`, you will see `Alex Yeoh` detailed information and a table of his recorded exercises."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-addeExamplePart1.png[]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". Now type the information of the exercise, matching each detail of the exercise to the parameter. In this case, you will have to type `add-e n/Bench press d/12-02-2020 reps/4 ew/100 sets/4` into *Command Box*. Press enter to execute it. To recap,"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "[width\u003d\"50%\"]"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "The name of the exercise after `n/` +"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "The date of the exercise after `d/` +"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "The reps of the exercise after `reps/` +"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "The weight of the exercise after `ew/` +"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "The sets of the exercise after `sets/` +"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-addeExamplePart2.png[]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". After it has been successfully entered, *Result Box* will display the recorded exercise. You will also be able to see the recorded exercise in the *Exercise Table*."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-addeExamplePart3.png[]"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d Common errors / problems"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "You might face some errors or difficulties when you use `add-e`. In this section, you will be able to understand these errors and resolve them."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Duplicate exercises"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "You might wonder why the application shows you a duplicate exercise error when the details of the exercises you entered are different. It is likely that only the sets differ between the two exercises. The example below might help you understand better."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "You might have the following exercise in *Exercise Table*."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-addeDuplicatePart1.png[]"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "If you were to enter `add-e n/Bench Press d/12-02-2020 reps/4 ew/100 sets/2` into *Command Box*, the only information that is different is the number of sets."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-addeDuplicatePart2.png[]"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*Result Box* will show that you have a duplicate exercise."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-addeDuplicatePart3.png[]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "To solve this, we suggest incrementing the sets of the existing exercise by using the `edit-e` command. This will help to keep your exercises consolidated and the table compact. For information on using `edit-e`, you may want to refer to the next section `Edit a client\u0027s exercise: edit-e`."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "// end::add-e[]"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "// tag::edit-e[]"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d Edit a client\u0027s exercise: `edit-e` --- YongJie"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "`edits-e` allows edit an existing exercise done by the client that you are currently viewing. You will be able to see the updated exercise in *Exercise Table*."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*Format*: `edit-e INDEX [n/EXERCISE_NAME] [d/DATE] [ew/EXERCISE_WEIGHT] [reps/REPS] [sets/SETS]`"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d Parameters"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "This section acts as a summary of the important things to note when using `edit-e` including their parameters. The square bracket shows that it is optional and your command will still execute even if you do not enter them. However, at least one of them have to be specified."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "[cols\u003d\"15%,85%\"]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "| Parameters | Important points to note"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `INDEX` + |"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Substitute `INDEX` with the index of the exercise shown on the table. +"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* `INDEX` is compulsory and you have to specify it. +"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[n/NAME]` + |"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Substitute `NAME` with the name of the exercise. +"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* `n/NAME` is optional. +"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* `n/NAME` is case sensitive. +"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "e.g. An exercise named `pushup` will be considered to have a different name as an exercise named `Pushup`."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|`[d/DATE]` + |"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Substitute `DATE` with the date of the exercise. +"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* `d/DATE` is optional. +"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* `DATE` must be of the form `DD-MM-YYYY` (ie. 02-07-2020 for 2nd July 2020) +"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* The range of `DATE` is from one year before the current date to the current date (inclusive)."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[reps/REPS]` + |"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Substitute `REPS` with the reps of the exercise. +"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* `reps/REPS` is optional."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Range for `REPS` is 1-9999. +"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[sets/SETS]` + |"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Substitute `SETS` with the sets of the exercise. +"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* `sets/SETS` is optional."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Range for `SETS` is 1-9999. +"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[ew/WEIGHT]` + |"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Substitute `Weight` with the weight of the exercise. +"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* `ew/WEIGHT` is optional."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* Range for `WEIGHT` is 1-9999. +"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Let\u0027s say that you want to edit an exercise done by the client you are currently viewing. The exercise that you want to edit is the one highlighted in the photo below."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-editeExamplePart1.png[]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "The exercise, \"Bench Press\", currently is 4 reps and weight of 100. However, they might be entered wrongly and you want to change the values. You can use the `edit-e` command to edit the exercise as shown."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". Identify the index of the exercise in *Exercise Table*. From the photo above, the index is 2. Type `edit-e 2 reps/8 ew/50` into *Command Box*. Press enter to execute it. To recap,"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "[width\u003d\"50%\"]"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "The reps of the exercise after `reps/` +"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "The weight of the exercise after `ew/` +"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-editeExamplePart2.png[]"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ". After it has been successfully entered, *Result Box* will display a success message that the exercise has been edited. You will also be able to see the edited exercise in *Exercise Table*."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "+"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-editeExamplePart3.png[]"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d Common errors / problems"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "You might face some errors or difficulties when you use `edit-e`. In this section, you will be able to understand these errors and resolve them."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Duplicate exercises"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "You might wonder why the application shows you a duplicate exercise error when you do not have a duplicate of the edited exercise. It is likely that only the sets differ between the two exercises. The example below might help you understand better."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "You might have the following exercise in *Exercise Table*."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-editeDuplicatePart1.png[]"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "If you were to enter `edit-e 2 n/Bench Press d/12-02-2020 reps/4 ew/100 sets/2` into *Command Box*, the only information that is different is the number of sets."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-editeDuplicatePart2.png[]"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*Result Box* will show that you have a duplicate exercise."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "image::ug-editeDuplicatePart3.png[]"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "To solve this, we suggest you delete the exercise you want to edit and increment the sets of the existing exercise by using the `edit-e` command. This will help to keep your exercises consolidated and the table compact."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "// end::edit-e[]"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "// tag::delete-e-command[]"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d Delete a client\u0027s exercise: `delete-e` --- Aaron Choo"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "`delete-e` allows you to delete a previously recorded exercise of the client currently in view."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*Format*: `delete-e INDEX`"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "This command can only be used when you have a client in view; make sure you know how to view a client first. Refer to \u003c\u003cview-c-command\u003e\u003e for more information."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Deleting an exercise from FitBiz is permanent and *cannot be undone*."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d Parameters"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[cols\u003d\"15%,85%\"]"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "| Parameters | Important points to note"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `INDEX` + | Substitute `INDEX` with the actual index of the exercise shown on the *Exercise Table*"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Must be a positive integer (eg. 1, 2, 3, ...)"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". First, ensure that you are currently viewing a client by using the `view-c` command:"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::delete-e-1.png[]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Say for example that you want to delete the fifth exercise found on the **Exercise Table** (the one named \"Bench Press\" done on \"07-04-2020\"), simply enter `delete-e 5`:"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::delete-e-2.png[]"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". After the command has been successfully executed, the specified exercise should have been deleted. Notice also, in the *Personal Best Table* that the personal best for \"Bench Press\" has also been automatically updated to reflect this change:"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::delete-e-3.png[]"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d Common errors/problems"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "If you find that you are unable to execute this command successfully, there are a few things you can check:"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Ensure that you are currently viewing a client using the `view-c` command. If you are indeed viewing a client, the *Client View* should not be empty."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Ensure that you actually have exercises to delete and that the `INDEX` specified is correct. If the client does indeed have recorded exercises, the *Exercise Table* should not be empty."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "// end::delete-e-command[]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "Dban1"
        },
        "content": "// tag::schedule[]"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d Schedule trainings for a client: `schedule` ---Ng Ming Liang"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "Dban1"
        },
        "content": "`Schedule` allows you to assign weekly schedule timings to a client. The schedule will be displayed on the right panel of FitBiz, with the timings as well as the client\u0027s name. You can assign multiple schedules to a client at once, by adding more arguments following the command. All of the schedules from the current *Client List* will be displayed on the *Schedule Panel*."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*Format*: `schedule INDEX sch/DAY-STARTTIME-ENDTIME [sch/DAY-STARTTIME-ENDTIME]...`"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "Dban1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "Dban1"
        },
        "content": "The `schedule` command overwrites the client\u0027s existing schedule with the new schedules given in the command."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d\u003d Parameters"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "Dban1"
        },
        "content": "This section acts as a summary of the important things to note when using `schedule`. The square bracket shows that it is optional and your command will still execute even if you do not enter them."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "Dban1"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Dban1"
        },
        "content": "[cols\u003d\"15%,85%\"]"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "Dban1"
        },
        "content": "| Parameters | Important points to note"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `INDEX` + |"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitute `INDEX` with the index of the desired client to add the schedule to. +"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `INDEX` is compulsory and you have to specify it. +"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `INDEX` must be a positive number, and must be a valid index number for a client as displayed from the list of clients. +"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `DAY` + |"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitute `DAY` with the first three letters of the day. +"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Dban1"
        },
        "content": "eg. MON / TUE / WED / THU / FRI / SAT / SUN"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `DAY` is compulsory and you have to specify it. +"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `DAY` can only be one of the above seven values. +"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `DAY` is not case sensitive."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `STARTTIME` + |"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitute `STARTTIME` with the starting time of the schedule slot. +"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `STARTTIME` is compulsory."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Range for `STARTTIME` is 0000-2359. +"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `STARTTIME` must always be earlier than or equal to `ENDTIME`."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `ENDTIME` + |"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Substitute `ENDTIME` with the ending time of the schedule slot. +"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `ENDTIME` is compulsory."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Range for `ENDTIME` is 0000-2359. +"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* `ENDTIME` must always be equal to or later than `STARTTIME`."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Let\u0027s say you want to schedule a weekly Monday 11:00am to 12:00pm slot for your client Alex Yeoh. Alex Yeoh is the first client on your *Client List*."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGScheduleDiagram1.png[]"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "Dban1"
        },
        "content": "You can see that Alex Yeoh\u0027s client index is `1`. Therefore, you can proceed to type the `schedule` command in the *Command Box* to assign a schedule slot to him."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGScheduleDiagram2.png[]"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "Dban1"
        },
        "content": "After you enter the command, you can see that the *Result Box* has notified you of the new overwritten schedule, and that Alex Yeoh\u0027s schedule slot has appeared on the *Schedule Panel* on Monday."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGScheduleDiagram3.png[]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Now let\u0027s say you want to add multiple schedules to Bernice Yu: Monday 8:00am to 10:00pm and Tuesday 4:00pm to 6:00pm. You can do that by adding both of these timings into the `schedule` command following the same format as above."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGScheduleDiagram4.png[]"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Now enter the command, and you\u0027ll see that Bernice\u0027s schedules also show up on the *Schedule Panel*."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGScheduleDiagram5.png[]"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Finally, let\u0027s say Alex no longer has any schedule slots, and you want to clear it. Simply type in `schedule 1 sch/` in the *Command Box* to clear his schedule, and you should see this."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGScheduleDiagram6.png[]"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d\u003d Common Errors/Problems"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "Dban1"
        },
        "content": "You might face some errors or difficulties when you use `schedule`. In this section, you will be able to understand these errors and resolve them."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "Dban1"
        },
        "content": "*Overlapping schedules*"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "Dban1"
        },
        "content": "You might encounter the message that \"One or more of your input schedules have overlapping time periods. Please check again.\" This means that there is a overlapping time period between at least two of your input schedules. In this case as shown below, the first schedule `sch/MON-1100-1200` conflicts with the second schedule `sch/MON-1200-1300` because the end time of the first schedule overlaps with the start time of the second schedule."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGScheduleDiagram7.png[]"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "Dban1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Overlapping schedules are not allowed between schedules within the same client. However, *different clients* can have overlapping schedules with each other as it is a possible scenario that you as a gym coach can coach multiple clients at once, and that additional clients can join/leave the session as other sessions are ongoing."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "Dban1"
        },
        "content": "*Invalid command format*"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "Dban1"
        },
        "content": "You might encounter the error message from the *Result Box* specifying the format that you should be using for the `schedule` command. This means that there are one or more errors in the format of your input for the `schedule` command. In the example input shown below, `schedule 2 sch/TUESDAY-800-1:00`, there are multiple errors. First, the `DAY` should be three letters. Next, the `STARTTIME` and `ENDTIME` should follow the HHmm format. The correct input for this should be `schedule 2 sch/TUE-0800-1300`."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "Dban1"
        },
        "content": "image::UGScheduleDiagram8.png[]"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "Dban1"
        },
        "content": "// end::schedule[]"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "// tag::export-command[]"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[[export-command]]"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d Export a client\u0027s exercises to CSV format: `export` --- Aaron Choo"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "`export` allows you to export your client\u0027s recorded exercises into a spreadsheet format which you can then easily save or share with your clients. Note that this will create a CSV file, which you can view and open in other applications like Microsoft Excel, or Google Sheets (as shown in the example later)."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*format*: `export`"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "This command can only be used when you have a client in view; make sure you know how to view a client first. Refer to \u003c\u003cview-c-command\u003e\u003e for more information."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d Quick summary"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Only the exercises of the current client in view will be exported"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* Exported files will be saved in the `/exports` directory"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* The name of the exported file will be the client\u0027s name followed by the `.csv` file extension (eg. `Alex Yeoh.csv`)"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". First, ensure that you are currently viewing a client by using the `view-c` command:"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "+"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::export-1.png[]"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Now, if the client you are viewing currently has recorded exercises in the *Exercise Table*, simply execute the `export` command"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". The exercises should have been successfully exported, if the following success message is shown:"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "+"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::export-2.png[]"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Now, simply use your favourite file explorer to locate the `exports` folder, which should be created in the same directory as `FitBiz.jar`. In the `exports` folder, you will then find your exported CSV file:"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "+"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::export-3.png[]"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". If you have a spreadsheet software (like Microsoft Excel) installed on your computer, you can easily view the CSV file by launching it. In our example, we have https://support.google.com/docs/answer/40608?co\u003dGENIE.Platform%3DDesktop\u0026hl\u003den[imported it into Google Sheets] instead:"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "+"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "image::export-4.png[]"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d\u003d Common errors/problems"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "If you find that you are unable to execute this command successfully, there are a few things you can check:"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Ensure that you are currently viewing a client using the `view-c` command. If you are indeed viewing a client, the *Client View* should not be empty."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ". Ensure that you actually do have exercises recorded for the client currently in view using the `add-e` command. If the client does indeed have recorded exercises, the *Exercise Table* should not be empty."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "// end::export-command[]"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "// tag::filter-c-command[]"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "[[]]"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d Filter clients based on attribute: `filter-c` --- Toh Ker Wei"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "When you have many clients and want to filter the list of clients to view a specific group, you can use the command `filter-c` to filter clients based on their tags or their sports."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*Format*: `filter-c [t/TAG]... [s/SPORT]...`"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d\u003d Parameters"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "[cols\u003d \"15%,85%\"]"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "|Parameter | Important notes"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `[t/TAG]` + | `TAG` is the tag of the clients you want to match and list. +"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "`TAG` is case-insensitive. +"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "e.g. `healthy` will match `Healthy`"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "`TAG` should only contain letters or numbers. +"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "e.g. `monday` or `obese200kg`"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|`[s/SPORT]` + | `SPORT` is the sport of the clients you want to match and list. +"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "`SPORT` is case-insensitive. +"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "e.g.  `track and field` returns the same result as `Track And Field`"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "`SPORT` should only contain letters, numbers or spaces."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "e.g. `sumo wrestling` or `100m sprint`"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Order of words in `SPORT` does not matter"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "e.g. `track and field` returns the same result as `field and track`"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "Let\u0027s say you want to filter through your list of clients and only display those with the tag `healthy` and play the sport `badminton`."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ". Type the command `filter-c t/healthy s/badminton` into the command box."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::FilterExampleCommand.png[]"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ". Press enter to execute."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "+"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ". The clients with the matching tag and sport will be displayed as shown."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::FilterExampleSuccess.png[]"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d\u003d\u003d Common error/ problem"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "*Tags with spaces*"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "When you want to filter the clients list with multiple tags like `healthy` and `sporty`, you might enter the command shown below."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::FilterTagCommand.png[]"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "You will then encounter the error `Tags names should be alphanumeric`."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::FilterTagError.png[]"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "This error occurs because `TAG` only accepts letters and numbers but not spaces. To solve the problem, add an additional delimiter for each tag you want to specify. Note that sports does not require multiple delimiter."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::FilterTagCorrectCommand.png[]"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "The list of successfully filter clients will then be displayed."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "image::FilterTagSuccess.png[]"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "// end::filter-c-command[]"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "// tag::graph-command[]"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d Display visualisations of training progress: `graph` --- Li Zi Ying"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "`graph` allows you to see a graphical visualisation of a client’s exercise progress within a specified timeframe, so that you can easily track your client\u0027s progress and improvement."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*Format*: `n/EXERCISE_NAME a/Y_AXIS sd/START_DATE ed/END_DATE`"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d Parameters"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "This section acts as a summary of important things to note when using `graph` including their parameters."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[options\u003d\u0027header\u0027]"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "[cols\u003d\"15%,85%\"]"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| Parameters | Important points to note"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `n/EXERCISE_NAME` + |"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Substitute `EXERCISE_NAME` with the name of the exercise. +"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "`n/EXERCISE_NAME` is compulsory and you have to specify it. +"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "`n/EXERCISE_NAME` is case sensitive. +"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "e.g. An exercise `pushup` will be considered to be different from the exercise `Pushup`."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `a/Y_AXIS` + |"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Substitute `Y_AXIS` with the y-axis of your choice. +"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "`Y_AXIS` is compulsory and you have to specify it. +"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "`Y_AXIS` must either be `reps` or `weight` (case insensitive), allowing you to specify the exercise attribute you wish to focus on +"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "e.g. `Reps`, `weigHt` and `WEIGHT` will be valid inputs for `Y_AXIS`. +"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `sd/START_DATE` + |"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Substitute `START_DATE` with the start date of your graph. +"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "`sd/START_DATE` is compulsory and you have to specify it. +"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "`START_DATE` must be of the form `DD-MM-YYYY` (ie. 02-07-2020 for 2nd July 2020) +"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "The range of `START_DATE` is from one year before the current date to the current date (inclusive). +"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "`START_DATE` cannot be chronologically after `END_DATE` +"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "| `ed/END_DATE` + |"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Substitute `END_DATE` with the end date of your graph +"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "`ed/END_DATE` is compulsory and you have to specify it. +"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "`END_DATE` must be of the form `DD-MM-YYYY` (ie. 02-07-2020 for 2nd July 2020) +"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "The range of `END_DATE` is from one year before the current date to the current date (inclusive). +"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "`END_DATE` cannot be chronologically before `START_DATE` +"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "Let\u0027s say that you wish to view the exercise graph of `Alex Yeoh` for the exercise `Sumo Deadlift` from the date `01-01-2020` to `13-04-2020` and you want to focus on the `weight` he lifted during the exercise."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "You can use the `graph` command to view the graph of the exercise following the steps as shown:"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". First view the client that you want to view the exercise graph of. For information on how to view the client, you can refer to the `view-c` section. For this example, we will view the graph of `Alex Yeoh`, who is the first client in the client list. After entering `view-c 1`, you will see the full detailed information and a table of recorded exercises of client `Alex Yeoh`."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-graph-1.png[]"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". Next, simply type the graph command `graph n/Sumo Deadlift a/weight sd/01-01-2020 ed/13-04-2020` into the Command Box."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-graph-2.png[]"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". The graph will appear separately in a window."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-graph-3.png[]"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". You will see the Result Box informing you of the current graph displayed. Note that any changes made using `add-e, edit-e, delete-e` will not be reflected in the graph."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-graph-4.png[]"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d Common errors/problems"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "You might face some errors or difficulties when you use `graph`. In this section, you will be able to understand these errors and resolve them. You will also get a better understanding of the reply from the Result Box when using `graph`."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d No exercise within stipulated timeframe"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "If you have keyed in the `graph` command in the correct format but the graph is not appearing, you might want to check the start and end dates in your command. In the example below, the exercise clearly exists in the exercise list, but not within the stipuated timeframe. Therefore the graph will not be displayed."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". The exercise `Sumo Deadlift` clearly exists in the exercise list. However, there are no records of `Sumo Deadlifts` from `01-01-2020` to `01-02-2020`."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-graph-5.png[]"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". The graph will not appear and an error message will be shown."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-graph-6.png[]"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "To correct this, change the timeframe to one where there is at least one existing record of the specified exercise in the current exercise list."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d No exercise for stipulated axis"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "If you have keyed in the `graph` command in the correct format but the graph is not appearing, you might want to check the y-axis in your command. In the example below, the exercise clearly exists in the exercise list, but there are no inputs for the stipulated y-axis. Therefore the graph will not be displayed."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". The exercise `Push Up` clearly exists in the given timeframe. However, there are no inputs for weight as seen in the exercise table."
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-graph-7.png[]"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". The graph will not appear and an error message will be shown."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-graph-8.png[]"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "To correct this, change the axis to one where there is at least one non-empty input of the  exercise in the current exercise list. You could also choose to view another exercise\u0027s graph instead."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Invalid time frame"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "If you have keyed in the `graph` command in the command box but the graph is not appearing, you might want to check the start and end dates. In the example below, the command format looks correct but the start date is later than the end date. This is not allowed and therefore the graph will not be displayed."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". The start date `01-04-2020` is chronologically later than the end date `01-02-2020`."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-graph-9.png[]"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ". The graph will not appear and an error message will be shown."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "+"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "image::ug-graph-10.png[]"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "To correct this, the start date has to be earlier or the same as the end date."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "// end::graph-command[]"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d\u003d View schedule for the day/week: `view-s` [Coming in v2.0]"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows the schedule for today or the time specified."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view-s TYPE`"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `TYPE` must be either `today`, `week` or `month`"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `view schedule today`"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** Shows the schedule for today"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* `view schedule week`"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** Shows the schedule of the current week"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous FitBiz folder."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "// tag::commands[]"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d General Commands"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"20%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|Command | Summary"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`export INDEX`| Exports client\u0027s training record to a CSV file."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`help`| Shows all available commands and their description."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`view-s TYPE` [v2.0]| Shows schedule for today or time specified."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d Client Commands"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"20%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|Command | Summary"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`add-c n/NAME p/PHONE_NUMBER e/EMAIL [t/TAG]…`| Adds a new client into FitBiz."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`delete-c INDEX`| Deletes a client and its associated exercises."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`edit-c INDEX [n/NAME] [p/PHONE] [e/EMAIL] [t/TAG]…​`| Edits an existing client."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "|`filter-c [t/TAG]... [s/Sport]...`| Filters the list of clients based on specified tags or sports."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`find-c KEYWORD [KEYWORD]...`| Filters the list of clients based on specified name."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "|`list-c`| Displays the list of clients in FitBiz."
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`schedule INDEX sch/DAY-STARTTIME-ENDTIME`| Assigns a schedule to a client."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`view-c INDEX`| Shows detailed information of a client."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d\u003d Exercise Commands"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"20%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|Command | Summary"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`add-e n/EXERCISE_NAME d/DATE ew/WEIGHT reps/REPS sets/SETS`| Adds a new exercise to the client being viewed."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`delete-e INDEX`| Deletes an exercise in the exercise list of the client being viewed."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`edit-e INDEX [n/EXERCISE_NAME] [d/DATE] [ew/WEIGHT] [reps/REPS] [sets/SETS]`| Edits the exercise details of the client being viewed."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|`graph n/NAME a/AXIS sd/STARTDATE ed/ENDDATE`| Shows a graph of the exercise progress done by a client between the indicated dates."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "// end::commands[]"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 323,
      "ziyingli": 249,
      "tohkerwei": 159,
      "Dban1": 253,
      "AaronCQL": 318,
      "-": 85
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs the `./gradlew clean test coverage coveralls -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".  This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do. So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".  To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  If the build is successful, you should be able to check the coverage details of the tests at http://coveralls.io/[Coveralls]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".  On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": "   Using this account, generate a cliental access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Cliental access tokens are like passwords so make sure you keep them secret! If the cliental access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* Click `Generate Token` and copy your new cliental access token."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click on the settings button next to the switch. In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* name: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* value: cliental access token copied in step 1"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Otherwise, other people will be able to see the cliental access token and thus have access this repo. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".  Trigger Travis to regenerate documentation. To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".  Wait for Travis CI to finish running the build on your new commit."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to the URL `\\https://\u003cyour-username-or-organization-name\u003e.github.io/addressbook-level3/index.html`. You should see your `README` file displayed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "Dban1": 5,
      "-": 135
    }
  },
  {
    "path": "docs/draft/UserGuideDraft.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003c!-- omit in toc --\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "# FitBiz User Guide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- [2. Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- [3. Features](#3-features)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.1. View help: `help`](#31-view-help-help)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.2. Add a new client profile: `add client`](#32-add-a-new-client-profile-add-client)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.3. View a client profile: `view client`](#33-view-a-client-profile-view-client)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.4. Edit a client’s profile: `edit client`](#34-edit-a-clients-profile-edit-client)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.5. Delete a client: `delete client`](#35-delete-a-client-delete-client)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.6. List all clients: `list`](#36-list-all-clients-list)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.7. Display a list of predefined exercises: `view exercise`](#37-display-a-list-of-predefined-exercises-view-exercise)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.8. Add a new exercise: `add exercise template`](#38-add-a-new-exercise-add-exercise-template)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.9. Start a timer: `time`](#39-start-a-timer-time)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - [3.10. Add a new routine template: `add routine template`](#310-add-a-new-routine-template-add-routine-template)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - [3.11. View the list of routine template: `view routine template`](#311-view-the-list-of-routine-template-view-routine-template)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - [3.12. Edit a routine template: `edit routine template`](#312-edit-a-routine-template-edit-routine-template)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "  - [3.13. Tag a client: `tag`](#313-tag-a-client-tag)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "  - [3.14. Sort clients based on attribute: `sort clients`](#314-sort-clients-based-on-attribute-sort-clients)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - [3.15. List routines: `list routines`](#315-list-routines-list-routines)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "  - [3.16. Check total earnings: `earnings`](#316-check-total-earnings-earnings)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.18. Track payment date: `view payment`](#318-track-payment-date-view-payment)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "  - [3.19. View cliental best: `view pb`](#319-view-cliental-best-view-pb)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.20. View schedule for the day/week: `view schedule`](#320-view-schedule-for-the-dayweek-view-schedule)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.21. View client summary: `show summary`](#321-view-client-summary-show-summary)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.22. Export as CSV: `export`](#322-export-as-csv-export)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.23. Add a new food template: `add food template`](#323-add-a-new-food-template-add-food-template)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.24. Edit an existing food template: `edit food template`](#324-edit-an-existing-food-template-edit-food-template)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.25. Delete food item: `delete food template`](#325-delete-food-item-delete-food-template)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.26. Display visualisations of training progress: `training graph`](#326-display-visualisations-of-training-progress-training-graph)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.27. List all gyms: `list gyms`](#327-list-all-gyms-list-gyms)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.28. Find out information about a gym: `view gym`](#328-find-out-information-about-a-gym-view-gym)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.29. Make meal plans: `meal`](#329-make-meal-plans-meal)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.28. Compares the daily and target caloric intake: `calories`](#328-compares-the-daily-and-target-caloric-intake-calories)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.29. Show Competitors: `find competitor`](#329-show-competitors-find-competitor)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - [3.30. Find the nearest gyms: `find gym`](#330-find-the-nearest-gyms-find-gym)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.31. Booking a facility: `book`](#331-booking-a-facility-book)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.32. Add photos to client’s photo album: `add photo`](#332-add-photos-to-clients-photo-album-add-photo)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.33. View client photo album: `view photo`](#333-view-client-photo-album-view-photo)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "FitBiz is for fitness coaches who are managing multiple clients and prefer to use a desktop app for managing their clients. More importantly, FitBiz is optimized for those who prefer to work with Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, FitBiz can get your client management and tracking tasks done faster than traditional GUI apps. Interested? Jump to the Section 2, “Quick Start” to get started. Enjoy!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "1. Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "2. Download the latest FitBiz.jar here."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your Fitness Manager."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "4. Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "5. Type the command in the command box and press Enter to execute it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "e.g. typing help and pressing Enter will open the help window."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "6. Some example commands you can try:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    - `list` : lists all clients"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    - `add client n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named John Doe to the Address Book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    - `exit` : exits the app"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "7. Refer to Section 3, “Features” for details of each command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format of commands:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Words in `UPPER_SNAKE_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Items with `…` after them can be used multiple times including zero times e.g. `[t/TAG]…` can be used as   (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.1. View help: `help`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Lists all available commands and a short description of what they do. Specify the command for more detailed explanation."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `help [c/COMMAND]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `help`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Lists all commands"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `help add client`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows a detailed explanation of the `add client` command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.2. Add a new client profile: `add client`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Initialises and adds a new client profile."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `add client n/NAME`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `add client n/Ming Liang`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Adds a new client: Ming Liang"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `add client n/Low Tah Kiow, John`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Adds a new client: Low Tah Kiow, John"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.3. View a client profile: `view client`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows all available information of the client."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view client n/NAME`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view client n/Ming Liang`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows information about Ming Liang"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view client n/Low Tah Kiow, John`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows information about Low Tah Kiow, John"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.4. Edit a client’s profile: `edit client`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Updates the client’s cliental details by specifying the attribute and the new value."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `edit client n/NAME [a/ATTRIBUTE v/VALUE]...`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[a/ATTRIBUTE]` has to be a valid attribute for the client."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[v/VALUE]` has to be of matching type to the attribute of the client"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `edit client n/Ming Liang a/age v/60 a/gender v/male`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Sets Ming Liang’s age to 60 and gender to male."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.5. Delete a client: `delete client`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Deletes a client from the program."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `delete n/NAME`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `delete n/Ming Liang`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Removes Ming Liang’s profile."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.6. List all clients: `list`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows all clients currently entered in this program."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.7. Display a list of predefined exercises: `view exercise`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Displays a list of exercises available in the program. Specify the muscle group(s) to list only exercises that target that muscle group(s)."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view exercise [m/MUSCLE]...`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view exercise`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows a list of all exercises and their information stored in the program"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view exercise m/abdomens m/chest`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows all exercises that target the abdomens and chest"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.8. Add a new exercise: `add exercise template`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "If the list of predefined exercises are not enough, you may choose to add a new exercise for future use."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `add exercise template e/EXERCISE_NAME t/TARGET_MUSCLE...`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- There must be at least one `TARGET_MUSCLE` specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `add exercise template e/Skipping Rope t/Quadriceps t/Calves`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Adds a new exercise Skipping Rope which targets the Quadricepts and Calves muscle group"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.9. Start a timer: `time`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Starts a timer which will notify you when it ends."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `time [h/HOURS] [m/MINUTES] [s/SECONDS]`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `time m/4 s/40`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Starts a timer for 4 minutes and 40 seconds"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "### 3.10. Add a new routine template: `add routine template`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Adds a new routine template with the specified name and exercise templates."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Format: `add routine template n/NAME_OF_TEMPLATE e/[EXERCISE_TEMPLATES]...`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME_OF_TEMPLATE` is case insensitive. e.g `back` will match `Back`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Push Pull` will not match `Pull Push`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g `Push` will not match `Push Pull`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `e/EXERCISE_TEMPLATES` must exist in the predefined list of exercise templates"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `add routine template n/Push Pull e/Pull Up e/Bench Press`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - Adds a new routine template with called Push Pull with 2 exercises, Pull Up and Bench Press."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "### 3.11. View the list of routine template: `view routine template`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Lists all routine templates."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Format: `view routine template`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "### 3.12. Edit a routine template: `edit routine template`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Edits a new routine template with the specified name and exercise templates."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Format: `edit routine template n/NAME_OF_TEMPLATE [a/ATTRIBUTE v/VALUE]...`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME_OF_TEMPLATE` is case insensitive. e.g `back` will match `Back`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Push Pull` will not match `Pull Push`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g `Push` will not match `Push Pull`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `[a/ATTRIBUTE]` has to be a valid attribute for the routine template"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `[v/VALUE]` has to be of matching type to the attribute of the routine template"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `edit routine template n/Push Pull a/NAME_OF_TEMPLATE v/Pull Push`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - Renames the routine template called Push Pull to Pull Push"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `add routine template n/Push Pull e/Pull Up e/Bench Press`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - Adds a new routine template with called Push Pull with 2 exercises, Pull Up and Bench Press"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Dban1"
        },
        "content": "### 3.13. Tag a client: `tag`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Assigns a tag to a client for ease of grouping and searching."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Format: `tag c/CLIENT t/TAG`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- `tag c/Jeffreigh t/Professional`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Dban1"
        },
        "content": " - The client Jeffreigh is now tagged as \"Professional\". Future searches for the Professional tag will include Jeffreigh"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Dban1"
        },
        "content": "### 3.14. Sort clients based on attribute: `sort clients`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Sorts clients by descending order based on the specified attribute."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Format: `sort clients a/ATTRIBUTE`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- `sort clients a/Height`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    - returns a sorted list of all clients in descending order"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "### 3.15. List routines: `list routines`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Returns a list of all routines."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Format: `list routines`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `list routines`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    - returns a complete list of all routines."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Sorts clients by descending order based on the specified attribute."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Format: `sort clients a/ATTRIBUTE`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- `sort clients a/Height`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    - returns a sorted list of all clients in descending order"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Dban1"
        },
        "content": "### 3.16. Check total earnings: `earnings`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows the total earnings or the specific earnings for a client."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `earnings [n/NAME] [t/TAG]`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- If no name is given, total earnings from all clients will be shown"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- If a name is given, only earnings from that client is shown"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[n/NAME]` is case insensitive. e.g hans will match Hans"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g Hans Ong will not match Ong Hans"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. Hans will not match Hans Ong"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `earnings`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows the complete list of clients and total earnings."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `earnings n/Jane Doe`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows the earnings from client Jane Doe only."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.18. Track payment date: `view payment`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows the list of payment information."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view payment d/DETAIL`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `d/DETAIL` can be `n/NAME`, `d/DATE` or `m/MONTH`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME`is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `d/DATE` must be in the format `DD/MM/YYYY`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `m/MONTH` must be spelt in full e.g. `january`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view payment n/tom`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows a payment details of clients name Tom"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view payment d/12/12/2020`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows all payment details on 12 December 2020"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view payment m/august`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows all payment details in August"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Dban1"
        },
        "content": "### 3.19. View cliental best: `view pb`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Displays the cliental best of all exercises of a client."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view pb n/NAME`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view pb n/Raymond tan`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows the best record done for all exercises done by Raymond Tan"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.20. View schedule for the day/week: `view schedule`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows the schedule for today or the time specified."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view schedule t/TYPE`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `t/TYPE` can be `d/DATE`, `week` or `month`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `d/DATE` must be of the format `DD/MM/YYYY`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- to view schedule for today, leave `t/TYPE` blank"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view schedule`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows the schedule for today"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view schedule t/week`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows the schedule of the current week"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.21. View client summary: `show summary`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows all the trainings done by the client."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view summary n/NAME`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view summary n/Timothy Lee`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows all the training records of Timothy Lee"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.22. Export as CSV: `export`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Exports client\u0027s training record to a CSV file."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `export n/NAME`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `export n/Lucy Liu`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Exports training records of Lucy Liu as a CSV file"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.23. Add a new food template: `add food template`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Adds a new food template with the specified name and calories per serving."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `add food n/NAME_OF_FOOD c/CALORIES`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME_OF_FOOD` is case insensitive. e.g `laksa` will match `Laksa`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Nasi Lemak` will not match `Lemak Nasi`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g `Nasi` will not match `Nasi Lemak`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `c/CALORIES` is the calories per serving"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `add food template n/Chilli Crab c/100`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Adds a new food template with food name Chilli Crab and 100 calories per serving."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.24. Edit an existing food template: `edit food template`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Edits an existing food template."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `edit food template n/NAME_OF_FOOD [a/ATTRIBUTE v/VALUE]...`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME_OF_FOOD` is case insensitive. e.g `laksa` will match `Laksa`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Nasi Lemak` will not match `Lemak Nasi`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g `Nasi` will not match `Nasi Lemak`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[a/ATTRIBUTE]` has to be a valid attribute for the food"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[v/VALUE]` has to be of matching type to the attribute of the food"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `edit n/Chilli Crab a/CALORIES v/200`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Edits the calories per serving for Chilli Crab to be 200g per serving.  "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.25. Delete food item: `delete food template`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Deletes an existing food template."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `delete food template n/NAME_OF_FOOD`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME_OF_FOOD` is case insensitive. e.g `laksa` will match `Laksa`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Nasi Lemak` will not match `Lemak Nasi`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g `Nasi` will not match `Nasi Lemak`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[a/ATTRIBUTE]` has to be a valid attribute for the food."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `delete food template n/Chilli Crab`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Removes food template for Chilli Crab."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.26. Display visualisations of training progress: `training graph`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Shows visualisations of client’s exercise progress."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `training graph n/NAME a/ATTRIBUTE [s/START] [e/END]`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Generates a graphical representation of the client’s progress"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Client is specified by `n/NAME`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- `a/ATTRIBUTE` include client’s weight, workout cliental best, fat percentage etc"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[s/START]`, `[e/END]` are optional"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Date format of `[s/START]`, `[e/END]` is `DD/MM/YYYY`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `training graph n/Ming Liang a/weight`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows a graph of Ming Liang’s weight losing progress since he first started to current date."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.27. List all gyms: `list gyms`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Lists all available gyms in Singapore."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `list gyms`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.28. Find out information about a gym: `view gym`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Finds and lists information about a gym, including opening and closing times, popularity etc."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view gym g/GYM`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `g/GYM` is case insensitive. e.g `clementi gym` will match `Clementi Gym`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Gym Clementi` will not match `Clementi Gym`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Jurong` will not match `Jurong East Gym`."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view gym g/Jurong East Fitness Club`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Returns the address, opening and closing times and average occupancy.  "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.29. Make meal plans: `meal`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Stores meal plans into the storage."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `meal [n/NAME] [l/] [f/FOOD] [c/CALORIES]`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Saves the meal into storage for reference and to assign to client."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Multiple ingredients are separated by `[l/]`."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Can have multiple `[l/]` for the breakdown of different ingredients in the food."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[c/CALORIES]` can be used to calculate client’s daily calories intake automatically."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[c/CALORIES]` must be a number."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `meal n/Chicken Breast with Brocolli l/f/Chicken breast c/165 calories 1/f/Brocolli c/34 calories`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Stores meal plan chicken breast with broccoli with the breakdown of calories from chicken breast and broccoli."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.28. Compares the daily and target caloric intake: `calories`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Calculates the difference between client’s current calorie intake and expected intake value"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `calories [n/NAME]`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[n/Name]` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `calories n/Ming Liang`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Returns Ming Liang’s current calorie intake out of expected calorie intake."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.29. Show Competitors: `find competitor`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows a list of clients who have the specified competition."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `find competitors [n/NAME]`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Shows a list of clients with the specified competition tagged to their profile."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/[Name]` is case insensitive. e.g hometeamns will match HomeTeamNS"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will not matter. e.g `Fitness Ironman` will match `Ironman Fitness`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only full words will be matched. e.g. `Iron` will not match `Irons`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Competition matching at least one keyword will be returned. e.g. `Ironman Powerlifting` will return `HomeTeamNS Fitness Ironman 2019, Sheffield 2020 Powerlifting`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `find competitors HomeTeamNS Fitness Ironman 2019`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows a list of clients competing for HomeTeamNS Fitness Ironman 2019."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `find competitors Sheffield 2020 Powerlifting`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows a list of clients competing for Sheffield 2020 Powerlifting."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "### 3.30. Find the nearest gyms: `find gym`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Finds the nearest gyms to a client according to their address."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Format: `find gym [n/NAME]`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- At most 5 gyms will be shown"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `find gym n/Kee Ah Siow`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - Finds the nearest gyms to Kee Ah Siow"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.31. Booking a facility: `book`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Books a fitness facility from a in-built list of available facilities."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: book `[f/FACILITY] [t/TIME] [d/DURATION]`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Books the facility specified in `[f/FACILITY]`. The facility needs to be found in the in-built list. Else, an error would occur"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[f/FACILITY]`,  `[t/TIME]`, `[d/DURATION]` must be provided"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Facilities have different operating hours and an error would occur if user book outside the operating hours"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Format for `[t/TIME]` is 24-hour clock"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Format for `[d/DURATION]` is in minutes and should be multiples of 30. Else, an error would occur"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `book f/Farrer Park Field t/1400 d/60`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Books Farrer Park Field from 2pm to 3pm"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `book f/Burghley Tennis Centre t/0900 d/120`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Books Burghley Tennis Centre from 9am to 11am"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.32. Add photos to client’s photo album: `add photo`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Add photo to a client’s photo album to track physique progress."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `add photo n/NAME"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[n/NAME]` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- If there are 2 people with the same name, enter the `INDEX` of the correct client"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- After the client is identified, a file attachment window will appear"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Select the file you want from the file attachment window"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The timestamp of the photo added will be recorded"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `add photo tom`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Adds photo tommy.png(chosen)to Tom’s photo album"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `add photo Betty`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Adds photo betty.png(chosen) to Betty Koh’s photo album"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.33. View client photo album: `view photo`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows client\u0027s photo in an album format."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view photo [n/NAME]`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Photos displayed in photo album are sorted by date(Newest to Oldest)"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of the keywords will matter. e.g. `Hans Bo` will not match `Bo Hans`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only the name is searched."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Clients matching at least one keyword will be returned (i.e. OR search). e.g. `Hans Bo` will return `Hans Gruber, Bo Yang`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- If there are 2 people identified, enter the `INDEX` of the correct client"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view photo Diana`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows photo album of Diana"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 33,
      "Dban1": 49,
      "AaronCQL": 507
    }
  },
  {
    "path": "docs/team/aaroncql.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d Choo Qi Le Aaron - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d PROJECT: FitBiz"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "FitBiz is a fitness business management application, specially made for fitness coaches to manage their clients. It is primarily a desktop application where the user interacts via the Command Line Interface (CLI), and views data via the Graphical User Interface (GUI). This project is written in Java 11, packaged using Gradle, and uses JavaFX for the GUI."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* *Major enhancement*: developed the \u003c\u003ccommand-autocomplete\u003e\u003e feature, which allows users to conveniently autocomplete commands and their parameter prefixes using the kbd:[Tab] key."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** *What it does*: allows users to input FitBiz\u0027s commands with ease without having to memorise the syntax of every command available. Since our users are fast typists and prefer to use the keyboard, this feature also allows them to efficiently get to the next prefix by hitting kbd:[Tab], instead of wasting time using their mouse."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** *Justification*: previously, users would have to refer to the User Guide frequently (or rely on the `help` command) for the syntax of FitBiz\u0027s commands. This feature greatly lowers the barriers to entry for this application, and also enhances the user experience by providing a much faster way for users to interact with the CLI via the keyboard."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** *Highlights*: developed a custom `Trie` data structure which was written to be easily extensible for future commands and custom logic to be added. This feature is also contextually aware, and will provide ample and useful feedback to the user (like similar commands found, or the usage of the current autocompleted command)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* *Major enhancement*: developed the \u003c\u003ccommand-history\u003e\u003e feature, which allows users to store their previously entered commands, and which they can access using the kbd:[\u0026uarr;] and kbd:[\u0026darr;] keys."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** *What it does*: allows users to efficiently and conveniently access and repeat their previously entered commands (be it valid or invalid) any time within the Command Box."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** *Justification*: previously, if the command was successful, users would have to type out the full command again if they had wanted to repeat it. Now, users can easily repeat or tweak their previously entered commands without wasting precious time typing everything again."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** *Highlights*: this feature was made to mimic most modern interpreters, and as such, will be very familiar to most users comfortable with using a CLI application. The history was also made to persist on the storage, so users can expect to come back to the application after a previous session and still access their previous command history of said session."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* *Minor enhancement*: developed the \u003c\u003cexport-command, `export`\u003e\u003e command which allows users to export their clients\u0027 recorded exercises into a CSV file which can then be viewed in other spreadsheet software like Microsoft Excel, or easily shared with their clients."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* *Minor enhancement*: redesigned the overall user interface and enhanced the user experience by providing better visual feedback cues to the GUI."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* *Minor enhancement*: added the target and current weight attributes to the `Client` class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* *Overall contributions*: https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003daaroncql\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dAaronCQL\u0026tabRepo\u003dAY1920S2-CS2103T-F11-2%2Fmain%5Bmaster%5D[4.5K+ LOC] | https://github.com/AY1920S2-CS2103T-F11-2/main/graphs/contributors[260+ commits] | https://github.com/AY1920S2-CS2103T-F11-2/main/pulls?q\u003dis%3Apr+is%3Amerged+author%3Aaaroncql[60+ PRs merged] | https://github.com/AY1920S2-CS2103T-F11-2/main/pulls?q\u003dis%3Apr+reviewed-by%3A%40me+[70+ PRs reviewed]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** *Project management*:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*** Managed releases https://github.com/AY1920S2-CS2103T-F11-2/main/releases/tag/v1.2.1[`v1.2.1`], https://github.com/AY1920S2-CS2103T-F11-2/main/releases/tag/v1.3[`v1.3`], and https://github.com/AY1920S2-CS2103T-F11-2/main/releases/tag/v1.4[`v1.4`] on GitHub"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** *Enhancements to existing/teammates\u0027 features*:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*** Completely reworked the overall design of the GUI by adhering to the https://material.io/design/[Material Design] specification: https://github.com/AY1920S2-CS2103T-F11-2/main/pull/123[#123] https://github.com/AY1920S2-CS2103T-F11-2/main/pull/208[#208], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/217[#217], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/218[#218], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/234[#234]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*** Updated the sample client data, exercises, and schedules: https://github.com/AY1920S2-CS2103T-F11-2/main/pull/67[#67], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/233[#233]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*** Updated unit tests for the `v1.2` release, raising test coverage by 8.3% to 77.8%: https://github.com/AY1920S2-CS2103T-F11-2/main/pull/69[#69]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*** Added unit tests for the `AddExerciseCommand` class, raising test coverage by 3.2%: https://github.com/AY1920S2-CS2103T-F11-2/main/pull/133[#133]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*** Wrote a custom insertion sort to support adding of exercises: https://github.com/AY1920S2-CS2103T-F11-2/main/pull/233[#233] (https://ay1920s2-cs2103t-f11-2.github.io/main/DeveloperGuide.html#adding-an-exercise-to-uniqueexerciselist[justification])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** *Documentation*:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*** Added the Command History, Command Autocomplete, Export and Delete Exercises Command features to the User and Developer Guides: https://github.com/AY1920S2-CS2103T-F11-2/main/pull/201[#201], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/237[#237], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/244[#244], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/267[#267], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/271[#271]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*** Added and updated the https://ay1920s2-cs2103t-f11-2.github.io/main/UserGuide.html#overview[Overview] section to the User Guide: https://github.com/AY1920S2-CS2103T-F11-2/main/pull/110[#110], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/136[#136], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/267[#267]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*** Reordered sections in the User and Developer Guides for better flow of contents: https://github.com/AY1920S2-CS2103T-F11-2/main/pull/213[#213], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/223[#223]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "** *Summary*:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*** PRs reviewed with non-trivial review comments: https://github.com/AY1920S2-CS2103T-F11-2/main/pull/83[#83], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/229[#229], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/261[#261]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*** Issues and bugs reported with non-trivial comments: https://github.com/AY1920S2-CS2103T-F11-2/main/issues/104[#104], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/105[#105], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/129[#129], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/138[#138] https://github.com/AY1920S2-CS2103T-F11-2/main/issues/235[#235]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*** Issues resolved and bugs squashed with non-trivial implementations: https://github.com/AY1920S2-CS2103T-F11-2/main/issues/41[#41], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/64[#64], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/65[#65], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/78[#78], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/95[#95], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/103[#103], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/107[#107], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/161[#161], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/165[#165], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/170[#170], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/187[#187], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/188[#188], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/190[#190], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/197[#197], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/198[#198], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/200[#200]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "*** Solutions contributed to https://github.com/nus-cs2103-AY1920S2/forum/issues[forum discussions]: https://github.com/nus-cs2103-AY1920S2/forum/issues/30[#30], https://github.com/nus-cs2103-AY1920S2/forum/issues/55[#55], https://github.com/nus-cs2103-AY1920S2/forum/issues/58[#58], https://github.com/nus-cs2103-AY1920S2/forum/issues/68[#68]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "include::../UserGuide.adoc[tag\u003dunderstanding-the-cli]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexport-command]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete-e-command]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daaron-choo]"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 72
    }
  },
  {
    "path": "docs/team/dban1.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d Ng Ming Liang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d PROJECT: FitBiz"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "FitBiz is a desktop fitness business management application. It keeps track of the user\u0027s schedule. It can record the user\u0027s client information such as basic data like their names, phone numbers, addresses etc. On top of that, it also records data useful to gym coaches, such as the clients\u0027 exercise logs, personal bests. FitBiz also features graph visualisation for gym coaches to obtain a visual progress indicator for the client\u0027s exercises, and is customisable to some extent by the user. The user interacts with FitBiz via a Command Line Interface(CLI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* *Major enhancement*: added *Schedule feature and its commands*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "** What it does: allows the user to add weekly training schedules to their clients. All schedules are consolidated from across all the clients and represented into a sorted weekly Schedule Panel on the right of the main GUI for easy reference. The command for Schedule is:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- `schedule INDEX sch/DAY-STARTTIME-ENDTIME`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "+"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Users will be able to clear, or overwrite multiple schedules to the specified client."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "** Justification: This feature improves the product significantly because enabling a scheduling system is an integral functionality for gym coaches to manage multiple clients, each with varying time slots and schedules."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "** Highlights: The schedule feature is an important building block to be built upon for future releases. Future features such as training results prediction would require analysis of the schedule to perform calculations on a Client\u0027s predicted performance by the end of say, 6 months down the road, which ties in deeply with the other features of FitBiz such as the Exercise component. Furthermore, it can also potentially be paired with the Graph feature to visually display predicted trainings."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* *Major enhancement*: implemented the SchedulePanel in the MainWindow of the GUI to represent the weekly schedule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "** What it does: Schedules are shown neatly and in a sorted manner for the week."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "** Justification: For FitBiz to be more intuitive and convenient for the user, the main GUI displays the weekly schedule on the right to provide easy access for the user to view his clients\u0027 schedules, instead of having to rely on text outputs for schedule without a GUI."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "** Highlights: This enhancement requires knowledge of working with JavaFX. Furthermore, with SchedulePanel being a part of a larger GUI, I learnt to work under the constraints of the environment, as well as integrate my GUI feature as part of a larger project."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- The Schedule Panel models a weekly schedule, thus there would be seven days of the week to represent. To achieve this, I implemented a `SchedulePanel` class that constructs seven `ScheduleCell`, each `ScheduleCell` representing a day of the week"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- Each `ScheduleCell` takes in a sorted `ObservableList` of `Schedule` which it uses to display the schedules for the day within the cell. I chose `ObservableList` to make use of the Observer Pattern taught in CS2103, where `SchedulePanel` would be subscribed to changes in the `ObservableList`, so that I can ensure information shown in `SchedulePanel` correctly reflects the updated schedules, whether schedules have changed or even if Clients with schedules have been removed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- As each day could contain vastly different amounts of schedules, having a fixed `ScheduleCell` size for each day would be inflexible and potentially buggy, unless I choose to truncate Schedules, which would defeat the purpose of the Schedule Panel. Hence, I implemented `ScheduleCell` to expand its cell size vertically downwards dynamically according to the amount of schedules on that day. This way, days without schedule can have their respective `ScheduleCell` kept minimal, whilst even days with many schedules (over 100+ schedules tested) can well display the schedules."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* *Minor enhancement*: refactored `Person` from AddressBook to `Client` to fit the requirements of FitBiz"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* *Minor enhancement*: added `Birthday` attribute to `Client`, making use of LocalDate and also sanity checks to ensure that the client does not enter a birthday too old, i.e. 120 years. According to Wikipedia as of this PPP, the oldest living person in the world today is 117."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003ddban1\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dDban1\u0026tabRepo\u003dAY1920S2-CS2103T-F11-2%2Fmain%5Bmaster%5D[RepoSense]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "*** Wrote test code for schedule classes and commands, and birthday tests to improve test coverage:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-2/main/pull/142[142], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/44[44]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "*** Helped to add sanity check for ExerciseDate:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-2/main/pull/225[225]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "*** Wrote the implementation of schedule command in Developer Guide, as well as the GUI implementation for Schedule:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-2/main/pull/127[127],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-2/main/pull/142[142]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "*** Wrote the command guide for `list-c`, `edit-c` and `schedule` in User Guide:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-2/main/pull/259[259],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "*** Changed `Model` and `Storage` diagrams of Developer Guide:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-2/main/pull/259[259],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "*** PRs reviewed:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-2/main/pull/283[283],"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-2/main/pull/223[223],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-2/main/pull/136[136]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-1/main/issues/245[245],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-1/main/issues/244[244],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-1/main/issues/243[243],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-1/main/issues/242[242],"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-1/main/issues/241[241],"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-1/main/issues/240[240]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "*** Discussed and squashed bugs with non-trivial implementations:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-2/main/pull/236[236],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-2/main/pull/207[207],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "include::../UserGuide.adoc[tag\u003dedit-c]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "include::../UserGuide.adoc[tag\u003dschedule]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlist-c]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddban1]"
      }
    ],
    "authorContributionMap": {
      "Dban1": 89
    }
  },
  {
    "path": "docs/team/tohkerwei.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d Toh Ker Wei - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d Project: FitBiz"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "FitBiz is a fitness business management application, specially created for fitness coaches to manage their clients. It is a platform where coaches can store his clients\u0027 information, exercises done and weekly training schedule. FitBiz is primarily a desktop application where the user interacts with the program via the Command Line Interface (CLI), and views data via the Graphical User Interface (GUI). This project is written in Java 11, packaged using Gradle, and uses JavaFX for the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "* *Major enhancement*: added the *filter* feature which allows user to filter and display the clients list using client\u0027s `Tag` and `Sport`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "** What it does: Allows user to filter through his list of clients using `Tag` or `Sport` keywords and return clients that have `Tag` or `Sport` matching all of the keywords specified."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "** Justification: Allows user to group and view clients based on their `Tag` or the `Sport` they play, which is a convenient way of looking at similar groups of client when planning exercises or scheduling clients with similar needs to train as a group. This increases the efficiency of viewing clients from a long list based on their attributes and to find clients\u0027 `INDEX` to view their information."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "** Highlights: Provides a simple yet important way of grouping and viewing clients from the list. The implementation was done in such a way that makes it easy to expand to filter all attributes of clients allowing user to make training plans more robust. Future expansion plan includes the abilities to filter clients by ranges of their current and target weight to group those with similar needs and filter by address to allow user to schedule clients living near each other on the same day."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "* *Major enhancement*: helped to build the foundation of *schedule* feature"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "** What it does: Allows user to add and view the training schedule of clients"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "** Justification: Users will be able to add, store and view clients schedule and therefore eliminating the need to use another application for the same purpose. This increases the efficiency of users while planning for clients\u0027 trainings as the schedule, exercise history and information can all be viewed in the same page."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "** Highlights: We have essentially created a mini version of a calendar app that is simple yet maintain the important functionalities to add training schedules and display them in a weekly view. Many real life conditions for the training schedule added such as overlapping training time, whether to allow backlogging of training dates and clients having same training time have been resolved through multiple trials and discussions."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "* *Minor enhancement*: added `Sport` attribute to `Client`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dtohkerwei\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dtohkerwei\u0026tabRepo\u003dAY1920S2-CS2103T-F11-2%2Fmain%5Bmaster%5D[RepoSense]]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "*** Wrote test code for classes regarding filter to improve test coverage (Pull request https://github.com/AY1920S2-CS2103T-F11-2/main/pull/231[#231])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "*** Wrote test codes for `Sport` attribute and part of `Schedule` classes to improve test coverage (Pull request https://github.com/AY1920S2-CS2103T-F11-2/main/pull/46[#46], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/62[#62], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/141[#141])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "*** Wrote the command guide for `add-c` and `filter-c` in User Guide (Pull request  https://github.com/AY1920S2-CS2103T-F11-2/main/pull/260[#260], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/273[#273])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "*** Wrote the implementation of `filter-c` and `view-c` in Developer Guide (Pull request https://github.com/AY1920S2-CS2103T-F11-2/main/pull/248[#248], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/272[#272])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "*** Edited `Logic` to reflect the implementation of FitBiz in Developer Guide (Pull request https://github.com/AY1920S2-CS2103T-F11-2/main/pull/248[#248])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class that were resolved or implemented (https://github.com/AY1920S2-CS2103T-W16-2/main/issues/133[1], https://github.com/AY1920S2-CS2103T-W16-2/main/issues/129[2], https://github.com/AY1920S2-CS2103T-W16-2/main/issues/130[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "|_Given below are the sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "include::../UserGuide.adoc[tag\u003dadd-c-command]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfilter-c-command]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "|_Given below are the sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlogic]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfilter-c-command]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dview-c-command]"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 59
    }
  },
  {
    "path": "docs/team/yonggiee.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d Fong Yong Jie - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d PROJECT: FitBiz"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "FitBiz is a desktop fitness business management application. It keeps track of the user\u0027s schedule. He can record client\u0027s information and the exercises they did with the personal bests automatically generated. Graphical visualisations of his client\u0027s progress can also be displayed. The user interacts with it using a Command Line Interface(CLI), and it has a Graphical User Interface(GUI) created with JavaFX. It is written in Java version 11."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* *Major enhancement*: added *Exercise classes and its commands*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "** What it does: allows the user to record their client\u0027s exercises. The recorded exercises will then be shown in a table for the user to see. The commands includes:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `add-e` Command +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Users will be able to add exercises to the exercise table."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `edit-e` Command +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Users will be able to edit existing exercises."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `delete-e` Command +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Users will be able to delete existing exercises."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "** Justification: This feature improves the product significantly because recording the exercises of clients is one of the main features of the application. Many other features like showing the client\u0027s personal bests and drawing their clients\u0027 progression graph rely on having the exercises recorded."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "** Highlights: Many of the future features will require the exercise classes. Therefore, it is essential to have thorough considerations on how the classes are implemented. I also wrote a substantial amount of code to test the classes while practising good test case designs like boundary value analysis. This will help reduce further bugs when expanding the application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* *Major enhancement*: hooked many features from Logic to GUI"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "** What it does: features are shown in GUI instead of being shown in text format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "** Justification: In order for the application to be appealing and user-friendly, the features have to be properly displayed in the GUI. The features include:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- The exercise progession graph +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " This is one of the features that is proposed to really attract users. It is a step further from the user just recording his clients\u0027 exercises and having the user see the progression of his clients over a period of time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- The client\u0027s information displayed after `view-c` command +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "We have a separate component to show the client\u0027s detailed information. This helps to reduce the clients\u0027 information displayed in the `ClientCard` in `ClientListPanel`. The user can see the essential details of each client at a glance and only see the detailed information after a `view-c` command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- The exercise table done by the client +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "The user will be able to see the exercises done by their clients\u0027 listed in a table instead of being shown text in the `ResultDisplay`. This provides a better user experience."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "** Highlights: This enhancement requires a good understanding of Javafx. I have developed a good grasp at using it to provide GUI for Java application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- The exercise progession graph +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "I used `LineChart` from Javafx to display the graph. The X axis to be shown is date but JavaFx only provides `NumberAxis` and `CategoryAxis`. To display the axis as date, I used the `NumberAxis` but also had to use `setTickLabelFormatter()` to change the label from `epochDay` to date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- The client\u0027s information displayed after `view-c` command +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "There is a lot of information shown after `view-c` but only a limited space in the GUI. To solve this, I implemented `ScrollPane` so that the user can scroll to view the information."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- The exercise table done by the client +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "We decided it is best for the exercises to be viewed in a table form. To do so, I used `TableView` from Javafx."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* *Minor enhancement*: refactored the `Storage` component from AB3 to Fitbiz"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* *Minor enhancement*: added `Gender` and `Remarks` attributes to `Client`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dyonggiee\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dAaronCQL\u0026tabRepo\u003dAY1920S2-CS2103T-F11-2%2Fmain%5Bmaster%5D[RepoSense]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*** Wrote test code for exercise classes and commands to improve test coverage: https://github.com/AY1920S2-CS2103T-F11-2/main/pull/83[83], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/121[121], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/135[135], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/210[210], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/216/files[216], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/214[214]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*** Fix bugs:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F11-2/main/pull/232[232],"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*** Added https://github.com/AY1920S2-CS2103T-F11-2/main/blob/master/docs/UserGuide.adoc#command-summary[command summary] in User Guide : https://github.com/AY1920S2-CS2103T-F11-2/main/pull/86[86], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/236[236]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*** Wrote the implementation of exercise classes and commands in Developer Guide: https://github.com/AY1920S2-CS2103T-F11-2/main/pull/262[262]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*** Wrote the command guide for `list-c`, `add-e` and `edit-e` in User Guide: https://github.com/AY1920S2-CS2103T-F11-2/main/pull/227[227]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*** Changed `UI` and `Storage` diagrams of Developer Guide: https://github.com/AY1920S2-CS2103T-F11-2/main/pull/246[246], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/264[264]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*** Added manual testing for adding an exercise: https://github.com/AY1920S2-CS2103T-F11-2/main/pull/277[277]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103T-F11-2/main/pull/137[137,] https://github.com/AY1920S2-CS2103T-F11-2/main/pull/225[225]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class: https://github.com/AY1920S2-CS2103T-F09-2/main/issues/249[249], https://github.com/AY1920S2-CS2103T-F09-2/main/issues/250[250], https://github.com/AY1920S2-CS2103T-F09-2/main/issues/251[251]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfind-c]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "include::../UserGuide.adoc[tag\u003dadd-e]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "include::../UserGuide.adoc[tag\u003dedit-e]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsummary]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexercise]"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 82
    }
  },
  {
    "path": "docs/team/ziyingli.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d Li Zi Ying - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d PROJECT: FitBiz"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "FitBiz is a fitness business management application, specially made for fitness coaches to manage their clients. It is primarily a desktop application where the user interacts via the Command Line Interface (CLI), and views data via the Graphical User Interface (GUI). This project is written in Java 11, packaged using Gradle, and uses JavaFX for the GUI."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* *Major enhancement*: developed the graph feature, which allows users to conveniently plot and display the progress made by a client for a certain exercise over time. Users can immediately see if the client has improved for that exercise over the months."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** *What it does*: allows users to plot and display the graph of the specified exercise and specified y-axis from the stipulated start to end dates. Users have a choice of y-axis so that they can focus on one of the different attributes of an exercise, like the reps done or the weights lifted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** *Justification*: visualisation is always better than looking through a long list of exercises to check if a client has improved for an exercise. It is also much faster and easier to look at a graph to check for progress. The flexibility in axis type and dates also allows users to customise their graph to their needs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** *Highlights*: developed a `Graph` model that has an axis type, exercise name, start and end dates. Checks are also in place to make sure that there are data points to be plotted, else there will be an error message. Sanity checks like the check that the start date cannot be later then the end date are also implemented."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* *Major enhancement*: developed the personal best feature, which allows users to view the personal best records of their exercises immediately after keying in an exercise session."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** *What it does*: allows users to efficiently and conveniently access their clients\u0027 personal best while updating the personal best table whenever changes to the exercise table is made."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** *Justification*: instead of having to manually look through the entire exercise table to find a client\u0027s personal best, the personal best will be immediately displayed when the user views a certain client. Changes made to the client\u0027s exercise list will also be updated and displayed immediately."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** *Highlights*: this feature was made to provide convenience to the user so that they do not have to go through extra commands or look through the entire exercise list to find their client\u0027s personal best. This feature is also related to the graph feature as users will be able to see the progress of how a client achieves a personal best from the graph."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* *Minor enhancement*: hooked the `view-c` command to FitBiz and added relevant tests to FitBiz."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* *Minor enhancement*: added the height attribute to the `Client` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* *Overall contributions*: https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dziyingli\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[1.5K+ LOC] | https://github.com/AY1920S2-CS2103T-F11-2/main/graphs/contributors[90+ commits] | https://github.com/AY1920S2-CS2103T-F11-2/main/pulls?q\u003dis%3Apr+is%3Amerged+author%3Aziyingli[18 PRs merged] | https://github.com/AY1920S2-CS2103T-F11-2/main/pulls?q\u003dis%3Apr+reviewed-by%3Aziyingli[50+ PRs reviewed]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** *Project management*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*** Managed labels and issues on the GitHub issue tracker"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** *Enhancements to existing/teammates\u0027 features*:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*** Fixed command parameters and error messages of general features after the practical dry run https://github.com/AY1920S2-CS2103T-F11-2/main/pull/204[#204]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*** Fixed default value of an attribute a team member created for consistency https://github.com/AY1920S2-CS2103T-F11-2/main/pull/88[#88]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** *Documentation*:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*** Added the Personal Best Implementation, Graph Implementation, Use Cases and Manual Testing documentation to the Developer Guide https://github.com/AY1920S2-CS2103T-F11-2/main/pull/16[#16], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/203[#203], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/247[#247], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/276[#276], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/284[#284]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*** Edited Quick Start and added the View Command, Delete Client Command and Graph Command to the User Guide https://github.com/AY1920S2-CS2103T-F11-2/main/pull/75[#75], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/150[#150],  https://github.com/AY1920S2-CS2103T-F11-2/main/pull/270[#270]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "** *Summary*:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*** PRs reviewed with non-trivial review comments: https://github.com/AY1920S2-CS2103T-F11-2/main/pull/44[#44], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/83[#83], https://github.com/AY1920S2-CS2103T-F11-2/main/pull/229[#229]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*** Issues and bugs reported with non-trivial comments: https://github.com/AY1920S2-CS2103T-F11-2/main/issues/130[#130], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/211[#211], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/250[#250], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/257[#257]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "*** Issues resolved and bugs squashed with non-trivial implementations: https://github.com/AY1920S2-CS2103T-F11-2/main/issues/41[#41], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/81[#81], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/105[#105], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/124[#124], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/211[#211], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/235[#235] https://github.com/AY1920S2-CS2103T-F11-2/main/issues/250[#250], https://github.com/AY1920S2-CS2103T-F11-2/main/issues/257[#257]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete-c-command]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "include::../UserGuide.adoc[tag\u003dview-c-command]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "include::../UserGuide.adoc[tag\u003dgraph-command]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dziyingli]"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 67
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Changes the remark of an existing client in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the client identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"by the index number used in the last client listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param index of the client in the filtered client list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param remark of the client to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Dban1"
        },
        "content": "We achieve that by working with the `Client` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Each field in a Client is implemented as a separate class (e.g. a `Name` object represents the client\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Dban1"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a client."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Create a new `Remark` in `seedu.address.model.client`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each client."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".ClientCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Dban1"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.ClientCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Dban1"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/ClientListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d Modify `Client` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Since `ClientCard` displays data from a `Client`, we need to update `Client` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d Modify `Client`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Dban1"
        },
        "content": "We change the constructor of `Client` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Client`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Unfortunately, a change to `Client` will cause other commands to break, you will have to modify these commands to use the updated `Client`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Dban1"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Client` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Dban1"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedClient` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Let\u0027s update `JsonAdaptedClient` to work with our new `Client`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Now that we have finalized the `Client` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".ClientCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public ClientCard(Client client, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    remark.setText(client.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Dban1"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Client`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Since all fields in a `Client` are immutable, we create a new instance of a `Client` with the values that we want and save it with `Model#setClient()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Client: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Client: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedClient \u003d new Client(clientToEdit.getName(), clientToEdit.getPhone(), clientToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                clientToEdit.getAddress(), remark, clientToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedClient));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * {@code clientToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private String generateSuccessMessage(Client clientToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return String.format(message, clientToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "Dban1": 41,
      "-": 384
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Client` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Client`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "The `address` field in `Client` is actually an instance of the `seedu.address.model.client.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Other usages like in `EditClientDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditClientDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": ". Safe delete the field `address` in `EditClientDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "For example, removing the `address` field from the `Client` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "For example, there is a `$address` in each `ClientCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "A quick look at the `ClientCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".ClientCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".ClientCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".invalidClientAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dban1"
        },
        "content": "  \"clients\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    \"name\": \"Client with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "Dban1": 14,
      "-": 103
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "`seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Dban1"
        },
        "content": "command and store any possible changes in an `EditClientDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Dban1"
        },
        "content": "`editClientDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    Client clientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    Client editedClient \u003d createEditedClient(clientToEdit, editClientDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    if (!clientToEdit.isSameClient(editedClient) \u0026\u0026 model.hasClient(editedClient)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    model.setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_CLIENT_SUCCESS, editedClient));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    clients.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        source.getClientList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Dban1"
        },
        "content": "              .map(JsonAdaptedClient::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Dban1"
        },
        "content": ". It appears that a `JsonAdaptedClient` is created for each `Client` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Dban1"
        },
        "content": ".. Add a new field to `Client`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "Dban1": 14,
      "-": 244
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.storage.FitBizStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.storage.JsonFitBizStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FitBiz ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBizStorage fitBizStorage \u003d new JsonFitBizStorage(userPrefs.getFitBizFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        storage \u003d new StorageManager(fitBizStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ClientInView clientInView \u003d new ClientInView();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs, clientInView);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s FitBiz and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * The data from the sample FitBiz will be used instead if {@code storage}\u0027s FitBiz is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * or an empty FitBiz will be used instead if errors occur when reading {@code storage}\u0027s FitBiz."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs, ClientInView clientInView) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Optional\u003cReadOnlyFitBiz\u003e fitBizOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ReadOnlyFitBiz initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            fitBizOptional \u003d storage.readFitBiz();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (!fitBizOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample FitBiz\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            initialData \u003d fitBizOptional.orElseGet(SampleDataUtil::getSampleFitBiz);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FitBiz\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            initialData \u003d new FitBiz();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FitBiz\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            initialData \u003d new FitBiz();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new ModelManager(initialData, userPrefs, clientInView);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FitBiz\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        logger.info(\"Starting FitBiz \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping FitBiz ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 12,
      "AaronCQL": 17,
      "-": 156
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String LOG_FILE \u003d \"fitbiz.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX \u003d \"The client index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX \u003d \"The exercise index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_CLIENTS_LISTED_OVERVIEW \u003d \"%1$d clients listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 1,
      "Dban1": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/trie/Node.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.commons.trie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class represents a single node of the trie data structure."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class Node {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int SIZE_OF_ONE \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private char letter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Node parent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private HashMap\u003cCharacter, Node\u003e children;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private boolean isWordEnd;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Constructs the root {@code Node}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Node() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        children \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        isWordEnd \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        parent \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Constructs a child node {@code Node} with a parent node {@code parent}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param letter the letter that this new child contains"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param parent the parent node {@code Node} of this child, which must not be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *               {@code null}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Node(char letter, Node parent) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(parent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.letter \u003d letter;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.parent \u003d parent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        children \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        isWordEnd \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns {@code children}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public HashMap\u003cCharacter, Node\u003e getChildren() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return children;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true iff {@code children} is of size one."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean hasSingleChild() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return children.size() \u003d\u003d SIZE_OF_ONE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the only child of this node. {@code children} must only contain one"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * child child to start with."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Node getSingleChild() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assert hasSingleChild();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (Node node : children.values()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return node;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true iff {@code children} contains {@code letter}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean hasChild(char letter) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return children.containsKey(letter);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the child {@Node} in {@code children}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Node getChild(char letter) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return children.get(letter);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Adds a child {@code Node} to this {@code Node}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void addChild(Node child) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        children.put(child.getLetter(), child);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setIsWordEnd(boolean bool) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        isWordEnd \u003d bool;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean isWordEnd() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return isWordEnd;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public char getLetter() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return letter;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true iff @{code parent} is null, meaning that this node must be the"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * root node."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean isRoot() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return parent \u003d\u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Constructs the word by recursively going up the parent node."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return the constructed word string"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String constructWord() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (isRoot()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return EMPTY_STRING;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return parent.constructWord() + getLetter();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/trie/SimilarWordsResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.commons.trie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This is a wrapper class to hold the information returned by"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code Trie#listAllSimilarWords}. The member {@code longestPrefixString} will"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * contain the longest common prefix of the words in {@code similarWords}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class SimilarWordsResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public final String longestPrefixString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public final ArrayList\u003cString\u003e similarWords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public SimilarWordsResult(String longestPrefixString, ArrayList\u003cString\u003e similarWords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireAllNonNull(longestPrefixString, similarWords);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.longestPrefixString \u003d longestPrefixString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.similarWords \u003d similarWords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean hasNoResult() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return similarWords.isEmpty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean hasOnlyOneWord() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return similarWords.size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getSingleWord() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assert hasOnlyOneWord();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return similarWords.get(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getLongestPrefix() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return longestPrefixString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns a copy of the list {@code similarWords}, any modifications to this"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * returned list will not affect the original list {@code similarWords}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ArrayList\u003cString\u003e getSimilarWords() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new ArrayList\u003cString\u003e(similarWords);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/trie/Trie.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.commons.trie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class represents the trie data structure."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class Trie {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Node root;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Trie() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        root \u003d new Node();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Inserts the given string {@code word} into this trie."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void insert(String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node current \u003d root;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (char letter : word.toCharArray()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (current.hasChild(letter)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                current \u003d current.getChild(letter);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                Node newChild \u003d new Node(letter, current);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                current.addChild(newChild);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                current \u003d newChild;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        current.setIsWordEnd(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the {@code Node} whose constructed word (when constructed using"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code Node#constructWord()}) contain the longest common prefix of the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * argument {@code word} and all the words currently in this trie. If no such"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code Node} can be found, {@code null} is returned."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param word String to search for"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return a {@code Node} or {@null} if no such node can be found"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Node getLongestPrefixNode(String word) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node current \u003d root;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // this loop should end prematurely if word is not a proper substring"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (char letter : word.toCharArray()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (!current.hasChild(letter)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            current \u003d current.getChild(letter);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        while (current.hasSingleChild()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            current \u003d current.getSingleChild();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return current;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns a {@code SimilarWordsResult} object containing the list of similar"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * words in this trie that starts with the parameter {@code word}, and the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * longest common prefix of these words."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param word string to match"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return an object of type {@code SimilarWordsResult}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public SimilarWordsResult listAllSimilarWords(String word) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node longestPrefixNode \u003d getLongestPrefixNode(word);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ArrayList\u003cString\u003e similarWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node subtrie \u003d longestPrefixNode;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // case 1: longest prefix does not exist"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (subtrie \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return new SimilarWordsResult(EMPTY_STRING, similarWords);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // case 2: longest prefix is actually the completed word"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String longestPrefixString \u003d longestPrefixNode.constructWord();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (subtrie.isWordEnd()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            similarWords.add(longestPrefixString);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return new SimilarWordsResult(longestPrefixString, similarWords);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // case 3: longest prefix is not a completed word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // dfs to find all similar words that contain subtrie"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Stack\u003cNode\u003e stack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        stack.push(subtrie);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        while (!stack.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            Node current \u003d stack.pop();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (current.isWordEnd()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                similarWords.add(current.constructWord());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                stack.addAll(current.getChildren().values());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new SimilarWordsResult(longestPrefixString, similarWords);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/ExportUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class contains the logic behind the exporting of files."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class ExportUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String DEFAULT_EXPORTS_DIRECTORY \u003d \"exports\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String EXERCISE_CSV_HEADERS \u003d \"Date,Exercise Name,Reps,Weights,Sets\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Exports the provided list of {@code exercises} as a CSV file and saves it to"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * storage as {@code fileName}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param exercises client\u0027s exercises to export"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param fileName  name of the CSV file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws IOException if the file is unable to be saved"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static void exportExercisesAsCsv(List\u003cExercise\u003e exercises, String fileName) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Path filePath \u003d Paths.get(DEFAULT_EXPORTS_DIRECTORY, fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String csvContent \u003d EXERCISE_CSV_HEADERS + \"\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (Exercise e : exercises) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            String dateString \u003d e.getExerciseDate().displayValue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            String nameString \u003d e.getExerciseName().value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            String repsString \u003d e.getExerciseReps().value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            String weightString \u003d e.getExerciseWeight().value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            String setsString \u003d e.getExerciseSets().value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            String rowContent \u003d String.format(\"%s,%s,%s,%s,%s\\n\", dateString, nameString, repsString, weightString,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    setsString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            csvContent +\u003d rowContent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FileUtil.createFile(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FileUtil.writeToFile(filePath, csvContent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.autocomplete.Autocomplete;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.history.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleDay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns the FitBiz."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @see seedu.address.model.Model#getFitBiz()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    ReadOnlyFitBiz getFitBiz();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of clients"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    ObservableList\u003cClient\u003e getFilteredClientList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns all schedules across all clients according to the week day."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    ObservableList\u003cScheduleDay\u003e getScheduleDayList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns the client required by {@code ViewCommand} from {@code ModelManager}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggiee"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    Client getClientInView();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if there is a client in {@code clientInView} in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * {@code ModelManager}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggiee"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    Boolean hasClientInView();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the user prefs\u0027 FitBiz file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    Path getFitBizFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Opens the provided {@code url} in the user\u0027s default web browser."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param url website url to open"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void openUrlInDefaultWebBrowser(String url);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the {@code CommandHistory} object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    CommandHistory getCommandHistory();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the {@code Autocomplete} object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    Autocomplete getAutocomplete();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 15,
      "Dban1": 14,
      "AaronCQL": 25,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.autocomplete.Autocomplete;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.history.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.parser.FitBizParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleDay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final FitBizParser fitBizParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final CommandHistory commandHistory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Autocomplete autoComplete;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBizParser \u003d new FitBizParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        autoComplete \u003d new Autocomplete();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Command command \u003d fitBizParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            storage.saveFitBiz(model.getFitBiz());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ReadOnlyFitBiz getFitBiz() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return model.getFitBiz();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return model.getFilteredClientList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Client getClientInView() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return model.getClientInView();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Boolean hasClientInView() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return model.hasClientInView();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Path getFitBizFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return model.getFitBizFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ObservableList\u003cScheduleDay\u003e getScheduleDayList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return model.getScheduleDayList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void openUrlInDefaultWebBrowser(String url) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String os \u003d System.getProperty(\"os.name\").toLowerCase().substring(0, 3);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        logger.info(\"External URL : redirecting user to \" + url);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        switch (os) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case \"win\": // windows"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case \"mac\": // macOS"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (Desktop.isDesktopSupported() \u0026\u0026 Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    Desktop.getDesktop().browse(new URI(url));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                } catch (IOException | URISyntaxException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case \"lin\": // linux"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case \"uni\": // unix"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ProcessBuilder(\"x-www-browser\", url).start();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            logger.warning(\"External URL : failed to redirect user to \" + url);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public CommandHistory getCommandHistory() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return commandHistory;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Autocomplete getAutocomplete() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return autoComplete;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 9,
      "Dban1": 9,
      "AaronCQL": 59,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/autocomplete/Autocomplete.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIMITTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.commons.trie.SimilarWordsResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.commons.trie.Trie;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.GraphCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class contains the logic behind the autocomplete feature. It makes use"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * of {@code Trie} as the underlying data structure."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class Autocomplete {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String FEEDBACK_EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String FEEDBACK_MULTIPLE_COMMANDS \u003d \"Commands found:\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String FEEDBACK_NO_COMMANDS \u003d \"No commands found\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int CARET_POSITION_INDEX \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String WHITE_SPACE_STRING \u003d \" \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String PREAMBLE_WHITE_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Trie trie;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Default constructor for this class. Note that both {@code commandTextField}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * and {@code resultDisplay} must not be {@code null}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Autocomplete() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie \u003d new Trie();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        addAllCommands();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Adds all the commands included in FitBiz to {@code Trie}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void addAllCommands() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(AddExerciseCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(DeleteExerciseCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(EditExerciseCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(ExportCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(FilterCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(GraphCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(ScheduleCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(ViewCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns a string of {@code prefixes} delimited by a single empty space."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private String generatePrefixesString(List\u003cPrefix\u003e prefixes) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String toReturn \u003d EMPTY_STRING;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (Prefix p : prefixes) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            toReturn +\u003d WHITE_SPACE_STRING + p.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private AutocompleteResult noCommandHandler() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new AutocompleteResult(null, FEEDBACK_NO_COMMANDS, null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Handles the instance when the autocomplete can uniquely identify a single"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * This method will auto generate the prefixes for some commands like add-c,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * add-e, and schedule. The caret position will also be set to the most"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * appropriate position. The display of {@code ResultDisplay} will also indicate"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * the usage of the current completed command."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private AutocompleteResult singleCommandHandler(String command) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String textToSet \u003d command;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String textToFeedback \u003d FEEDBACK_EMPTY_STRING;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        int caretPositionToSet \u003d CARET_POSITION_INDEX;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d generatePrefixesString(AddCommand.PREFIXES);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d AddCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            caretPositionToSet \u003d textToSet.indexOf(PREFIX_DELIMITTER) + 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case AddExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d generatePrefixesString(AddExerciseCommand.PREFIXES);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d AddExerciseCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            caretPositionToSet \u003d textToSet.indexOf(PREFIX_DELIMITTER) + 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d ClearCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d PREAMBLE_WHITE_SPACE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d DeleteCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case DeleteExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d PREAMBLE_WHITE_SPACE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d DeleteExerciseCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d PREAMBLE_WHITE_SPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d EditCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d ExitCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d ExportCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case EditExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d PREAMBLE_WHITE_SPACE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d EditExerciseCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d generatePrefixesString(FilterCommand.PREFIXES);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d FilterCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            caretPositionToSet \u003d textToSet.indexOf(PREFIX_DELIMITTER) + 1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d PREAMBLE_WHITE_SPACE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d FindCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case GraphCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d generatePrefixesString(GraphCommand.PREFIXES);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d GraphCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            caretPositionToSet \u003d textToSet.indexOf(PREFIX_DELIMITTER) + 1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d HelpCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d ListCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d PREAMBLE_WHITE_SPACE + generatePrefixesString(ScheduleCommand.PREFIXES);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d ScheduleCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            caretPositionToSet \u003d textToSet.indexOf(PREAMBLE_WHITE_SPACE) + 1;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d PREAMBLE_WHITE_SPACE;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d ViewCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new AutocompleteResult(textToSet, textToFeedback, caretPositionToSet);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Handles the instance when the autocomplete cannot uniquely identify a single"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private AutocompleteResult multipleCommandsHandler(SimilarWordsResult result) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String textToSet \u003d result.getLongestPrefix();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String textToFeedback \u003d FEEDBACK_MULTIPLE_COMMANDS + result.getSimilarWords().toString();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        int caretPositionToSet \u003d CARET_POSITION_INDEX;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new AutocompleteResult(textToSet, textToFeedback, caretPositionToSet);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Handles the instance when the command has already been completed and the user"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * presses tab to get to the next prefix."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * This method will set the caret position of the user to the next"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code PREFIX_DELIMITTER} (with wraparound) when the user presses tab. If no"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * such {@code PREFIX_DELIMITTER} exists in the user\u0027s command, this method will"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * stop."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private AutocompleteResult completedCommandHandler(String currentCommand, int currentCaretPosition) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!currentCommand.contains(PREFIX_DELIMITTER)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return new AutocompleteResult(null, null, null);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        int nextPrefixPosition \u003d currentCommand.indexOf(PREFIX_DELIMITTER, currentCaretPosition);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (nextPrefixPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            // next prefix not found, wrap around to start"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            nextPrefixPosition \u003d currentCommand.indexOf(PREFIX_DELIMITTER) + 1;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            nextPrefixPosition++;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new AutocompleteResult(null, null, nextPrefixPosition);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Executes the main logic behind the autocomplete, and should be called when"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * the user presses \"tab\"."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public AutocompleteResult execute(String currentCommand, int currentCaretPosition) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String trimmedCommand \u003d currentCommand.trim();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // command word has already been completed"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (trimmedCommand.contains(WHITE_SPACE_STRING)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return completedCommandHandler(trimmedCommand, currentCaretPosition);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        SimilarWordsResult similarWords \u003d trie.listAllSimilarWords(trimmedCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (similarWords.hasNoResult()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return noCommandHandler();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (similarWords.hasOnlyOneWord()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return singleCommandHandler(similarWords.getSingleWord());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return multipleCommandsHandler(similarWords);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 238
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/autocomplete/AutocompleteResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This is a wrapper class to hold the information returned by"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code Autocomplete#execute}. The member {@code textToSet} and"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code caretPositionToSet} will contain the text and caret position to set"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * for the {@code CommandBox#commandTextField} respectively. The member"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code textToFeedback} will contain the text to set for the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code CommandBox#resultDisplay}. Null members indicate that they should not"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * be set or used by."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class AutocompleteResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String textToSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String textToFeedback;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Integer caretPositionToSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Default constructor for this class. Note that {@code null} values can be used"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * to denote that the field is empty."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public AutocompleteResult(String textToSet, String textToFeedback, Integer caretPositionToSet) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.textToSet \u003d textToSet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.textToFeedback \u003d textToFeedback;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.caretPositionToSet \u003d caretPositionToSet;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getTextToSet() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return textToSet;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getTextToFeedback() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return textToFeedback;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Integer getCaretPositionToSet() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return caretPositionToSet;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENT_WEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPORT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET_WEIGHT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Adds a client to the FitBiz."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final List\u003cPrefix\u003e PREFIXES \u003d List.of(PREFIX_NAME,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_GENDER,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            PREFIX_BIRTHDAY, PREFIX_CURRENT_WEIGHT, PREFIX_TARGET_WEIGHT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            PREFIX_HEIGHT, PREFIX_REMARK, PREFIX_SPORT, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-c\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a client to FitBiz. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"[\" + PREFIX_CURRENT_WEIGHT + \"CURRENT_WEIGHT] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"[\" + PREFIX_TARGET_WEIGHT + \"TARGET_WEIGHT] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_HEIGHT + \"HEIGHT] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"[\" + PREFIX_SPORT + \"SPORT]... \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_REMARK + \"REMARK]\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + PREFIX_GENDER + \"Male \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_BIRTHDAY + \"26-01-1980 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + PREFIX_CURRENT_WEIGHT + \"96 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_TARGET_WEIGHT + \"69 \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            + PREFIX_HEIGHT + \"156 \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + PREFIX_SPORT + \"Sumo Wrestling \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + PREFIX_TAG + \"Vegan \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + PREFIX_TAG + \"Lacks Protein \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + PREFIX_REMARK + \"History of back injuries\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New client added: %1$s\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This phone number and/or email already exists in FitBiz.\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"Clients must have different phone numbers and email addresses.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final Client toAdd;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Client}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public AddCommand(Client client) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        toAdd \u003d client;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (model.hasClient(toAdd)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.addClient(toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6,
      "ziyingli": 4,
      "tohkerwei": 2,
      "Dban1": 11,
      "AaronCQL": 23,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE_WEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SETS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.statistics.PersonalBestFinder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Adds an exercise done by a client to the exercise table(GUI)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class AddExerciseCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final List\u003cPrefix\u003e PREFIXES \u003d List.of(PREFIX_NAME,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            PREFIX_DATE, PREFIX_REPS, PREFIX_EXERCISE_WEIGHT, PREFIX_SETS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-e\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an exercise done by a client to \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \"the displayed Exercise Table. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \"Parameters: \" + PREFIX_NAME + \"EXERCISE_NAME \" + PREFIX_DATE + \"DATE \" + \"[\" + PREFIX_REPS + \"REPS] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \"[\" + PREFIX_EXERCISE_WEIGHT + \"EXERCISE_WEIGHT] \" + \"[\" + PREFIX_SETS + \"SETS]\\n\" + \"Example: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + COMMAND_WORD + \" \" + PREFIX_NAME + \"bench press \" + PREFIX_DATE + \"10-12-2020 \" + PREFIX_REPS + \"12 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + PREFIX_EXERCISE_WEIGHT + \"50 \" + PREFIX_SETS + \"8\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New exercise recorded:\\n%1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in this client. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"Consider incrementing the sets of that existing exercise.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_CLIENT_NOT_IN_VIEW \u003d \"You currently do not have a client in view, \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"use the view-c command to view a client first\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final Exercise toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Creates an AddExerciseCommand to add the specified {@code Exercise}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public AddExerciseCommand(Exercise exercise) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.toAdd \u003d exercise;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!model.hasClientInView()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new CommandException(MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Client clientToEdit \u003d model.getClientInView();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        UniqueExerciseList clientToEditExerciseList \u003d clientToEdit.getExerciseList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (clientToEditExerciseList.contains(toAdd)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client editedClient \u003d model.addExerciseToClient(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        PersonalBestFinder.generateAndSetPersonalBest(editedClient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getForOutput()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof AddExerciseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 toAdd.equals(((AddExerciseCommand) other).toAdd));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 57,
      "ziyingli": 3,
      "AaronCQL": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Clears the FitBiz."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes all data from FitBiz\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"FitBiz has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model.setFitBiz(new FitBiz());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.clearClientInView();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 2,
      "AaronCQL": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.graph.AxisType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final List\u003cExercise\u003e NO_GRAPH_LIST \u003d new ArrayList\u003cExercise\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final boolean openGraph;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final List\u003cExercise\u003e exerciseGraphList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final AxisType axisType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.openGraph \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseGraphList \u003d NO_GRAPH_LIST;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.axisType \u003d AxisType.NA;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public CommandResult(String feedbackToUser, AxisType axisType, List\u003cExercise\u003e exerciseGraphList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.openGraph \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseGraphList \u003d exerciseGraphList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.axisType \u003d axisType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean isOpenGraph() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return openGraph;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public List\u003cExercise\u003e getGraphList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return exerciseGraphList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public AxisType getAxisType() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return axisType;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 41,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Deletes a client identified using it\u0027s displayed index from the FitBiz."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-c\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \": Deletes the client identified by the index number used in the displayed client list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_DELETE_CLIENT_SUCCESS \u003d \"Deleted Client: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 8,
      "AaronCQL": 2,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.statistics.PersonalBestFinder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Deletes an {@code Exercise} identified using it\u0027s displayed index from the exercise table(GUI)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @author @yonggiee"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class DeleteExerciseCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \": Deletes the exercise identified by the index number used in the displayed Exercise Table.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted Exercise:\\n%1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_CLIENT_NOT_IN_VIEW \u003d \"You currently do not have a client in view, \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \"use the view-c command to view a client first\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public DeleteExerciseCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!model.hasClientInView()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new CommandException(MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client clientToEdit \u003d model.getClientInView();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList clientToEditExerciseList \u003d clientToEdit.getExerciseList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d clientToEditExerciseList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise toRemove \u003d clientToEditExerciseList.getExercise(targetIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // mutates the list belonging to the client by adding the exercise"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientToEditExerciseList.remove(toRemove);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        PersonalBestFinder.generateAndSetPersonalBest(clientToEdit);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toRemove.getForOutput()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof DeleteExerciseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 targetIndex.equals(((DeleteExerciseCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 66,
      "ziyingli": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENT_WEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPORT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET_WEIGHT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Birthday;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.CurrentWeight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.PersonalBest;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.TargetWeight;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Edits the details of an existing client in the FitBiz."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-c\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the client identified \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"by the index number used in the displayed client list. \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"[\" + PREFIX_CURRENT_WEIGHT + \"CURRENT_WEIGHT] \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"[\" + PREFIX_TARGET_WEIGHT + \"TARGET_WEIGHT] \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_HEIGHT + \"HEIGHT] \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"[\" + PREFIX_SPORT + \"SPORT]... \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_REMARK + \"REMARK]\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_BIRTHDAY + \"26-01-1980\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_HEIGHT + \"156\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_EDIT_CLIENT_SUCCESS \u003d \"Edited Client: %1$s\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This phone number and/or email already exists in FitBiz.\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"Clients must have different phone numbers and email addresses.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final EditClientDescriptor editClientDescriptor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param index                of the client in the filtered client list to edit"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param editClientDescriptor details to edit the client with"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditCommand(Index index, EditClientDescriptor editClientDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(editClientDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.editClientDescriptor \u003d new EditClientDescriptor(editClientDescriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Creates and returns a {@code Client} with the details of {@code clientToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * edited with {@code editClientDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static Client createEditedClient(Client clientToEdit, EditClientDescriptor editClientDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assert clientToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Name updatedName \u003d editClientDescriptor.getName().orElse(clientToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Gender updatedGender \u003d editClientDescriptor.getGender().orElse(clientToEdit.getGender());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Phone updatedPhone \u003d editClientDescriptor.getPhone().orElse(clientToEdit.getPhone());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Email updatedEmail \u003d editClientDescriptor.getEmail().orElse(clientToEdit.getEmail());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Address updatedAddress \u003d editClientDescriptor.getAddress().orElse(clientToEdit.getAddress());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editClientDescriptor.getTags().orElse(clientToEdit.getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Set\u003cSport\u003e updatedSport \u003d editClientDescriptor.getSports().orElse(clientToEdit.getSports());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Birthday updatedBirthday \u003d editClientDescriptor.getBirthday().orElse(clientToEdit.getBirthday());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Height updatedHeight \u003d editClientDescriptor.getHeight().orElse(clientToEdit.getHeight());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        CurrentWeight updatedCurrentWeight \u003d editClientDescriptor.getCurrentWeight()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .orElse(clientToEdit.getCurrentWeight());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        TargetWeight updatedTargetWeight \u003d editClientDescriptor.getTargetWeight()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .orElse(clientToEdit.getTargetWeight());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Remark updatedRemark \u003d editClientDescriptor.getRemark()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                .orElse(clientToEdit.getRemark());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        UniqueExerciseList exerciseList \u003d clientToEdit.getExerciseList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        PersonalBest personalBest \u003d clientToEdit.getPersonalBest();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ScheduleList scheduleList \u003d clientToEdit.getScheduleList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new Client(updatedName, updatedGender, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                updatedBirthday, updatedCurrentWeight, updatedTargetWeight, updatedHeight, updatedRemark, updatedSport,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                exerciseList, personalBest, scheduleList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedClient \u003d createEditedClient(clientToEdit, editClientDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (!clientToEdit.isSameClient(editedClient) \u0026\u0026 model.hasClient(editedClient)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.updateClientViewIfApplicable(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CLIENT_SUCCESS, editedClient));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editClientDescriptor.equals(e.editClientDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Stores the details to edit the client with. Each non-empty field value will"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * replace the corresponding field value of the client."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static class EditClientDescriptor {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        private Birthday birthday;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        private Height height;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        private CurrentWeight currentWeight;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        private TargetWeight targetWeight;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        private Set\u003cSport\u003e sport;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public EditClientDescriptor() {}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public EditClientDescriptor(EditClientDescriptor toCopy) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            setBirthday(toCopy.birthday);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            setHeight(toCopy.height);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            setCurrentWeight(toCopy.currentWeight);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            setTargetWeight(toCopy.targetWeight);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            setSports(toCopy.sport);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, gender, phone, email, address, tags, birthday,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                    currentWeight, targetWeight, height, sport, remark);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public Optional\u003cBirthday\u003e getBirthday() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return Optional.ofNullable(birthday);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public void setBirthday(Birthday birthday) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        public Optional\u003cHeight\u003e getHeight() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return Optional.ofNullable(height);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        public void setHeight(Height height) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            this.height \u003d height;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public Optional\u003cCurrentWeight\u003e getCurrentWeight() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Optional.ofNullable(currentWeight);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void setCurrentWeight(CurrentWeight currentWeight) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.currentWeight \u003d currentWeight;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public Optional\u003cTargetWeight\u003e getTargetWeight() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Optional.ofNullable(targetWeight);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void setTargetWeight(TargetWeight targetWeight) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.targetWeight \u003d targetWeight;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "         * Returns an unmodifiable sport set, which throws"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "         * {@code UnsupportedOperationException} if modification is attempted. Returns"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "         * {@code Optional#empty()} if {@code sports} is null."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public Optional\u003cSet\u003cSport\u003e\u003e getSports() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            return (sport !\u003d null) ? Optional.of(Collections.unmodifiableSet(sport)) : Optional.empty();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "         * Sets {@code sports} to this object\u0027s {@code sports}. A defensive copy of"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "         * {@code sports} is used internally."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void setSports(Set\u003cSport\u003e sport) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            this.sport \u003d (sport !\u003d null) ? new HashSet\u003c\u003e(sport) : null;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * Returns an unmodifiable tag set, which throws"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * {@code UnsupportedOperationException} if modification is attempted. Returns"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * {@code tags} is used internally."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Dban1"
        },
        "content": "         */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            if (!(other instanceof EditClientDescriptor)) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            EditClientDescriptor e \u003d (EditClientDescriptor) other;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                    \u0026\u0026 getBirthday().equals(e.getBirthday())"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                    \u0026\u0026 getHeight().equals(e.getHeight())"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    \u0026\u0026 getCurrentWeight().equals(e.getCurrentWeight())"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                    \u0026\u0026 getTargetWeight().equals(e.getTargetWeight())"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                    \u0026\u0026 getRemark().equals(e.getRemark())"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    \u0026\u0026 getSports().equals(e.getSports());"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 34,
      "ziyingli": 22,
      "tohkerwei": 20,
      "Dban1": 59,
      "AaronCQL": 48,
      "-": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE_WEIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SETS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.statistics.PersonalBestFinder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseSets;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Edits the details of an existing exercise done by the client in view"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * in the exercise table(GUI)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class EditExerciseCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-e\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the exercise identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"by the target index number used in the displayed Exercise Table. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"There must be a client in view. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_REPS + \"REPS] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_SETS + \"SETS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_EXERCISE_WEIGHT + \"WEIGHT]\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + PREFIX_NAME + \"pushup \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + PREFIX_REPS + \"20\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_EDIT_EXERCISE_SUCCESS \u003d \"Edited Exercise:\\n%1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in FitBiz. \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \"Consider incrementing the sets of that existing exercise.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_CLIENT_NOT_IN_VIEW \u003d \"You currently do not have a client in view, \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \"use the view-c command to view a client first\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final EditExerciseDescriptor editExerciseDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param targetIndex               of the exercise in the exercise table to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param editExerciseDescriptor details to edit the exercise with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseCommand(Index targetIndex, EditExerciseDescriptor editExerciseDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(editExerciseDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.editExerciseDescriptor \u003d new EditExerciseDescriptor(editExerciseDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Creates and returns a {@code Exercise} with the details of {@code exerciseToEdit}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * edited with {@code editExerciseDescriptor}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static Exercise createEditedExercise(Exercise exerciseToEdit,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseDescriptor editExerciseDescriptor) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assert exerciseToEdit !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseName updatedName \u003d editExerciseDescriptor.getExerciseName().orElse(exerciseToEdit.getExerciseName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseReps updatedReps \u003d editExerciseDescriptor.getExerciseReps().orElse(exerciseToEdit.getExerciseReps());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseSets updatedSets \u003d editExerciseDescriptor.getExerciseSets().orElse(exerciseToEdit.getExerciseSets());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseWeight updatedWeight \u003d editExerciseDescriptor.getExerciseWeight()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .orElse(exerciseToEdit.getExerciseWeight());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseDate updatedDate \u003d editExerciseDescriptor.getExerciseDate().orElse(exerciseToEdit.getExerciseDate());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new Exercise(updatedName, updatedReps, updatedSets, updatedWeight, updatedDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!model.hasClientInView()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new CommandException(MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client clientInView \u003d model.getClientInView();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList clientToEditExerciseList \u003d clientInView.getExerciseList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d clientToEditExerciseList.size()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise exerciseToEdit \u003d clientToEditExerciseList.getExercise(targetIndex);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise editedExercise \u003d createEditedExercise(exerciseToEdit, editExerciseDescriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!exerciseToEdit.isSameExercise(editedExercise)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u0026\u0026 clientToEditExerciseList.contains(editedExercise)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.editExercise(exerciseToEdit, editedExercise);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        PersonalBestFinder.generateAndSetPersonalBest(clientInView);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise.getForOutput()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseCommand e \u003d (EditExerciseCommand) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return targetIndex.equals(e.targetIndex) \u0026\u0026 editExerciseDescriptor.equals(e.editExerciseDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Stores the details to edit the exercise with. Each non-empty field value will"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * replace the corresponding field value of the client."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static class EditExerciseDescriptor {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        private ExerciseName exerciseName;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        private ExerciseReps exerciseReps;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        private ExerciseSets exerciseSets;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        private ExerciseWeight exerciseWeight;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        private ExerciseDate exerciseDate;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public EditExerciseDescriptor() {}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public EditExerciseDescriptor(EditExerciseDescriptor toCopy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            setExerciseName(toCopy.exerciseName);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            setExerciseReps(toCopy.exerciseReps);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            setExerciseSets(toCopy.exerciseSets);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            setExerciseWeight(toCopy.exerciseWeight);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            setExerciseDate(toCopy.exerciseDate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return CollectionUtil.isAnyNonNull(exerciseName, exerciseReps, exerciseSets, exerciseWeight, exerciseDate);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public Optional\u003cExerciseName\u003e getExerciseName() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return Optional.ofNullable(exerciseName);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void setExerciseName(ExerciseName exerciseName) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            this.exerciseName \u003d exerciseName;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public Optional\u003cExerciseReps\u003e getExerciseReps() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return Optional.ofNullable(exerciseReps);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void setExerciseReps(ExerciseReps exerciseReps) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            this.exerciseReps \u003d exerciseReps;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public Optional\u003cExerciseSets\u003e getExerciseSets() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return Optional.ofNullable(exerciseSets);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void setExerciseSets(ExerciseSets exerciseSets) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            this.exerciseSets \u003d exerciseSets;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public Optional\u003cExerciseWeight\u003e getExerciseWeight() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return Optional.ofNullable(exerciseWeight);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void setExerciseWeight(ExerciseWeight exerciseWeight) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            this.exerciseWeight \u003d exerciseWeight;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public Optional\u003cExerciseDate\u003e getExerciseDate() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return Optional.ofNullable(exerciseDate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void setExerciseDate(ExerciseDate exerciseDate) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            this.exerciseDate \u003d exerciseDate;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            if (!(other instanceof EditExerciseDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            EditExerciseDescriptor e \u003d (EditExerciseDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return getExerciseName().equals(e.getExerciseName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u0026\u0026 getExerciseReps().equals(e.getExerciseReps())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u0026\u0026 getExerciseSets().equals(e.getExerciseSets())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u0026\u0026 getExerciseWeight().equals(e.getExerciseWeight())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u0026\u0026 getExerciseDate().equals(e.getExerciseDate());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 226,
      "ziyingli": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": exits FitBiz\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting FitBiz as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.commons.util.ExportUtil.DEFAULT_EXPORTS_DIRECTORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.commons.util.ExportUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Exports the exercises of the current client in view defined in"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code ClientInView}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String CSV_FILE_EXTENSION \u003d \".csv\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports the exercises of the client in view.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Succesfully exported this client\u0027s exercises to \\\"%s\\\".\\n\" + String"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            .format(\"Please check your /%s folder, which should be located in the same directory as FitBiz.jar.\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    DEFAULT_EXPORTS_DIRECTORY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_FAILED \u003d \"Failed to export this client\u0027s exercises. Please try again.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_CLIENT_NOT_IN_VIEW \u003d \"You currently do not have a client in view, \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"use the view-c command to view a client first\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_NO_EXERCISES \u003d \"This client currently does not have any exercises to export.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!model.hasClientInView()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new CommandException(MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Client clientInView \u003d model.getClientInView();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        List\u003cExercise\u003e exercises \u003d clientInView.getExerciseList().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (exercises.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new CommandException(MESSAGE_NO_EXERCISES);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String fileName \u003d clientInView.getName().fullName + CSV_FILE_EXTENSION;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            ExportUtil.exportExercisesAsCsv(exercises, fileName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new CommandException(MESSAGE_FAILED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, fileName));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.TagAndSportContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * @author tohkerwei"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Filters and lists all clients in FitBiz whose tag or sports contains argument keywords for the respective parameters."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final List\u003cPrefix\u003e PREFIXES \u003d List.of(PREFIX_TAG, PREFIX_SPORT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter-c\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters and display all clients whose tags or sports \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            + \"contains any of the specified keywords for respective parameter (case-insensitive) \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            + \"Parameters: t/KEYWORD... s/KEYWORD...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_TAG + \"normal\" + \" \" + PREFIX_SPORT + \"hockey\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final TagAndSportContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public FilterCommand(TagAndSportContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        model.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                String.format(Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW, model.getFilteredClientList().size()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 46,
      "AaronCQL": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Finds and lists all clients in FitBiz whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all clients whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                String.format(Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW, model.getFilteredClientList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 4,
      "AaronCQL": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GraphCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AXIS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.Graph;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Displays a graph of exercises done by a client in FitBiz."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class GraphCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final List\u003cPrefix\u003e PREFIXES \u003d List.of(PREFIX_EXERCISE_NAME, PREFIX_AXIS,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            PREFIX_STARTDATE, PREFIX_ENDDATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"graph\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the graph of a specified exercise \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"of the client currently in view. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"Start date cannot be after end date. \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_EXERCISE_NAME + \"EXERCISE_NAME \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_AXIS + \"Y_AXIS \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_STARTDATE + \"START_DATE \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_ENDDATE + \"END_DATE \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_EXERCISE_NAME + \"push up \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_AXIS + \"reps \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_STARTDATE + \"01-01-2020 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_ENDDATE + \"01-04-2020\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showing exercise graph for %1$s\u0027s %2$s from %3$s to %4$s. \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"Note that any new updates to the exercises (via add-e, edit-e, delete-e) will not be reflected \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"on the current graph.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_CLIENT_NOT_IN_VIEW \u003d \"You currently do not have a client in view, \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        + \"use the view-c command to view a client first\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_EXERCISE_NOT_IN_LIST \u003d \"Graph cannot be plotted as no such exercise is\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \" recorded for this client from %1$s to %2$s.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_NO_GRAPH_FOR_AXIS \u003d \"There is no graph to plot for this axis specified. \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"Please choose a different axis or a different exercise.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private final Graph graph;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public GraphCommand(Graph graph) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(graph);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.graph \u003d graph;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static boolean isValidTimeFrame(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return (endDate.compareTo(startDate) \u003e\u003d 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!model.hasClientInView()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new CommandException(MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Client clientInView \u003d model.getClientInView();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        UniqueExerciseList clientInViewExerciseList \u003d clientInView.getExerciseList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!clientInViewExerciseList.containsNameWithinDate(graph.getExerciseName(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                graph.getStartDate(), graph.getEndDate())) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_EXERCISE_NOT_IN_LIST,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                    graph.getStartDate(), graph.getEndDate()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        List\u003cExercise\u003e graphList \u003d graph.generateGraphList(clientInView);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (graphList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new CommandException(MESSAGE_NO_GRAPH_FOR_AXIS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, clientInView.getName().toString(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            graph.getExerciseName().toString(), graph.getStartDate().toString(), graph.getEndDate().toString()),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            graph.getAxis().getAxisType(), graphList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!(other instanceof GraphCommand)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        GraphCommand e \u003d (GraphCommand) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return graph.equals(e.graph);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return graph.getExerciseName().value"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \" \" + graph.getAxis().value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \" \" + graph.getStartDate().toString()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \" \" + graph.getEndDate().toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 2,
      "ziyingli": 115,
      "AaronCQL": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String USER_GUIDE_URL \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            \"https://ay1920s2-cs2103t-f11-2.github.io/main/UserGuide.html#view-help-code-help-code\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Redirects to FitBiz user guide\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"You should have been redirected to the FitBiz user guide\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \" website. If not, please visit the following URL:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + USER_GUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 7,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Lists all clients in FitBiz to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-c\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all clients\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all clients in FitBiz\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 3,
      "AaronCQL": 3,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScheduleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Adds the training schedule of the client in FitBiz."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final List\u003cPrefix\u003e PREFIXES \u003d List.of(PREFIX_SCHEDULE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds the training schedule of the client, identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            + \"by the index number used in the displayed client list. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"The schedule should include the first 3 letters of the day, \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"start and end time in 24 hour format, \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"in 1-minute denominations. Multiple training schedule can be added to a client.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"Parameters: INDEX (a positive integer) sch/DAY-START_TIME-END_TIME\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 sch/MON-1100-1200\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_INVALID_ARG_COUNT \u003d \"Invalid number of arguments found for adding schedules.\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"Please check you have entered the right amount of Day(s), Start Time(s) and End Time(s). You have\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \" entered %1$s Day(s), %2$s Start Time(s), %3$s End Time(s).\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_CONTAINS_DUPLICATES \u003d \"One or more of your input schedules have overlapping\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \" time periods. Please check again.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$.15s\u0027s overall schedule has been changed to: \\n%2$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_CLEARED \u003d \"%1$.15s\u0027s schedule has been cleared.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final ArrayList\u003cSchedule\u003e toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public ScheduleCommand(Index index, ArrayList\u003cSchedule\u003e scheduleList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(scheduleList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.toAdd \u003d scheduleList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ScheduleList newScheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        newScheduleList.setSchedule(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Client editedClient \u003d new Client(clientToEdit.getName(), clientToEdit.getGender(), clientToEdit.getPhone(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                clientToEdit.getEmail(), clientToEdit.getAddress(), clientToEdit.getTags(), clientToEdit.getBirthday(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                clientToEdit.getCurrentWeight(), clientToEdit.getTargetWeight(), clientToEdit.getHeight(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                clientToEdit.getRemark(), clientToEdit.getSports(), clientToEdit.getExerciseList(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                clientToEdit.getPersonalBest(), newScheduleList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // if toAdd is empty, meaning the schedule has been cleared"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (toAdd.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            assert(toAdd.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CLEARED, editedClient.getName().fullName));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedClient.getName().fullName,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                editedClient.getScheduleList().toString()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                || (other instanceof ScheduleCommand // instance of handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ScheduleCommand) other).toAdd)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                \u0026\u0026 index.equals(((ScheduleCommand) other).index));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 1,
      "tohkerwei": 47,
      "Dban1": 41,
      "AaronCQL": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.statistics.PersonalBestFinder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Displays all details of a client from FitBiz, denoted by index in list view."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view-c\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \": View all available information of the client identified by the index number used in \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"the displayed client list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Currently viewing: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public ViewCommand(Index index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Client client \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model.setClientInView(client);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        PersonalBestFinder.generateAndSetPersonalBest(client);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, client.getName().fullName));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!(other instanceof ViewCommand)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ViewCommand e \u003d (ViewCommand) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 55,
      "AaronCQL": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/history/CommandHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.CommandHistoryState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class contains the logic behind the command history feature and exposes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * the necessary methods needed for this feature to work."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CommandHistory.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final Path DEFAULT_STORAGE_FILE_PATH \u003d Paths.get(\"data\", \"command.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_FILE_CONTENT \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Path storagePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private CommandHistoryState historyState;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Default constructor for this class which uses the default storage file path"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * for the storage file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this(DEFAULT_STORAGE_FILE_PATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Overloaded constructor for this class which allows the storage file path for"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * the storage file to be set. Provided for ease of JUnit testing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public CommandHistory(Path storagePath) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(storagePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.storagePath \u003d storagePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            FileUtil.createIfMissing(storagePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            String stateString \u003d FileUtil.readFromFile(storagePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            historyState \u003d new CommandHistoryState(storageStringToStateList(stateString));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            logger.info(\"Command History : successfully initialised command history\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            // create the state anyways, in order to still use it even if storage is broken"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            historyState \u003d new CommandHistoryState(List.of(EMPTY_FILE_CONTENT));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            logger.warning(\"Command History : failed to read command history from storage\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            System.out.println(ex.getStackTrace());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Converts the storage text file into a list of strings where each new line in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * the text file represents an element in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public List\u003cString\u003e storageStringToStateList(String lines) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return Arrays.asList(lines.split(\"\\n\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Converts the model list into a string where each item in the list is"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * delimitted by a new line in the joined string."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String stateListToStorageString(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return String.join(\"\\n\", list);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Adds the user input to the history, saving it to both the model via"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code CommandHistoryState} and the storage via {@code FileUtil}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param command user input command to store"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void addToHistory(String command) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            FileUtil.writeToFile(storagePath, stateListToStorageString(historyState.getCurrentState()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            logger.warning(\"Command History : failed to write command history to storage\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            System.out.println(ex.getStackTrace());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the previous (least recent) command while browsing the history."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getPreviousCommand() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return historyState.getPreviousCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the next (most recent) command while browsing the history."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getNextCommand() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return historyState.getNextCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Clears both the model via {@code CommandHistoryState} and the storage file"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * via {@code FileUtil}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void clearHistory() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            FileUtil.writeToFile(storagePath, EMPTY_FILE_CONTENT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            logger.warning(\"Command History : failed to clear command history from storage\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            System.out.println(ex.getStackTrace());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENT_WEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPORT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET_WEIGHT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Birthday;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.CurrentWeight;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.PersonalBest;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.TargetWeight;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String EMPTY_ATTRIBUTE \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                PREFIX_GENDER, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                PREFIX_TAG, PREFIX_BIRTHDAY, PREFIX_CURRENT_WEIGHT, PREFIX_TARGET_WEIGHT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                PREFIX_HEIGHT, PREFIX_REMARK, PREFIX_SPORT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Optional\u003cString\u003e genderString \u003d argMultimap.getValue(PREFIX_GENDER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Gender gender \u003d genderString.isPresent()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ? ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                : new Gender(EMPTY_ATTRIBUTE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // start of optional attributes"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Optional\u003cString\u003e birthdayString \u003d argMultimap.getValue(PREFIX_BIRTHDAY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Birthday birthday \u003d birthdayString.isPresent()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ? ParserUtil.parseBirthday(birthdayString.get())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                : new Birthday(EMPTY_ATTRIBUTE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Optional\u003cString\u003e heightString \u003d argMultimap.getValue(PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Height height \u003d heightString.isPresent()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ? ParserUtil.parseHeight(heightString.get())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                : new Height(EMPTY_ATTRIBUTE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Optional\u003cString\u003e currentWeightString \u003d argMultimap.getValue(PREFIX_CURRENT_WEIGHT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        CurrentWeight currentWeight \u003d currentWeightString.isPresent()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                ? ParserUtil.parseCurrentWeight(currentWeightString.get())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                : new CurrentWeight(EMPTY_ATTRIBUTE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Optional\u003cString\u003e targetWeightString \u003d argMultimap.getValue(PREFIX_TARGET_WEIGHT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        TargetWeight targetWeight \u003d targetWeightString.isPresent()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                ? ParserUtil.parseTargetWeight(targetWeightString.get())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                : new TargetWeight(EMPTY_ATTRIBUTE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Optional\u003cString\u003e remarkString \u003d argMultimap.getValue(PREFIX_REMARK);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Remark remark \u003d remarkString.isPresent()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ? ParserUtil.parseRemark(remarkString.get())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                : new Remark(EMPTY_ATTRIBUTE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Set\u003cSport\u003e sportList \u003d ParserUtil.parseSports(argMultimap.getAllValues(PREFIX_SPORT));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        UniqueExerciseList exerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        PersonalBest personalBest \u003d new PersonalBest();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ScheduleList scheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Client client \u003d new Client(name, gender, phone, email, address, tagList, birthday,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                currentWeight, targetWeight, height, remark, sportList, exerciseList, personalBest,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                scheduleList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new AddCommand(client);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 19,
      "ziyingli": 8,
      "tohkerwei": 5,
      "Dban1": 11,
      "AaronCQL": 25,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddExerciseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE_WEIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SETS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseSets;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Parses input arguments and creates a new AddExerciseCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class AddExerciseCommandParser implements Parser\u003cAddExerciseCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * AddExerciseCommand and returns an AddExerciseCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public AddExerciseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_REPS,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            PREFIX_EXERCISE_WEIGHT, PREFIX_SETS, PREFIX_DATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseName name \u003d ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Optional\u003cString\u003e repsString \u003d argMultimap.getValue(PREFIX_REPS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseReps reps \u003d repsString.isPresent()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            ? ParserUtil.parseExerciseReps(argMultimap.getValue(PREFIX_REPS).get())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            : new ExerciseReps(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Optional\u003cString\u003e exerciseWeightString \u003d argMultimap.getValue(PREFIX_EXERCISE_WEIGHT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseWeight exerciseWeight \u003d exerciseWeightString.isPresent()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            ? ParserUtil.parseExerciseWeight(argMultimap.getValue(PREFIX_EXERCISE_WEIGHT).get())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            : new ExerciseWeight(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Optional\u003cString\u003e setsString \u003d argMultimap.getValue(PREFIX_SETS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseSets sets \u003d setsString.isPresent()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            ? ParserUtil.parseExerciseSets(argMultimap.getValue(PREFIX_SETS).get())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            : new ExerciseSets(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseDate date \u003d ParserUtil.parseExerciseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise exercise \u003d new Exercise(name, reps, sets, exerciseWeight, date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new AddExerciseCommand(exercise);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 66,
      "AaronCQL": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String PREFIX_DELIMITTER \u003d \"/\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d client \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final Prefix PREFIX_HEIGHT \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final Prefix PREFIX_SPORT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final Prefix PREFIX_TARGET_WEIGHT \u003d new Prefix(\"tw/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final Prefix PREFIX_CURRENT_WEIGHT \u003d new Prefix(\"cw/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d exercise \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Prefix PREFIX_REPS \u003d new Prefix(\"reps/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Prefix PREFIX_SETS \u003d new Prefix(\"sets/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Prefix PREFIX_EXERCISE_WEIGHT \u003d new Prefix(\"ew/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Prefix PREFIX_DAY \u003d new Prefix(\"day/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d schedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Prefix PREFIX_SCHEDULE \u003d new Prefix(\"sch/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d graph \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final Prefix PREFIX_EXERCISE_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final Prefix PREFIX_AXIS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final Prefix PREFIX_STARTDATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final Prefix PREFIX_ENDDATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 9,
      "ziyingli": 6,
      "tohkerwei": 3,
      "Dban1": 5,
      "AaronCQL": 4,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteExerciseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Parses input arguments and creates a new DeleteExerciseCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @author @yonggiee"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class DeleteExerciseCommandParser implements Parser\u003cDeleteExerciseCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * DeleteExerciseCommand and returns a DeleteExerciseCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public DeleteExerciseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new DeleteExerciseCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                DeleteExerciseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENT_WEIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPORT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET_WEIGHT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_BIRTHDAY, PREFIX_CURRENT_WEIGHT, PREFIX_TARGET_WEIGHT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                        PREFIX_HEIGHT, PREFIX_REMARK, PREFIX_SPORT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand.EditClientDescriptor editClientDescriptor \u003d new EditClientDescriptor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            editClientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            editClientDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            editClientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            editClientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            editClientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BIRTHDAY).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            editClientDescriptor.setBirthday(ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (argMultimap.getValue(PREFIX_HEIGHT).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            editClientDescriptor.setHeight(ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CURRENT_WEIGHT).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            editClientDescriptor.setCurrentWeight(ParserUtil.parseCurrentWeight(argMultimap"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    .getValue(PREFIX_CURRENT_WEIGHT).get()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TARGET_WEIGHT).isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            editClientDescriptor.setTargetWeight(ParserUtil.parseTargetWeight(argMultimap"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    .getValue(PREFIX_TARGET_WEIGHT).get()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            editClientDescriptor.setRemark(ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editClientDescriptor::setTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        parseSportForEdit(argMultimap.getAllValues(PREFIX_SPORT)).ifPresent(editClientDescriptor::setSports);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (!editClientDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new EditCommand(index, editClientDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e sports} into a {@code Set\u003cSport\u003e} if {@code sports} is non-empty."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * If {@code sports} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * {@code Set\u003cSport\u003e} containing zero sports."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private Optional\u003cSet\u003cSport\u003e\u003e parseSportForEdit(Collection\u003cString\u003e sport) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assert sport !\u003d null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (sport.isEmpty()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Collection\u003cString\u003e sportSet \u003d sport.size() \u003d\u003d 1 \u0026\u0026 sport.contains(\"\") ? Collections.emptySet() : sport;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return Optional.of(ParserUtil.parseSports(sportSet));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 7,
      "ziyingli": 5,
      "tohkerwei": 18,
      "Dban1": 14,
      "AaronCQL": 12,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditExerciseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE_WEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SETS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Parses input arguments and creates a new EditExerciseCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class EditExerciseCommandParser implements Parser\u003cEditExerciseCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * EditExerciseCommand and returns an EditExerciseCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            args, PREFIX_NAME, PREFIX_REPS, PREFIX_SETS, PREFIX_EXERCISE_WEIGHT, PREFIX_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExerciseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseCommand.EditExerciseDescriptor editExerciseDescriptor \u003d new EditExerciseDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            editExerciseDescriptor.setExerciseName("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REPS).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            editExerciseDescriptor.setExerciseReps("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ParserUtil.parseExerciseReps(argMultimap.getValue(PREFIX_REPS).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SETS).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            editExerciseDescriptor.setExerciseSets("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ParserUtil.parseExerciseSets(argMultimap.getValue(PREFIX_SETS).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EXERCISE_WEIGHT).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            editExerciseDescriptor.setExerciseWeight("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ParserUtil.parseExerciseWeight(argMultimap.getValue(PREFIX_EXERCISE_WEIGHT).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            editExerciseDescriptor.setExerciseDate("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ParserUtil.parseExerciseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!editExerciseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException(EditExerciseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new EditExerciseCommand(index, editExerciseDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.TagAndSportContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @author tohkerwei"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * and returns a FilterCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG, PREFIX_SPORT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        boolean hasTag \u003d argMultimap.getValue(PREFIX_TAG).isPresent();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        boolean hasSport \u003d argMultimap.getValue(PREFIX_SPORT).isPresent();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!hasTag \u0026\u0026 !hasSport) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        List\u003cString\u003e tags \u003d getTagsFromMap(argMultimap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        List\u003cString\u003e sports \u003d getSportsFromMap(argMultimap);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return new FilterCommand(new TagAndSportContainsKeywordsPredicate(tags, sports));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Returns a list of string of tags"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param argMultimap map of input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return List of strings of tags"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws ParseException if there are no tags"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public List\u003cString\u003e getTagsFromMap(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        List\u003cString\u003e tags \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (Tag tag : tagSet) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            tags.add(tag.tagName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Returns a list of strings of sports"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param argMultimap map of input"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return List of strings of sports"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws ParseException if there are no sports"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public List\u003cString\u003e getSportsFromMap(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Set\u003cSport\u003e sportSet \u003d ParserUtil.parseSports(argMultimap.getAllValues(PREFIX_SPORT));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        List\u003cString\u003e sports \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (Sport sport : sportSet) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            String[] sportString \u003d sport.sportName.split(\" \", 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            sports.addAll(Arrays.asList(sportString));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return sports;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FitBizParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.commands.GraphCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class FitBizParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return new ExportCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case AddExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new AddExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case EditExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new EditExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case DeleteExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new DeleteExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        case GraphCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return new GraphCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 12,
      "ziyingli": 8,
      "tohkerwei": 4,
      "Dban1": 4,
      "AaronCQL": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GraphCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AXIS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.commands.GraphCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.Axis;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.EndDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.Graph;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.StartDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Parses input arguments and creates a new GraphCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class GraphCommandParser implements Parser\u003cGraphCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * GraphCommand and returns an GraphCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public GraphCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_EXERCISE_NAME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                PREFIX_AXIS, PREFIX_STARTDATE, PREFIX_ENDDATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EXERCISE_NAME, PREFIX_AXIS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                PREFIX_STARTDATE, PREFIX_ENDDATE)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GraphCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ExerciseName exerciseName \u003d ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_EXERCISE_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Axis axis \u003d ParserUtil.parseAxis(argMultimap.getValue(PREFIX_AXIS).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        StartDate startDate \u003d ParserUtil.parseStartDate(argMultimap.getValue(PREFIX_STARTDATE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        EndDate endDate \u003d ParserUtil.parseEndDate(argMultimap.getValue(PREFIX_ENDDATE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!GraphCommand.isValidTimeFrame(startDate.value, endDate.value)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GraphCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Graph graph \u003d new Graph(exerciseName, axis, startDate, endDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return new GraphCommand(graph);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Birthday;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.CurrentWeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.TargetWeight;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseSets;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.Axis;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.EndDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.StartDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Day;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.EndTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.StartTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String EMPTY_ATTRIBUTE \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final int DAY_INDEX \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final int START_INDEX \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final int END_INDEX \u003d 2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses a {@code String remark} into an {@code Remark}. Leading and trailing"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the given {@code remark} is invalid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static Remark parseRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses a {@code String gender} into an {@code Gender}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String trimmedGenderInLowercase \u003d trimmedGender.toLowerCase();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        switch (trimmedGenderInLowercase) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case \"male\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case \"m\":"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new Gender(\"Male\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case \"female\":"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case \"f\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new Gender(\"Female\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case \"others\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case \"o\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new Gender(\"Others\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return new Gender(EMPTY_ATTRIBUTE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (tagName.equals(EMPTY_ATTRIBUTE)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Parses a {@code String birthday} into a {@code Birthday}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Only birth dates earlier than the current date are allowed."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static Birthday parseBirthday(String birthday) throws ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(birthday);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String trimmedBirthday \u003d birthday.trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!Birthday.isValidBirthday(trimmedBirthday)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new ParseException(Birthday.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new Birthday(trimmedBirthday);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Parses a {@code String height} into an {@code Height}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @throws ParseException if the given {@code height} is invalid."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static Height parseHeight(String height) throws ParseException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String trimmedHeight \u003d height.trim();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!Height.isValidHeight(trimmedHeight)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new ParseException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return new Height(trimmedHeight);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Parses a {@code String current weight} into a {@code CurrentWeight}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static CurrentWeight parseCurrentWeight(String currentWeight) throws ParseException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(currentWeight);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String trimmedCurrentWeight \u003d currentWeight.trim();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!CurrentWeight.isValidWeight(trimmedCurrentWeight)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new ParseException(CurrentWeight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new CurrentWeight(trimmedCurrentWeight);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Parses a {@code String target weight} into a {@code TargetWeight}."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static TargetWeight parseTargetWeight(String targetWeight) throws ParseException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(targetWeight);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String trimmedTargetWeight \u003d targetWeight.trim();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!TargetWeight.isValidWeight(trimmedTargetWeight)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new ParseException(TargetWeight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new TargetWeight(trimmedTargetWeight);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Parses a {@code String sport} into a {@code Sport}."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws ParseException if the given {@code sport} is invalid."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static Sport parseSport(String sport) throws ParseException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(sport);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String trimmedSport \u003d sport.trim();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!Sport.isValidSport(trimmedSport)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            throw new ParseException(Sport.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return new Sport(trimmedSport);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e sports} into a {@code Set\u003cSport\u003e}."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static Set\u003cSport\u003e parseSports(Collection\u003cString\u003e sports) throws ParseException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(sports);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        final Set\u003cSport\u003e sportSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (String sportName : sports) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (sportName.equals(EMPTY_ATTRIBUTE)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            sportSet.add(parseSport(sportName));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return sportSet;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses a {@code String exercise name} into an {@code ExerciseName}. Leading"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the given {@code exercise name} is invalid."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static ExerciseName parseExerciseName(String exerciseName) throws ParseException {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exerciseName);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String trimmedExerciseName \u003d exerciseName.trim();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!ExerciseName.isValidExerciseName(trimmedExerciseName)) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException(ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new ExerciseName(trimmedExerciseName);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses a {@code String reps} into an {@code ExerciseReps}. Leading and"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the given {@code reps} is invalid."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static ExerciseReps parseExerciseReps(String reps) throws ParseException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(reps);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String trimmedReps \u003d reps.trim();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!ExerciseReps.isValidExerciseReps(trimmedReps)) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException(ExerciseReps.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new ExerciseReps(trimmedReps);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses a {@code String sets} into an {@code ExerciseSets}. Leading and"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the given {@code sets} is invalid."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static ExerciseSets parseExerciseSets(String sets) throws ParseException {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(sets);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String trimmedSets \u003d sets.trim();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!ExerciseSets.isValidExerciseSets(trimmedSets)) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException(ExerciseSets.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new ExerciseSets(trimmedSets);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses a {@code String exercise weight} into an {@code ExerciseWeight}."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the given {@code exercise weight} is invalid."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static ExerciseWeight parseExerciseWeight(String exerciseWeight) throws ParseException {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exerciseWeight);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String trimmedExerciseWeight \u003d exerciseWeight.trim();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!ExerciseWeight.isValidExerciseWeight(trimmedExerciseWeight)) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException(ExerciseWeight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new ExerciseWeight(trimmedExerciseWeight);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses a {@code String date} into an {@code ExerciseDate}. Leading and"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static ExerciseDate parseExerciseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!ExerciseDate.isValidExerciseDate(trimmedDate)) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new ParseException(ExerciseDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new ExerciseDate(date);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Parses a {@code List\u003cString\u003e days} into a {@code ArrayList\u003cDay\u003e dayList}."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Only correct day of the week is allowed"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static ArrayList\u003cDay\u003e parseDay(List\u003cString\u003e days) throws ParseException {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(days);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArrayList\u003cDay\u003e dayList \u003d new ArrayList\u003cDay\u003e();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            String trimmedDay \u003d day.trim();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            if (!Day.isValidDay(trimmedDay)) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                throw new ParseException(Schedule.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            dayList.add(new Day(trimmedDay));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return dayList;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Parses a {@code List\u003cString\u003e time} into a {@code ArrayList\u003cStartTime\u003e startTimeList}."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Only time in 24 hour format is allowed."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static ArrayList\u003cStartTime\u003e parseStartTime(List\u003cString\u003e time) throws ParseException {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArrayList\u003cStartTime\u003e startTimeList \u003d new ArrayList\u003cStartTime\u003e();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (String startTime : time) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            String trimmedTime \u003d startTime.trim();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            if (!StartTime.isValidTimingFormat(trimmedTime)) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                throw new ParseException(Schedule.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            startTimeList.add(new StartTime(trimmedTime));"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return startTimeList;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Parses a {@code List\u003cString\u003e time} into a {@code ArrayList\u003cEndTime\u003e endTimeList}."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Only time in 24 hour format is allowed."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static ArrayList\u003cEndTime\u003e parseEndTime(List\u003cString\u003e time) throws ParseException {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArrayList\u003cEndTime\u003e endTimeList \u003d new ArrayList\u003cEndTime\u003e();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (String endTime : time) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            String trimmedTime \u003d endTime.trim();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            if (!StartTime.isValidTimingFormat(trimmedTime)) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                throw new ParseException(Schedule.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            endTimeList.add(new EndTime(trimmedTime));"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return endTimeList;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * takes in the raw input string entered into the CLI from the user and processes it into an ArrayList"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * of String arrays for further parsing by the day, start and end time parsers respectively."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static ArrayList\u003cHashMap\u003cString, String\u003e\u003e parseRawScheduleInput(List\u003cString\u003e input) throws ParseException {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cHashMap\u003cString, String\u003e\u003e returnList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // short-circuit if empty input"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (input.get(0).length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return returnList;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            for (String s : input) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                HashMap\u003cString, String\u003e inputHash \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                String[] tripleData \u003d s.split(\"-\");"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                inputHash.put(\"day\", tripleData[DAY_INDEX]);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                inputHash.put(\"start\", tripleData[START_INDEX]);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                inputHash.put(\"end\", tripleData[END_INDEX]);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                returnList.add(inputHash);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return returnList;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new ParseException(Schedule.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Parses a {@code String axis} into an {@code Axis}. Leading and"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @throws ParseException if the given {@code axis} is invalid."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static Axis parseAxis(String axis) throws ParseException {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(axis);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String trimmedAxis \u003d axis.trim();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!Axis.isValidAxis(trimmedAxis)) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new ParseException(Axis.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return new Axis(trimmedAxis);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Parses a {@code String startDate} into an {@code StartDate}. Leading and"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @throws ParseException if the given {@code startDate} is invalid."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static StartDate parseStartDate(String startDate) throws ParseException {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String trimmedStartDate \u003d startDate.trim();"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!StartDate.isValidStartDate(trimmedStartDate)) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new ParseException(StartDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return new StartDate(trimmedStartDate);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Parses a {@code String endDate} into an {@code EndDate}. Leading and"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @throws ParseException if the given {@code endDate} is invalid."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static EndDate parseEndDate(String endDate) throws ParseException {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(endDate);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String trimmedEndDate \u003d endDate.trim();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!EndDate.isValidEndDate(trimmedEndDate)) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new ParseException(EndDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return new EndDate(trimmedEndDate);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 119,
      "ziyingli": 66,
      "tohkerwei": 83,
      "Dban1": 59,
      "AaronCQL": 43,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ScheduleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.EndTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.StartTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Parses input arguments and creates a new ScheduleCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Checks for any overlaps in given schedule with all existing schedules in input set."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static boolean checkIfOverlaps(Schedule schedule, TreeSet\u003cSchedule\u003e set) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (set.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            set.add(schedule);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return set.add(schedule);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScheduleCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * and returns a ScheduleCommand object for execution."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public ScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SCHEDULE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                || !argMultimap.getValue(PREFIX_SCHEDULE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Creates an ArrayList of HashMap, each HashMap contains 3 input attributes day, start time, end time."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cHashMap\u003cString, String\u003e\u003e processedInput \u003d ParserUtil.parseRawScheduleInput("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                argMultimap.getAllValues(PREFIX_SCHEDULE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Process the input attributes into their respective ArrayList\u003cString\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cString\u003e dayStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cString\u003e startListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cString\u003e endListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        for (HashMap\u003cString, String\u003e h: processedInput) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            dayStringList.add(h.get(\"day\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            startListString.add(h.get(\"start\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            endListString.add(h.get(\"end\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Passes in the respective ArrayList\u003cString\u003e for the input attributes to their parser functions to obtain"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // their respective ArrayLists."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cDay\u003e dayList \u003d ParserUtil.parseDay(dayStringList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cStartTime\u003e startTimeList \u003d ParserUtil.parseStartTime(startListString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cEndTime\u003e endTimeList \u003d ParserUtil.parseEndTime(endListString);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArrayList\u003cSchedule\u003e scheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Checks if there are the same number of arguments for Day, StartTime and EndTime."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (dayList.size() !\u003d startTimeList.size() || dayList.size() !\u003d endTimeList.size()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            String invalidCountMsg \u003d String.format(ScheduleCommand.MESSAGE_INVALID_ARG_COUNT, dayList.size(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    startTimeList.size(), endTimeList.size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, invalidCountMsg));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Checks for overlapping schedules."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        TreeSet\u003cSchedule\u003e scheduleSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (int i \u003d 0; i \u003c dayList.size(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            Day day \u003d dayList.get(i);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            StartTime startTime \u003d startTimeList.get(i);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            EndTime endTime \u003d endTimeList.get(i);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            Schedule schedule;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                schedule \u003d new Schedule(day, startTime, endTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                throw new ParseException(Schedule.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            if (!checkIfOverlaps(schedule, scheduleSet)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                        ScheduleCommand.MESSAGE_CONTAINS_DUPLICATES));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            scheduleList.add(schedule);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return new ScheduleCommand(index, scheduleList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 43,
      "Dban1": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Parses input arguments and creates a new {@code ViewCommand} object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ViewCommand}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * and returns a {@code ViewCommand} object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return new ViewCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/statistics/PersonalBestFinder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.PersonalBest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Finds the personal best of every exercise with valid weight or reps in exercise list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class PersonalBestFinder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Generates and sets personal bests when view-c, add-e or delete-e is called."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @param clientInView The client currently in view"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static void generateAndSetPersonalBest(Client clientInView) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        UniqueExerciseList exerciseList \u003d clientInView.getExerciseList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        PersonalBest personalBest \u003d clientInView.getPersonalBest();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        HashMap\u003cExerciseName, Exercise\u003e pbTable \u003d new HashMap\u003cExerciseName, Exercise\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        for (Exercise ex : exerciseList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            ExerciseName name \u003d ex.getExerciseName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            int weight \u003d ex.getExerciseWeight().convertToInt();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            int reps \u003d ex.getExerciseReps().convertToInt();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            if (pbTable.containsKey(name)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                int pbWeight \u003d pbTable.get(name).getExerciseWeight().convertToInt();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                int pbReps \u003d pbTable.get(name).getExerciseReps().convertToInt();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                if (pbWeight \u003c weight) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                    pbTable.put(name, ex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                } else if (pbWeight \u003d\u003d weight) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                    if (pbReps \u003c reps) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                        pbTable.put(name, ex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            } else if (hasWeightOrReps(ex)) { // has one or both"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                pbTable.put(name, ex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        personalBest.setPersonalBest(pbTable.values());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Checks if exercise has either one of weight or reps or both."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @param ex The exercise to be checked"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @return True if the exercise has either weight or reps or both."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private static boolean hasWeightOrReps(Exercise ex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        boolean hasWeight \u003d !ex.getExerciseWeight().toString().equals(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        boolean hasReps \u003d !ex.getExerciseReps().toString().equals(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return hasWeight || hasReps;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ClientInView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This represents the model of the client currently in view."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class ClientInView {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Client client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Client getClient() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setClient(Client client) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean hasClientInView() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return client !\u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!(obj instanceof ClientInView)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return (((ClientInView) obj).client \u003d\u003d null \u0026\u0026 client \u003d\u003d null)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            || ((ClientInView) obj).client.equals(client);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 17,
      "AaronCQL": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CommandHistoryState.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This represents the model of the command history and contains the underlying"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * data structure to be used by {@code CommandHistory}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class CommandHistoryState {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int START_INDEX \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int MAX_HISTORY_SIZE \u003d 100;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private ArrayList\u003cString\u003e history;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Default constructor for this class; initialises the state {@code history} and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * the {@code index}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public CommandHistoryState(List\u003cString\u003e initialState) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        history \u003d new ArrayList\u003cString\u003e(initialState);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        index \u003d initialState.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private boolean isAtStart() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return index \u003d\u003d START_INDEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private boolean isAtEnd() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return index \u003d\u003d history.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private boolean hasNoHistory() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return history.isEmpty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the last item added to {@code history}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private String getMostRecentCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return history.get(history.size() - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private boolean isEmptyString(String toTest) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return toTest.equals(EMPTY_STRING);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true iff the parameter {@code toTest} is different from the most"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * recent command, or if {@code history} is currently empty."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param toTest parameter to test."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return true iff {@code toTest} is different from the most recent command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private boolean isSimilarToMostRecentCommand(String toTest) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (hasNoHistory()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return false; // no history means toTest is unique"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return getMostRecentCommand().equals(toTest);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private boolean isAtMaxCapacity() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return history.size() \u003e\u003d MAX_HISTORY_SIZE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Adds the user input {@code command} String to this model and to the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code commandHistoryStorage}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param command the user input command"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void add(String command) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (isEmptyString(command)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            index \u003d history.size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (isSimilarToMostRecentCommand(command)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            index \u003d history.size();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (isAtMaxCapacity()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            history.remove(START_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        history.add(command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        index \u003d history.size();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the previous command string in the {@code history}. If"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code history} is empty, the empty string is returned."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return the previous command string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getPreviousCommand() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (isAtStart()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return hasNoHistory() ? EMPTY_STRING : history.get(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        index--;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return history.get(index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the next command string in the {@code history}. If the end of the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code history} is reached, the empty string is returned."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return the next command string"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getNextCommand() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (isAtEnd()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return EMPTY_STRING;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        index++;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return isAtEnd() ? EMPTY_STRING : history.get(index);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns a copy of the {@code history}. Any modifications done to this"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * returned list will not affect the internal list stored in this class."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ArrayList\u003cString\u003e getCurrentState() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new ArrayList\u003cString\u003e(history);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Clears and resets the state of the {@code history} and the {@code index}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void clearState() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        history.clear();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        index \u003d START_INDEX;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/FitBiz.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.UniqueClientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Duplicates are not allowed (by .isSameClient comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class FitBiz implements ReadOnlyFitBiz {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final UniqueClientList clients;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clients \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public FitBiz() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Creates an FitBiz using the Clients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public FitBiz(ReadOnlyFitBiz toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Replaces the contents of the client list with {@code clients}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * {@code clients} must not contain duplicate clients."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClients(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.clients.setClients(clients);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Resets the existing data of this {@code FitBiz} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void resetData(ReadOnlyFitBiz newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        setClients(newData.getClientList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    //// client-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true if a client with the same identity as {@code client} exists in the FitBiz."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return clients.contains(client);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Adds a client to the FitBiz."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * The client must not already exist in the FitBiz."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void addClient(Client p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clients.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Replaces the given client {@code target} in the list with {@code editedClient}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code target} must exist in the FitBiz."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * The client identity of {@code editedClient} must not be the same as another existing client in the FitBiz."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(editedClient);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clients.setClient(target, editedClient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Removes {@code key} from this {@code FitBiz}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code key} must exist in the FitBiz."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void removeClient(Client key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clients.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return clients.asUnmodifiableObservableList().size() + \" clients\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ObservableList\u003cClient\u003e getClientList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return clients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof FitBiz // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u0026\u0026 clients.equals(((FitBiz) other).clients));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return clients.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6,
      "Dban1": 26,
      "AaronCQL": 9,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleDay;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_CLIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the user prefs\u0027 FitBiz file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    Path getFitBizFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the user prefs\u0027 FitBiz file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    void setFitBizFilePath(Path fitBizFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns the FitBiz"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    ReadOnlyFitBiz getFitBiz();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Replaces FitBiz data with the data in {@code fitBiz}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    void setFitBiz(ReadOnlyFitBiz fitBiz);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true if a client with the same identity as {@code client} exists in the FitBiz."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    boolean hasClient(Client client);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Deletes the given client."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * The client must exist in the FitBiz."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void deleteClient(Client target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Adds the given client."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code client} must not already exist in the FitBiz."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void addClient(Client client);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Replaces the given client {@code target} with {@code editedClient}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code target} must exist in the FitBiz."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * The client identity of {@code editedClient} must not be the same as another existing client in the FitBiz."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void setClient(Client target, Client editedClient);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns an unmodifiable view of the filtered client list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    ObservableList\u003cClient\u003e getFilteredClientList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Updates the filter of the filtered client list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void updateFilteredClientList(Predicate\u003cClient\u003e predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns the client in {@code clientInView}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggie"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    Client getClientInView();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Updates the client in {@code clientInView}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggie"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    void setClientInView(Client client);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Clears the client in {@code clientInView}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggie"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    void clearClientInView();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if a client with the same identity as {@code client} exists in"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * the FitBiz."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggie"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    boolean hasClientInView();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Updates client in ClientInView in the case of an EditCommand. Before updating, checks if"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * {@code editedClient} is the same client as client in ClientInView."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggiee"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    void updateClientViewIfApplicable(Client clientToEdit, Client editedClient);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns a view of the schedule list from across all clients."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    ObservableList\u003cScheduleDay\u003e getScheduleDayList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Adds the given exercise to the clientInView exercise list. There must be"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * client in clientInView."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    Client addExerciseToClient(Exercise exercise);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Replaces the {@code target} in clientInView exercise list with {@code editedExercise}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * There must be client in clientInView."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    void editExercise (Exercise target, Exercise editedExercise);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Deletes the given exercise in clientInView exercise list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * There must be client in clientInView."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    void deleteExercise(Exercise exercise);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 50,
      "tohkerwei": 2,
      "Dban1": 31,
      "AaronCQL": 16,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleDay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents the in-memory model of the FitBiz data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final FitBiz fitBiz;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final FilteredList\u003cClient\u003e filteredClients;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final ClientInView clientInView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Initializes a ModelManager with the given fitBiz and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ModelManager(ReadOnlyFitBiz fitBiz, ReadOnlyUserPrefs userPrefs, ClientInView clientInView) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireAllNonNull(fitBiz, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        logger.fine(\"Initializing with FitBiz: \" + fitBiz + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.fitBiz \u003d new FitBiz(fitBiz);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.clientInView \u003d clientInView;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        filteredClients \u003d new FilteredList\u003c\u003e(this.fitBiz.getClientList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this(new FitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Path getFitBizFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return userPrefs.getFitBizFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setFitBizFilePath(Path fitBizFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(fitBizFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        userPrefs.setFitBizFilePath(fitBizFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FitBiz \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setFitBiz(ReadOnlyFitBiz fitBiz) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.fitBiz.resetData(fitBiz);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ReadOnlyFitBiz getFitBiz() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return fitBiz;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return fitBiz.hasClient(client);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void deleteClient(Client target) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (target \u003d\u003d getClientInView()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            clearClientInView();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBiz.removeClient(target);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void addClient(Client client) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBiz.addClient(client);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireAllNonNull(target, editedClient);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (hasClientInView() \u0026\u0026 getClientInView().equals(target)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            clientInView.setClient(editedClient);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBiz.setClient(target, editedClient);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Client List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Client} backed by the internal list of"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code versionedFitBiz}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return filteredClients;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        filteredClients.setPredicate(predicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ClientInView \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Client getClientInView() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return clientInView.getClient();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setClientInView(Client client) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        clientInView.setClient(client);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void clearClientInView() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        setClientInView(null);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean hasClientInView() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return clientInView.hasClientInView();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void updateClientViewIfApplicable(Client clientToEdit, Client editedClient) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireAllNonNull(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!clientInView.hasClientInView()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client currentClientInView \u003d clientInView.getClient();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (currentClientInView.equals(clientToEdit)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            clientInView.setClient(editedClient);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ScheduleList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ObservableList\u003cScheduleDay\u003e getScheduleDayList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cScheduleList\u003e fullScheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        for (Client c: filteredClients) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            for (Schedule s: c.getScheduleList().getArrayList()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                s.assignClientName(c.getName().fullName);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            fullScheduleList.add(c.getScheduleList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return ScheduleDay.weeklySchedule(fullScheduleList);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    };"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Exercise \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Creates a new {@code Client} with the new exercise list. Other attributes remain the"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * same."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Client buildClientWithNewExerciseList(Client clientToEdit,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList clientToEditExerciseList) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client editedClient \u003d new Client(clientToEdit.getName(), clientToEdit.getGender(), clientToEdit.getPhone(),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            clientToEdit.getEmail(), clientToEdit.getAddress(), clientToEdit.getTags(), clientToEdit.getBirthday(),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            clientToEdit.getCurrentWeight(), clientToEdit.getTargetWeight(), clientToEdit.getHeight(),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            clientToEdit.getRemark(), clientToEdit.getSports(), clientToEditExerciseList,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            clientToEdit.getPersonalBest(), clientToEdit.getScheduleList());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return editedClient;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Client addExerciseToClient(Exercise exercise) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client clientToEdit \u003d getClientInView();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList clientToEditExerciseList \u003d clientToEdit.getExerciseList();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientToEditExerciseList.addToSorted(exercise);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client editedClient \u003d buildClientWithNewExerciseList(clientToEdit, clientToEditExerciseList);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return editedClient;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void editExercise (Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client clientToEdit \u003d getClientInView();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList clientToEditExerciseList \u003d clientToEdit.getExerciseList();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientToEditExerciseList.setExercise(target, editedExercise);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void deleteExercise (Exercise exercise) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client clientToEdit \u003d getClientInView();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList clientToEditExerciseList \u003d clientToEdit.getExerciseList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // mutates the list belonging to the client by removing the exercise"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientToEditExerciseList.remove(exercise);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client editedClient \u003d buildClientWithNewExerciseList(clientToEdit, clientToEditExerciseList);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return fitBiz.equals(other.fitBiz)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u0026\u0026 filteredClients.equals(other.filteredClients)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u0026\u0026 clientInView.equals(other.clientInView);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 81,
      "Dban1": 32,
      "AaronCQL": 42,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyFitBiz.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Unmodifiable view of FitBiz."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public interface ReadOnlyFitBiz {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns an unmodifiable view of the clients list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * This list will not contain any duplicate clients."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    ObservableList\u003cClient\u003e getClientList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 4,
      "AaronCQL": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    Path getFitBizFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Path fitBizFilePath \u003d Paths.get(\"data\" , \"fitbiz.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        setFitBizFilePath(newUserPrefs.getFitBizFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Path getFitBizFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return fitBizFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setFitBizFilePath(Path fitBizFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(fitBizFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.fitBizFilePath \u003d fitBizFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                \u0026\u0026 fitBizFilePath.equals(o.fitBizFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return Objects.hash(guiSettings, fitBizFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + fitBizFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client\u0027s address in FitBiz."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "AaronCQL": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Birthday.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client\u0027s birthday in FitBiz."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBirthday(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class Birthday {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String EARLIEST_BIRTHDAY \u003d LocalDate.now().minusYears(120)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            \"Birthdays should be in the format DD-MM-YYYY (eg. 02-03-1999), and cannot exceed the current date.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \" Birthday should also not be earlier than \" + EARLIEST_BIRTHDAY + \".\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public final String displayValue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Constructs a {@code Birthday}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param birthday A valid birth date in the form DD-MM-YYYY."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Birthday(String birthday) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(birthday);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        checkArgument(isValidBirthday(birthday), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.value \u003d birthday.isEmpty() ? null : LocalDate.parse(birthday, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.displayValue \u003d birthday; //assuming birthday string is valid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns true if a given string is a valid birthday."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static boolean isValidBirthday(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        LocalDate testBirthday;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (test.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            testBirthday \u003d LocalDate.parse(test, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            LocalDate dateNowMinusHundredTwentyYear \u003d dateNow.minusYears(120);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            if (dateNow.compareTo(testBirthday) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            } else if (dateNowMinusHundredTwentyYear.isAfter(testBirthday)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (this.value \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this.value.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                || (other instanceof Birthday // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                \u0026\u0026 value.equals(((Birthday) other).value)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return value \u003d\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public String getAge() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (this.value \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        long age \u003d DAYS.between(this.value, LocalDate.now()) / 365;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return Long.toString(age);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 74,
      "AaronCQL": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Client.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client in FitBiz. Guarantees: details are present and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class Client {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FORMAT_ONLY_ONE_PRESENT \u003d \"(%s)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FORMAT_BOTH_PRESENT \u003d \"(%s, %s)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Start of new/optional data fields"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Birthday birthday;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final CurrentWeight currentWeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final TargetWeight targetWeight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Height height;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final Set\u003cSport\u003e sports \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final UniqueExerciseList exerciseList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final PersonalBest personalBest;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final ScheduleList scheduleList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Client(Name name, Gender gender, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Birthday birthday,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            CurrentWeight currentWeight, TargetWeight targetWeight, Height height, Remark remark, Set\u003cSport\u003e sports,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            UniqueExerciseList exerciseList, PersonalBest personalBest, ScheduleList scheduleList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireAllNonNull(name, gender, phone, email, address, tags, birthday, currentWeight, targetWeight, height,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                remark, sports, exerciseList, personalBest, scheduleList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.currentWeight \u003d currentWeight;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.targetWeight \u003d targetWeight;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.sports.addAll(sports);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.exerciseList \u003d exerciseList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.personalBest \u003d personalBest;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.scheduleList \u003d scheduleList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public Birthday getBirthday() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return birthday;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getBirthdayString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return birthday.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public CurrentWeight getCurrentWeight() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return currentWeight;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public TargetWeight getTargetWeight() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return targetWeight;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public Height getHeight() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public ScheduleList getScheduleList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return scheduleList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns an immutable tag set, which throws"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code UnsupportedOperationException} if modification is attempted."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns an immutable sport set, which throws"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code UnsupportedOperationException} if modification is attempted."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public Set\u003cSport\u003e getSports() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return Collections.unmodifiableSet(sports);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getSportsString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return getSports().stream().map(sport -\u003e sport.getSportName()).collect(Collectors.joining(\", \"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public UniqueExerciseList getExerciseList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public PersonalBest getPersonalBest() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return personalBest;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Formats and returns a string representing the client\u0027s age and gender."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String buildBirthdayAndGender() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (birthday.isEmpty() \u0026\u0026 gender.isEmpty()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            // if both are empty"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return EMPTY_STRING;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (gender.isEmpty()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            // if only gender is empty"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return String.format(FORMAT_ONLY_ONE_PRESENT, birthday.getAge());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (birthday.isEmpty()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            // if only birthday is empty"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return String.format(FORMAT_ONLY_ONE_PRESENT, gender.getOneLetterFormat());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return String.format(FORMAT_BOTH_PRESENT, birthday.getAge(), gender.getOneLetterFormat());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true if both clients have the same phone numbers OR both clients have"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * the same email addresses. Thus, for clients to have the same name, both phone"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * and email must be different."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public boolean isSameClient(Client otherClient) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (otherClient \u003d\u003d null) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (otherClient \u003d\u003d this) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (otherClient.getPhone().equals(getPhone())) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (otherClient.getEmail().equals(getEmail())) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // if all checks fail, just return false"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true if both clients have the same identity and data fields. This"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * defines a stronger notion of equality between two clients."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (!(other instanceof Client)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client otherClient \u003d (Client) other;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // TODO: add checks for new/optional attributes"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return otherClient.getName().equals(getName()) \u0026\u0026 otherClient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                \u0026\u0026 otherClient.getEmail().equals(getEmail()) \u0026\u0026 otherClient.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                \u0026\u0026 otherClient.getTags().equals(getTags());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return Objects.hash(name, gender, phone, email, address, tags, birthday, currentWeight, targetWeight, height,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                remark, sports);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        builder.append(getName()).append(\" Gender: \").append(getGender()).append(\" Phone: \").append(getPhone())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .append(\" Email: \").append(getEmail()).append(\" Address: \").append(getAddress()).append(\" Birthday: \")"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .append(getBirthday()).append(\" Current Weight: \").append(getCurrentWeight()).append(\" Target Weight: \")"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .append(getTargetWeight()).append(\" Height: \").append(getHeight()).append(\" Remark: \")"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .append(getRemark()).append(\" Tags: \");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        builder.append(\" Sports: \");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        getSports().forEach(builder::append);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 16,
      "ziyingli": 11,
      "tohkerwei": 16,
      "Dban1": 21,
      "AaronCQL": 96,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/CurrentWeight.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents current weight (in kg) of a client in FitBiz. Guarantees:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * immutable; is valid as declared in {@link #isValidWeight(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class CurrentWeight {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Weights must either be a whole or decimal number\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \" (eg. 65 or 86.22). Make sure that you only have a maximum of 3 digits before and\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \" 2 digits after the decimal place.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]{1,3}(\\\\.[0-9]{0,2})?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FORMAT_TWO_DECIMAL_PLACES \u003d \"%1$.2f\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Constructs a {@code CurrentWeight}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param weight A valid weight."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public CurrentWeight(String weight) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        checkArgument(isValidWeight(weight), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String formattedWeight \u003d formatWeight(weight);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        value \u003d formattedWeight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static boolean isEmptyString(String toTest) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return toTest.equals(EMPTY_STRING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Formats the given {@code weight} using {@code BigDecimal} to two decimal"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * places."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param weight weight to format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return formatted weight to 2 decimal places"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static String formatWeight(String weight) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (isEmptyString(weight)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return EMPTY_STRING;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        BigDecimal bigDecimal \u003d new BigDecimal(weight);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return String.format(FORMAT_TWO_DECIMAL_PLACES, bigDecimal);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true if a given string is a valid weight."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static boolean isValidWeight(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return isEmptyString(test) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                || (other instanceof CurrentWeight // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                        \u0026\u0026 value.equals(((CurrentWeight) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client\u0027s email in FitBiz."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "AaronCQL": 1,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Gender.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client\u0027s gender in FitBiz. Guarantees: immutable; is"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Gender is case insensitive and can only be\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        + \" \u0027male\u0027 (or \u0027m\u0027), \u0027female\u0027 (or \u0027f\u0027), or \u0027others\u0027 (or \u0027o\u0027).\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs an {@code Gender}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param gender Male / Female / Others."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        value \u003d gender;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String testInLowerCase \u003d test.trim().toLowerCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return test.equals(EMPTY_STRING)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            || testInLowerCase.equals(\"male\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            || testInLowerCase.equals(\"m\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            || testInLowerCase.equals(\"female\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            || testInLowerCase.equals(\"f\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            || testInLowerCase.equals(\"others\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            || testInLowerCase.equals(\"o\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return value.equals(EMPTY_STRING);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getOneLetterFormat() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return value.substring(0, 1).toUpperCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 firstCharEquals(value, ((Gender) other).value)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if the first character of two strings are the same."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static boolean firstCharEquals(String string1, String string2) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (string1.length() \u003d\u003d 0 || string2.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return string1.toLowerCase().charAt(0) \u003d\u003d string2.toLowerCase().charAt(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 67,
      "AaronCQL": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Height.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Represents current height (in cm) of a client in FitBiz. Guarantees:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * immutable; is valid as declared in {@link #isValidHeight(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class Height {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Heights must either be a whole or decimal number\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \" (eg. 165 or 186.22). Make sure that you only have a maximum of 3 digits before and\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \" 2 digits after the decimal place.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]{1,3}(\\\\.[0-9]{0,2})?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FORMAT_TWO_DECIMAL_PLACES \u003d \"%1$.2f\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Constructs a {@code Height}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @param height A valid height."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public Height(String height) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        checkArgument(isValidHeight(height), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String formattedHeight \u003d formatHeight(height);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        value \u003d formattedHeight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private static boolean isEmptyString(String toTest) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return toTest.equals(EMPTY_STRING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Formats the given {@code height} using {@code BigDecimal} to two decimal"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * places."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @param height height to format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @return formatted height to 2 decimal places"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private static String formatHeight(String height) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (isEmptyString(height)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return EMPTY_STRING;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        BigDecimal bigDecimal \u003d new BigDecimal(height);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return String.format(FORMAT_TWO_DECIMAL_PLACES, bigDecimal);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static boolean isValidHeight(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return isEmptyString(test) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                || (other instanceof Height // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                        \u0026\u0026 value.equals(((Height) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 69,
      "AaronCQL": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client\u0027s name in FitBiz."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \"Names should only contain alphanumeric characters, spaces and commas, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} \\\\,]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                \u0026\u0026 fullName.equalsIgnoreCase(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 2,
      "Dban1": 1,
      "AaronCQL": 2,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Tests that a {@code Client}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cClient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public boolean test(Client client) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(client.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/PersonalBest.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Represents the personal bests of a client\u0027s exercises in FitBiz."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class PersonalBest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private ObservableList\u003cExercise\u003e personalBestList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void setPersonalBest(Collection\u003cExercise\u003e values) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.personalBestList \u003d FXCollections.observableArrayList(values);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public ObservableList\u003cExercise\u003e getPersonalBest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return this.personalBestList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String toPrint \u003d \"Personal Best \\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        for (Exercise e : personalBestList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            toPrint +\u003d e.toString() + \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return toPrint;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client\u0027s phone number in FitBiz."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "AaronCQL": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Remark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client\u0027s remark in FitBiz."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs an {@code Remark}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param remark A comment to record on the client."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 38,
      "AaronCQL": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Sport.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client\u0027s sport in FitBiz."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSport(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class Sport {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Sport should only contain alphanumeric characters and spaces\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public final String sportName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Constructs an {@code Sport}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param sport A valid Sport."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public Sport(String sport) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(sport);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        checkArgument(isValidSport(sport), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        sportName \u003d sport;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Returns true if a given string is a valid sport."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static boolean isValidSport(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return test.equals(EMPTY_STRING) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getSportName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return sportName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return \"[\" + sportName + \"]\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                || (other instanceof Sport // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                \u0026\u0026 sportName.equals(((Sport) other).sportName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return sportName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 4,
      "ziyingli": 2,
      "tohkerwei": 46,
      "AaronCQL": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/TagAndSportContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * @author tohkerwei"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Tests that a {@code Client}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class TagAndSportContainsKeywordsPredicate implements Predicate\u003cClient\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final List\u003cString\u003e tagKeywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final List\u003cString\u003e sportKeywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public TagAndSportContainsKeywordsPredicate(List\u003cString\u003e tagKeywords, List\u003cString\u003e sportKeywords) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.tagKeywords \u003d tagKeywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.sportKeywords \u003d sportKeywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public boolean test(Client client) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        boolean hasAllTags \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        boolean hasAllSports \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!tagKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            for (String tag : tagKeywords) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                boolean hasTag \u003d StringUtil.containsWordIgnoreCase(setTagToString(client.getTags()), tag);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                hasAllTags \u003d hasAllTags \u0026\u0026 hasTag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!sportKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            for (String sport : sportKeywords) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                boolean hasSport \u003d StringUtil.containsWordIgnoreCase(setSportToString(client.getSports()), sport);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                hasAllSports \u003d hasAllSports \u0026\u0026 hasSport;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return hasAllTags \u0026\u0026 hasAllSports;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Converts the tags of a client into a string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param tagsSet set of tags of a client"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return string containing tags of a client"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String setTagToString(Set\u003cTag\u003e tagsSet) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArrayList\u003cString\u003e tagArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (Tag tag : tagsSet) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            tagArray.add(tag.tagName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (int i \u003d 0; i \u003c tagsSet.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            sb.append(tagArray.get(i));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Converts the sports of a client into a string"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param sportSet set of sports of a client"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return string containing sports of a client"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String setSportToString(Set\u003cSport\u003e sportSet) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArrayList\u003cString\u003e sportArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (Sport sport : sportSet) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            sportArray.add(sport.sportName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (int i \u003d 0; i \u003c sportSet.size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            sb.append(sportArray.get(i));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                || (other instanceof TagAndSportContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                \u0026\u0026 tagKeywords.equals(((TagAndSportContainsKeywordsPredicate) other).tagKeywords)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                || sportKeywords.equals(((TagAndSportContainsKeywordsPredicate) other).sportKeywords)); // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/TargetWeight.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents current weight (in kg) of a client in FitBiz. Guarantees:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * immutable; is valid as declared in {@link #isValidWeight(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class TargetWeight {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Input weight must either be a whole or decimal number\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \" (eg. 65 or 86.22). Make sure that you only have a maximum of 3 digits before and\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \" 2 digits after the decimal place.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]{1,3}(\\\\.[0-9]{0,2})?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FORMAT_TWO_DECIMAL_PLACES \u003d \"%1$.2f\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Constructs a {@code TargetWeight}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param weight A valid weight."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public TargetWeight(String weight) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        checkArgument(isValidWeight(weight), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String formattedWeight \u003d formatWeight(weight);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        value \u003d formattedWeight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static boolean isEmptyString(String toTest) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return toTest.equals(EMPTY_STRING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Formats the given {@code weight} using {@code BigDecimal} to two decimal"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * places."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param weight weight to format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return formatted weight to 2 decimal places"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private String formatWeight(String weight) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (isEmptyString(weight)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return EMPTY_STRING;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        BigDecimal bigDecimal \u003d new BigDecimal(weight);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return String.format(FORMAT_TWO_DECIMAL_PLACES, bigDecimal);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true if a given string is a valid weight."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static boolean isValidWeight(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return isEmptyString(test) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                || (other instanceof TargetWeight // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                        \u0026\u0026 value.equals(((TargetWeight) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/UniqueClientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.exceptions.ClientNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.exceptions.DuplicateClientException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * A list of clients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * A client is considered unique by comparing using {@code Client#isSameClient(Client)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * clients uses Client#isSameClient(Client) for equality so as to ensure that the client being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * unique in terms of identity in the UniqueClientList. However, the removal of a client uses Client#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * as to ensure that the client with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * @see Client#isSameClient(Client)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class UniqueClientList implements Iterable\u003cClient\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final ObservableList\u003cClient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final ObservableList\u003cClient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns true if the list contains an equivalent client as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public boolean contains(Client toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameClient);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Adds a client to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * The client must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void add(Client toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new DuplicateClientException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Replaces the client {@code target} in the list with {@code editedClient}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * The client identity of {@code editedClient} must not be the same as another existing client in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireAllNonNull(target, editedClient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new ClientNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (!target.isSameClient(editedClient) \u0026\u0026 contains(editedClient)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new DuplicateClientException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        internalList.set(index, editedClient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Removes the equivalent client from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * The client must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void remove(Client toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new ClientNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClients(UniqueClientList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Replaces the contents of this list with {@code clients}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * {@code clients} must not contain duplicate clients."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClients(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireAllNonNull(clients);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (!clientsAreUnique(clients)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new DuplicateClientException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        internalList.setAll(clients);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ObservableList\u003cClient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public Iterator\u003cClient\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                || (other instanceof UniqueClientList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueClientList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns true if {@code clients} contains only unique clients."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private boolean clientsAreUnique(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        for (int i \u003d 0; i \u003c clients.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            for (int j \u003d i + 1; j \u003c clients.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                if (clients.get(i).isSameClient(clients.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/exceptions/ClientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Signals that the operation is unable to find the specified client."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class ClientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/exceptions/DuplicateClientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Signals that the operation will result in duplicate Clients (Clients are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class DuplicateClientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public DuplicateClientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        super(\"Operation would result in duplicate clients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Exercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Represents an exercise done by a client. Guarantees: details are present and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final ExerciseName exerciseName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final ExerciseReps exerciseReps;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final ExerciseSets exerciseSets;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final ExerciseWeight exerciseWeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final ExerciseDate exerciseDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Exercise(ExerciseName exerciseName, ExerciseReps exerciseReps, ExerciseSets exerciseSets,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseWeight exerciseWeight, ExerciseDate exerciseDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireAllNonNull(exerciseName, exerciseDate, exerciseReps, exerciseSets, exerciseWeight);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseName \u003d exerciseName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseReps \u003d exerciseReps;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseSets \u003d exerciseSets;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseWeight \u003d exerciseWeight;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseDate \u003d exerciseDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseName getExerciseName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return exerciseName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseReps getExerciseReps() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return exerciseReps;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseSets getExerciseSets() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return exerciseSets;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseWeight getExerciseWeight() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return exerciseWeight;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseDate getExerciseDate() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return exerciseDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns a string of describing {@code Exercise} to be shown in {@code ResultDisplay}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getForOutput() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        builder.append(\"Exercise name: \").append(getExerciseName())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .append(\"\\nDate: \").append(getExerciseDate())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .append(\"\\nReps: \").append(getExerciseReps())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .append(\"\\nWeight: \").append(getExerciseWeight())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .append(\"\\nSets: \").append(getExerciseSets());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if both exercises of the same name, date, reps and weight."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * This defines a weaker notion of equality between two exercises."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean isSameExercise(Exercise otherExercise) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (otherExercise \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return otherExercise !\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u0026\u0026 otherExercise.getExerciseName().equals(getExerciseName())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u0026\u0026 otherExercise.getExerciseReps().equals(getExerciseReps())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            \u0026\u0026 otherExercise.getExerciseWeight().equals(getExerciseWeight())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u0026\u0026 otherExercise.getExerciseDate().equals(getExerciseDate());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if both exercise have the attribute values."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!(other instanceof Exercise)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise otherExercise \u003d (Exercise) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return otherExercise.getExerciseName().equals(getExerciseName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u0026\u0026 otherExercise.getExerciseReps().equals(getExerciseReps())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u0026\u0026 otherExercise.getExerciseSets().equals(getExerciseSets())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u0026\u0026 otherExercise.getExerciseWeight().equals(getExerciseWeight())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u0026\u0026 otherExercise.getExerciseDate().equals(getExerciseDate());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return Objects.hash(exerciseName, exerciseReps, exerciseSets, exerciseWeight, exerciseDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        builder.append(\"Exercise name: \").append(getExerciseName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .append(\" Date: \").append(getExerciseDate())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .append(\" Sets: \").append(getExerciseSets())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .append(\" Reps: \").append(getExerciseReps())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .append(\" Weight: \").append(getExerciseWeight());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 115,
      "AaronCQL": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/ExerciseDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Represents the date of an exercise done by client. Guarantees: immutable; is"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * valid as declared in {@link #isValidExerciseDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String EARLIEST_DATE \u003d LocalDate.now().minusYears(1)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            \"Exercise date should be in the format DD-MM-YYYY (eg. 02-03-1999), and cannot exceed the current date.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    + \" Exercise date should also not be earlier than \" + EARLIEST_DATE + \".\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final String displayValue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param date A valid date in the form DD-MM-YYYY."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseDate(String date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        checkArgument(isValidExerciseDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.value \u003d LocalDate.parse(date, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.displayValue \u003d date; // assuming birthday string is valid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static boolean isValidExerciseDate(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            LocalDate testDate \u003d LocalDate.parse(test, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            LocalDate dateNowMinusOneYear \u003d dateNow.minusYears(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            if (dateNow.isBefore(testDate)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            } else if (dateNowMinusOneYear.isAfter(testDate)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public long forPlot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value.toEpochDay();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public LocalDate getValue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this.value.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof ExerciseDate // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 value.equals(((ExerciseDate) other).value)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 79,
      "Dban1": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/ExerciseName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Represents the name of an exercise from a list of exercises. Guarantees:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * immutable; is valid as declared in {@link #isValidExerciseName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \"Exercise names should only contain alphanumeric characters and spaces, and it should not be blank. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \"There can only be maximum of 30 characters. \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[\\\\p{Alnum}][\\\\p{Alnum} ]{0,29}$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs a {@code ExerciseName}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param exerciseName A valid exercise name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseName(String exerciseName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exerciseName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        checkArgument(isValidExerciseName(exerciseName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        value \u003d exerciseName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if a given string is a valid exercise name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static boolean isValidExerciseName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof ExerciseName // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 value.equals(((ExerciseName) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/ExerciseReps.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Represents the number of Reps a client does for an exercise. Guarantees:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * immutable; is valid as declared in {@link #isValidExerciseReps(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseReps {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \"Input Reps must be a whole number from 1 to 9999 (eg. 65)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([1-9][0-9]{0,3})$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs a {@code ExerciseReps}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param exerciseReps A positive whole number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseReps(String exerciseReps) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exerciseReps);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        checkArgument(isValidExerciseReps(exerciseReps), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        value \u003d exerciseReps;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if a given string is a valid exercise reps."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static boolean isValidExerciseReps(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return test.equals(EMPTY_STRING) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Converts the string value of exercise reps to integer."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public int convertToInt() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (value.equals(EMPTY_STRING)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return Integer.parseInt(value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof ExerciseReps // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 value.equals(((ExerciseReps) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 58,
      "ziyingli": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/ExerciseSets.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Represents the number of Sets a client does for an exercise. Guarantees:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * immutable; is valid as declared in {@link #isValidExerciseSets(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseSets {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \"Input Sets must be a whole number from 1 to 9999 (eg. 5)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([1-9][0-9]{0,3})$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs a {@code ExerciseSets}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param exerciseSets A whole number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseSets(String xerciseSets) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(xerciseSets);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        checkArgument(isValidExerciseSets(xerciseSets), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        value \u003d xerciseSets;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if a given string is a valid exercise sets."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static boolean isValidExerciseSets(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return test.equals(EMPTY_STRING) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof ExerciseSets // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 value.equals(((ExerciseSets) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/ExerciseWeight.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Represents the weight (in kg) of an exercise done by a client in FitBiz. Guarantees:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * immutable; is valid as declared in {@link #isValidExerciseWeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseWeight {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \"Input Weight must be a whole number from 1 to 9999 (eg. 65)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([1-9][0-9]{0,3})$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs a {@code ExerciseWeight}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param exerciseWeight A valid exerise weight."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseWeight(String exerciseWeight) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exerciseWeight);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        checkArgument(isValidExerciseWeight(exerciseWeight), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        value \u003d exerciseWeight;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if a given string is a valid exerise weight."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static boolean isValidExerciseWeight(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return test.equals(EMPTY_STRING) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Converts the string value of exercise weight to integer."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public int convertToInt() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (value.equals(EMPTY_STRING)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return Integer.parseInt(value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof ExerciseWeight // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 value.equals(((ExerciseWeight) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 58,
      "ziyingli": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/UniqueExerciseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.EndDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.StartDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * A list of exercises that enforces uniqueness between its elements and does"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * not allow nulls. A exercise is considered unique by comparing using"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code Exercise#isSameexercise(Exercise)}. As such, adding and updating of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * exercises uses Exercise#isSameexercise(Exercise) for equality so as to ensure"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * that the exercise being added or updated is unique in terms of identity in"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * the UniqueexerciseList. However, the removal of a exercise uses"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Exercise#equals(Object) so as to ensure that the exercise with exactly the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * same fields will be removed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @see Exercise#isSameexercise(Exercise)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class UniqueExerciseList implements Iterable\u003cExercise\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalUnmodifiableList \u003d FXCollections"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true if the list contains an equivalent exercise as the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean contains(Exercise toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExercise);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Returns true if the list contains an exercise with the name equivalent as the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * argument."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public boolean containsNameWithinDate(ExerciseName toCheck, StartDate startDate, EndDate endDate) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                .filter(exercise -\u003e (exercise.getExerciseDate().getValue().compareTo(startDate.value) \u003e\u003d 0))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                .filter(exercise -\u003e (exercise.getExerciseDate().getValue().compareTo(endDate.value) \u003c\u003d 0))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                .anyMatch(exercise -\u003e exercise.getExerciseName().getValue().equals(toCheck.getValue()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns {@code Exercise} specified by the {@code Index}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Exercise getExercise(Index index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Adds an exercise to the list without ensuring any order. The exercise must"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * not already exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void add(Exercise toAdd) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Inserts an exercise to the list while ensuring list is sorted by the exercise"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * date in descending order and by exercise name in ascending order."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * The exercise must not already exist in the list. This basically does"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * insertion sort based on the fact that the list must already be sorted in the"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * first place. Do not use this method to add many exercises at once as it is"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * inefficient."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void addToSorted(Exercise toAdd) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        int idx \u003d 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        LocalDate toAddDate \u003d toAdd.getExerciseDate().getValue();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String toAddName \u003d toAdd.getExerciseName().getValue().toLowerCase();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        for (Exercise curr : internalList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            LocalDate currDate \u003d curr.getExerciseDate().getValue();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            String currName \u003d curr.getExerciseName().getValue().toLowerCase();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            int dateComparision \u003d toAddDate.compareTo(currDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            if (dateComparision \u003e 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                // already at correct position"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            } else if (dateComparision \u003d\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                // sort by name"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                if (toAddName.compareTo(currName) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    idx++;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                // toAddDate is later than currDate"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                idx++;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        internalList.add(idx, toAdd);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Replaces the exercise {@code target} in the list with {@code editedExercise}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * {@code target} must exist in the list. The exercise identity of"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code editedExercise} must not be the same as another existing exercise in"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * the list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        remove(target);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!target.isSameExercise(editedExercise) \u0026\u0026 contains(editedExercise)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        addToSorted(editedExercise);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sorts the list by the exercise date in descending order, and if the dates"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * are equal, then by the exercise name in ascending order."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void sortByExerciseDateAndName() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Comparator\u003cExercise\u003e byExerciseDate \u003d (Exercise e1, Exercise e2) -\u003e {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            LocalDate e1Date \u003d e1.getExerciseDate().getValue();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            LocalDate e2Date \u003d e2.getExerciseDate().getValue();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            String e1Name \u003d e1.getExerciseName().getValue().toUpperCase();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            String e2Name \u003d e2.getExerciseName().getValue().toUpperCase();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (e2Date.compareTo(e1Date) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                return e1Name.compareTo(e2Name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return e2Date.compareTo(e1Date);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        };"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FXCollections.sort(internalList, byExerciseDate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Removes the equivalent exercise from the list. The exercise must exist in the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void remove(Exercise toRemove) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercises(UniqueExerciseList replacement) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Replaces the contents of this list with {@code exercises}. {@code exercises}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * must not contain duplicate exercises."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercises(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireAllNonNull(exercises);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!exercisesAreUnique(exercises)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        internalList.setAll(exercises);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ObservableList\u003cExercise\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Iterator\u003cExercise\u003e iterator() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Return size of the exercise list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof UniqueExerciseList // instanceof handles nulls"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueExerciseList) other).internalList));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if {@code exercises} contains only unique exercises."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private boolean exercisesAreUnique(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        for (int i \u003d 0; i \u003c exercises.size() - 1; i++) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            for (int j \u003d i + 1; j \u003c exercises.size(); j++) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                if (exercises.get(i).isSameExercise(exercises.get(j))) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String toReturn \u003d \"\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (Exercise ex : internalList) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            toReturn +\u003d ex.toString() + \"\\n\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return toReturn.trim();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 160,
      "ziyingli": 11,
      "AaronCQL": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/exceptions/DuplicateExerciseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Signals that the operation will result in duplicate Exercises"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * (Exercises are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class DuplicateExerciseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public DuplicateExerciseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        super(\"Operation would result in duplicate exercises\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/exceptions/ExerciseNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Signals that the operation is unable to find the specified exercise."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/graph/Axis.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Represents the y-axis of the graph of exercises."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class Axis {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        \"The y-axis can only be \\\"reps\\\" or \\\"weight\\\" (case insensitive) and it should not be blank. \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final AxisType value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public Axis(String axis) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(axis);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        checkArgument(isValidAxis(axis), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        value \u003d AxisType.getAxisType(axis.toLowerCase());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public AxisType getAxisType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static boolean isValidAxis(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return test.equalsIgnoreCase(\"reps\") || test.equalsIgnoreCase(\"weight\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                || (other instanceof Axis // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                        \u0026\u0026 value.equals(((Axis) other).value)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 5,
      "ziyingli": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/graph/AxisType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * The type of axis that user can plot"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public enum AxisType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    REPS, WEIGHT, NA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static AxisType getAxisType (String value) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        switch (value) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case \"reps\":"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return REPS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case \"weight\":"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return WEIGHT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        switch(this) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case REPS:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return \"reps\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case WEIGHT:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return \"weight\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/graph/EndDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Represents the end date of the graph of exercises. Guarantees: immutable; is"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * valid as declared in {@link #isValidEndDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class EndDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \"End date input should be in the form DD-MM-YYYY and should not be before start date or blank. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"It should only be from within one year before to the current date. eg. 18-12-2019. \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public final String displayValue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public EndDate(String date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        checkArgument(isValidEndDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.value \u003d LocalDate.parse(date, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.displayValue \u003d date; // assuming date string is valid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Tests if endDate is a valid date, within a year prior to current date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @param test String to be tested."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @return Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static Boolean isValidEndDate(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            LocalDate testDate \u003d LocalDate.parse(test, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            LocalDate dateNowMinusOneYear \u003d dateNow.minusYears(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            if (dateNow.isBefore(testDate)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            } else if (dateNowMinusOneYear.isAfter(testDate)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return this.value.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                || (other instanceof EndDate // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                        \u0026\u0026 value.equals(((EndDate) other).value)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/graph/Graph.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Represents a graph of an exercise done by a client. Guarantees: details are"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class Graph {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private final ExerciseName exerciseName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private final Axis axis;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private final StartDate startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private final EndDate endDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public Graph(ExerciseName exerciseName, Axis axis, StartDate startDate, EndDate endDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireAllNonNull(exerciseName, axis, startDate, endDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.exerciseName \u003d exerciseName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.axis \u003d axis;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public ExerciseName getExerciseName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return exerciseName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public Axis getAxis() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return axis;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public StartDate getStartDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public EndDate getEndDate() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Generates a list of exercises to be displayed in the graph."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @param client The client in view"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @return The list of filtered exercises"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public List\u003cExercise\u003e generateGraphList(Client client) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        List\u003cExercise\u003e exerciseList \u003d client.getExerciseList().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Comparator\u003cExercise\u003e exerciseComparator \u003d (e1, e2)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            -\u003e e1.getExerciseDate().value.compareTo(e2.getExerciseDate().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Stream\u003cExercise\u003e graphList \u003d exerciseList.stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                .filter(exercise -\u003e exercise.getExerciseName().equals(exerciseName))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                .filter(exercise -\u003e (exercise.getExerciseDate().value.compareTo(startDate.value) \u003e\u003d 0))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                .filter(exercise -\u003e (exercise.getExerciseDate().value.compareTo(endDate.value) \u003c\u003d 0))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                .sorted(exerciseComparator);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        switch (axis.getAxisType()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case REPS:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            graphList \u003d graphList.filter(exercise -\u003e !exercise.getExerciseReps().value.isEmpty());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case WEIGHT:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            graphList \u003d graphList.filter(exercise -\u003e !exercise.getExerciseWeight().value.isEmpty());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return graphList.collect(Collectors.toList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Returns true if both graph of the same name, axis, startDate and endDate."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!(other instanceof Graph)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Graph otherGraph \u003d (Graph) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return otherGraph !\u003d null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                \u0026\u0026 otherGraph.getExerciseName().equals(getExerciseName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                \u0026\u0026 otherGraph.getAxis().equals(getAxis())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                \u0026\u0026 otherGraph.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                \u0026\u0026 otherGraph.getEndDate().equals(getEndDate());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6,
      "ziyingli": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/graph/StartDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Represents the start date of the graph of exercises. Guarantees: immutable; is"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * valid as declared in {@link #isValidStartDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class StartDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \"Start date input should be in the form DD-MM-YYYY and should not be after end date or blank. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"The accepted range of dates is today to one year before today. eg. 18-07-2019.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public final String displayValue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public StartDate(String date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        checkArgument(isValidStartDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.value \u003d LocalDate.parse(date, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.displayValue \u003d date; // assuming date string is valid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Tests if startDate is a valid date, within a year prior to current date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @param test String to be tested."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @return Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static Boolean isValidStartDate(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            LocalDate testDate \u003d LocalDate.parse(test, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            LocalDate dateNowMinusOneYear \u003d dateNow.minusYears(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            if (dateNow.isBefore(testDate)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            } else if (dateNowMinusOneYear.isAfter(testDate)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return this.value.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                || (other instanceof StartDate // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                        \u0026\u0026 value.equals(((StartDate) other).value)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/Day.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.DayEnum.Weekday;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Represents the Day of a schedule. Guarantees: immutable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * is valid as declared in {@link #isValidDay(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            \"Day should be the first 3 letters of the day, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[[a-zA-Z]]{3}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public final Weekday value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Constructs a {@code Day}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param day A valid day with first 3 letters of the day."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public Day(String day) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        checkArgument(isValidDay(day), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.value \u003d assignDay(day);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Private constructor for cloning Day using the Weekday enum."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private Day(Weekday day) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.value \u003d day;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public Day clone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new Day(this.value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Checks if input String is a valid three-lettered day."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return true if is valid day"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static boolean isValidDay(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String lowerCaseTest \u003d test.toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        switch (lowerCaseTest) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"sun\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"mon\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"tue\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"wed\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"thu\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"fri\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"sat\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Assigns a weekday based on the day input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return day of the week"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private Weekday assignDay(String day) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String lowerCaseDay \u003d day.toLowerCase();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        switch (lowerCaseDay) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"sun\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Weekday.SUN;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"mon\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Weekday.MON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"tue\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Weekday.TUE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"wed\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Weekday.WED;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"thu\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Weekday.THU;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"fri\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Weekday.FRI;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"sat\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Weekday.SAT;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public Weekday getDayEnum() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                || (other instanceof Day // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                \u0026\u0026 value.equals(((Day) other).value)); // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 84,
      "Dban1": 18,
      "AaronCQL": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/DayEnum.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Wrapper class for WeekDay enum."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class DayEnum {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Enumerates the seven days of the week."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public enum Weekday { SUN, MON, TUE, WED, THU, FRI, SAT }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 2,
      "Dban1": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/EndTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Represents the end time of a schedule of a client. Guarantees: immutable; is"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * valid as declared in {@link #isValidTimingFormat(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class EndTime extends Time {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public final int directTimeInt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Constructs a {@code EndTime}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param time A valid end time in the form HHMM"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public EndTime(String time) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        super(time);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.value \u003d formatTime(time);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.directTimeInt \u003d Integer.parseInt(time);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EndTime clone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String rawTime \u003d this.value.substring(0, 2) + this.value.substring(3);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new EndTime(rawTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 23,
      "Dban1": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/Schedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Represents a Schedule in the Client."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class Schedule implements Comparable\u003cSchedule\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Schedule day should be the first 3 letters of the day. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"Timings should be given in 24 hour format and in HHmm format. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"Start time cannot be later than end time.\\nMaximum range is 0000-2359.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \" Example usage: schedule 1 sch/MON-1100-1200\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final Day day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final StartTime startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final EndTime endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private String clientName \u003d \"unnamed\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public Schedule(Day day, StartTime startTime, EndTime endTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireAllNonNull(day, startTime, endTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        checkArgument(isValidTimeFrame(startTime.toString(), endTime.toString()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param startTime"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param endTime"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return Checks if end time is later than start time, assuming they are of valid format \"hhmm\". End time"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * and start time cannot be simultaneously 0000. If end time is 0000, it is assumed as the next day."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static boolean isValidTimeFrame(String startTime, String endTime) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // End time cannot be 0000"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (endTime.equals(\"00:00\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Start time cannot equal End time"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (startTime.equals(endTime)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Check if End time is later than Start time"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return (LocalTime.parse(endTime).compareTo(LocalTime.parse(startTime)) \u003e 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns a schedule with a client name tagged to it."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void assignClientName(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.clientName \u003d s;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @author tohkerwei"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param scheduleString a schedule in string format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return a schedule object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static Schedule stringToSchedule(String scheduleString) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String[] tokens \u003d scheduleString.split(\" \", 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Day day \u003d new Day(tokens[0]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        StartTime startTime \u003d new StartTime(tokens[2].substring(0, 2) + tokens[2].substring(3, 5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        EndTime endTime \u003d new EndTime(tokens[4].substring(0, 2) + tokens[4].substring(3, 5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return new Schedule(day, startTime, endTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return this.day;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public StartTime getStartTime() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public EndTime getEndTime() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return this.endTime;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public double getHours() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(this.startTime.getTime());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(this.endTime.getTime());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return (double) ChronoUnit.HOURS.between(start, end);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns a clone of Schedule."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public Schedule clone() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Day clonedDay \u003d this.day.clone();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        StartTime clonedStartTime \u003d this.startTime.clone();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EndTime clonedEndTime \u003d this.endTime.clone();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String clonedClientName \u003d this.clientName;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Schedule clonedSchedule \u003d new Schedule(clonedDay, clonedStartTime, clonedEndTime);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clonedSchedule.assignClientName(clonedClientName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return clonedSchedule;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Returns true if both schedule have the same attribute values"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!(other instanceof Schedule)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Schedule otherSchedule \u003d (Schedule) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int otherSt \u003d otherSchedule.getStartTime().getDirectTimeInt();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int otherEt \u003d otherSchedule.getEndTime().getDirectTimeInt();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int thisSt \u003d this.getStartTime().getDirectTimeInt();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int thisEt \u003d this.getEndTime().getDirectTimeInt();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Checks if there are overlaps between 2 schedules."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return otherSchedule.getDay().equals(getDay())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                \u0026\u0026 (thisSt \u003d\u003d otherSt)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                \u0026\u0026 (thisEt \u003d\u003d otherEt);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return Objects.hash(day, startTime, endTime);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        builder.append(getDay())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                .append(getStartTime())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                .append(\" - \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                .append(getEndTime());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public String getTimeFrame() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String timeFrame \u003d getStartTime().toString() + \" - \" + getEndTime().toString();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return timeFrame;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public int compareTo(Schedule other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Schedule otherSchedule \u003d other;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int otherSt \u003d other.getStartTime().getDirectTimeInt();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int otherEt \u003d other.getEndTime().getDirectTimeInt();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int thisSt \u003d this.getStartTime().getDirectTimeInt();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int thisEt \u003d this.getEndTime().getDirectTimeInt();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Checks if there are overlaps between 2 schedules."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (otherSchedule.getDay().equals(getDay())) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            if (((otherSt \u003c thisSt) \u0026\u0026 (otherEt \u003c thisSt)) || (otherSt \u003e thisEt)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                return otherSt - thisSt;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            DayEnum.Weekday otherWeekday \u003d otherSchedule.getDay().getDayEnum();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            DayEnum.Weekday thisWeekday \u003d this.getDay().getDayEnum();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return otherWeekday.compareTo(thisWeekday);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public String getClientName() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this.clientName;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 61,
      "Dban1": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/ScheduleDay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Contains a sorted list of Schedule for the day."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * @author @Dban1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class ScheduleDay {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final ArrayList\u003cSchedule\u003e scheduleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final String dayName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleDay(ArrayList\u003cSchedule\u003e scheduleList, String dayName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.scheduleList \u003d scheduleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.scheduleList.sort(Comparator.comparingInt(o -\u003e o.getStartTime().getDirectTimeInt()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.dayName \u003d dayName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns a list of weekly schedule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param allClientScheduleList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static ObservableList\u003cScheduleDay\u003e weeklySchedule(ArrayList\u003cScheduleList\u003e allClientScheduleList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ObservableList\u003cScheduleDay\u003e scheduleDayList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e mondaySchedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e tuesdaySchedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e wednesdaySchedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e thursdaySchedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e fridaySchedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e saturdaySchedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e sundaySchedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        for (ScheduleList sl : allClientScheduleList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            for (Schedule s : sl.getArrayList()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                switch (s.getDay().getDayEnum()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                case MON:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    mondaySchedule.add(s);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                case TUE:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    tuesdaySchedule.add(s);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                case WED:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    wednesdaySchedule.add(s);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                case THU:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    thursdaySchedule.add(s);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                case FRI:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    fridaySchedule.add(s);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                case SAT:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    saturdaySchedule.add(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                case SUN:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    sundaySchedule.add(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleDayList.add(new ScheduleDay(sundaySchedule, \"SUN\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleDayList.add(new ScheduleDay(mondaySchedule, \"MON\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleDayList.add(new ScheduleDay(tuesdaySchedule, \"TUE\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleDayList.add(new ScheduleDay(wednesdaySchedule, \"WED\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleDayList.add(new ScheduleDay(thursdaySchedule, \"THU\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleDayList.add(new ScheduleDay(fridaySchedule, \"FRI\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleDayList.add(new ScheduleDay(saturdaySchedule, \"SAT\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return scheduleDayList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public String getDayName() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this.dayName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public String getDayScheduleString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        final StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        for (Schedule s : scheduleList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            sb.append(s.getTimeFrame() + \" \" + s.getClientName() + \"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public int getNumberOfSchedules() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this.scheduleList.size();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/ScheduleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class ScheduleList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private ArrayList\u003cSchedule\u003e scheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.scheduleList \u003d new ArrayList\u003cSchedule\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleList(ArrayList\u003cSchedule\u003e scheduleList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.scheduleList \u003d scheduleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Sets schedule using an ArrayList of Schedule."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void setSchedule(ArrayList\u003cSchedule\u003e newScheduleList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireAllNonNull(newScheduleList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        scheduleList \u003d newScheduleList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns a deep copy of this ScheduleList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleList duplicate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ScheduleList copiedList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        copiedList.setSchedule(this.scheduleList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return new ScheduleList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void add(Schedule schedule) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        scheduleList.add(schedule);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public ArrayList\u003cSchedule\u003e getArrayList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return scheduleList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return scheduleList.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String toReturn \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (Schedule schedule : scheduleList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            toReturn +\u003d schedule.toString() + \"\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return toReturn.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 39,
      "Dban1": 19,
      "AaronCQL": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/StartTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Represents the start time of a schedule of a client. Guarantees: immutable; is"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * valid as declared in {@link #isValidTimingFormat(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class StartTime extends Time {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public final int directTimeInt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Constructs a {@code StartTime}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param time A valid start time in the form HHMM"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public StartTime(String time) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        super(time);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.value \u003d formatTime(time);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.directTimeInt \u003d Integer.parseInt(time);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public StartTime clone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String rawTime \u003d this.value.substring(0, 2) + this.value.substring(3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new StartTime(rawTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 23,
      "Dban1": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Abstract Time class that contains the basic implementations for Time management."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public abstract class Time {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            \"Time input should be in the format HHMM and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public final int directTimeInt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param time A valid end time in the form HHMM"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public Time(String time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        checkArgument(isValidTimingFormat(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.value \u003d formatTime(time);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.directTimeInt \u003d Integer.parseInt(time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Checks if the input timing is of valid \"HHMM\" format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * * @param time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return true if time is of correct format of \"HHMM\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static boolean isValidTimingFormat(String time) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            if (time.length() !\u003d 4) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            String formattedTime \u003d time.substring(0, 2) + \":\" + time.substring(2, 4);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            LocalTime.parse(formattedTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Formats a HHMM time to HH:MM"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param time time in string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return formatted time in HH:MM"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static String formatTime(String time) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String formattedEndTime \u003d time.substring(0, 2) + \":\" + time.substring(2, 4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return formattedEndTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String time \u003d value.substring(0, 2) + value.substring(3, 5);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                \u0026\u0026 value.equals(((Time) other).value)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public int getDirectTimeInt() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return this.directTimeInt;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 79,
      "Dban1": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Tag in FitBiz."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return test.equals(EMPTY_STRING) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 3,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Birthday;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.CurrentWeight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.PersonalBest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.TargetWeight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseSets;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.schedule.Day;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.schedule.EndTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.schedule.StartTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Contains utility methods for populating {@code FitBiz} with sample data."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static Client[] getSampleClients() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ScheduleList alexScheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexScheduleList.add(new Schedule(new Day(\"mon\"), new StartTime(\"1100\"), new EndTime(\"1230\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexScheduleList.add(new Schedule(new Day(\"tue\"), new StartTime(\"1700\"), new EndTime(\"1900\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        UniqueExerciseList alexExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Bench Press\"), new ExerciseReps(\"8\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"3\"), new ExerciseWeight(\"82\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(1).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Bench Press\"), new ExerciseReps(\"6\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"2\"), new ExerciseWeight(\"85\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(5).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Bench Press\"), new ExerciseReps(\"7\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"3\"), new ExerciseWeight(\"80\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(12).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Barbell Squat\"), new ExerciseReps(\"5\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"4\"), new ExerciseWeight(\"125\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(1).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Barbell Squat\"), new ExerciseReps(\"3\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"4\"), new ExerciseWeight(\"145\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(5).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Barbell Squat\"), new ExerciseReps(\"2\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"3\"), new ExerciseWeight(\"150\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(12).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Sumo Deadlift\"), new ExerciseReps(\"5\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"2\"), new ExerciseWeight(\"165\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(1).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Sumo Deadlift\"), new ExerciseReps(\"3\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"2\"), new ExerciseWeight(\"185\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(5).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Sumo Deadlift\"), new ExerciseReps(\"4\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"3\"), new ExerciseWeight(\"180\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(12).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ScheduleList berniceScheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        berniceScheduleList.add(new Schedule(new Day(\"mon\"), new StartTime(\"1100\"), new EndTime(\"1230\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        berniceScheduleList.add(new Schedule(new Day(\"fri\"), new StartTime(\"1700\"), new EndTime(\"1900\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ScheduleList irfanScheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        irfanScheduleList.add(new Schedule(new Day(\"sat\"), new StartTime(\"1200\"), new EndTime(\"1400\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        irfanScheduleList.add(new Schedule(new Day(\"tue\"), new StartTime(\"1200\"), new EndTime(\"1400\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ScheduleList royScheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        royScheduleList.add(new Schedule(new Day(\"sat\"), new StartTime(\"0900\"), new EndTime(\"1100\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ScheduleList amyScheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        amyScheduleList.add(new Schedule(new Day(\"thu\"), new StartTime(\"1945\"), new EndTime(\"2115\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        amyScheduleList.add(new Schedule(new Day(\"sat\"), new StartTime(\"1945\"), new EndTime(\"2115\")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new Client[] {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            new Client(new Name(\"Alex Yeoh\"), new Gender(\"Male\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    new Email(\"alexyeoh@example.com\"), new Address(\"Blk 69 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getTagSet(\"Paleo\"), new Birthday(\"25-12-1997\"), new CurrentWeight(\"70\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                    new TargetWeight(\"75\"), new Height(\"170\"), new Remark(\"Diet may not be good\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getSportSet(\"Sumo Wrestling\"), alexExerciseList, new PersonalBest(), alexScheduleList),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            new Client(new Name(\"Bernice Yu\"), new Gender(\"Female\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    new Email(\"berniceyu@example.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getTagSet(\"Normal\"), new Birthday(\"29-02-2000\"), new CurrentWeight(\"55.8\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    new TargetWeight(\"50\"), new Height(\"160\"), new Remark(\"\"), getSportSet(\"Hockey\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    new UniqueExerciseList(), new PersonalBest(), berniceScheduleList),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            new Client(new Name(\"Irfan Ibrahim\"), new Gender(\"Male\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    new Email(\"irfan@example.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getTagSet(\"Halal\"), new Birthday(\"12-08-1975\"), new CurrentWeight(\"70\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                    new TargetWeight(\"75\"), new Height(\"180\"), new Remark(\"Requires protein\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getSportSet(\"Soccer\"), new UniqueExerciseList(), new PersonalBest(), irfanScheduleList),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            new Client(new Name(\"Roy Balakrishnan\"), new Gender(\"Male\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    new Email(\"royb@example.com\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getTagSet(\"Vegan\"), new Birthday(\"05-12-1990\"), new CurrentWeight(\"67.4\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                    new TargetWeight(\"75\"), new Height(\"174\"), new Remark(\"History of past injuries\"),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getSportSet(\"Belly Dance\"), new UniqueExerciseList(), new PersonalBest(), royScheduleList),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            new Client(new Name(\"Amy Ang\"), new Gender(\"Female\"), new Phone(\"97227128\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    new Email(\"amyyyy@example.com\"), new Address(\"Blk 90 Sunset Way, #20-18\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getTagSet(\"Normal\"), new Birthday(\"12-05-1970\"), new CurrentWeight(\"61.2\"),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                    new TargetWeight(\"60\"), new Height(\"165\"), new Remark(\"History of past injuries\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getSportSet(\"Fencing\"), new UniqueExerciseList(), new PersonalBest(), amyScheduleList) };"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static ReadOnlyFitBiz getSampleFitBiz() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        FitBiz sampleAb \u003d new FitBiz();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        for (Client sampleClient : getSampleClients()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            sampleAb.addClient(sampleClient);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return Arrays.stream(strings).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Returns a sport set containing the list of strings given."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static Set\u003cSport\u003e getSportSet(String... strings) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                .map(Sport::new)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 8,
      "ziyingli": 1,
      "tohkerwei": 21,
      "Dban1": 4,
      "AaronCQL": 83,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/FitBizStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Represents a storage for {@link FitBiz}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public interface FitBizStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    Path getFitBizFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns FitBiz data as a {@link ReadOnlyFitBiz}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    Optional\u003cReadOnlyFitBiz\u003e readFitBiz() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @see #getFitBizFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    Optional\u003cReadOnlyFitBiz\u003e readFitBiz(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Saves the given {@link ReadOnlyFitBiz} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param fitBiz cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    void saveFitBiz(ReadOnlyFitBiz fitBiz) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @see #saveFitBiz(ReadOnlyFitBiz)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    void saveFitBiz(ReadOnlyFitBiz fitBiz, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6,
      "AaronCQL": 8,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedClient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Birthday;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.CurrentWeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.PersonalBest;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.TargetWeight;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Jackson-friendly version of {@link Client}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "class JsonAdaptedClient {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Client\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String birthday;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private final String height;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String targetWeight;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String currentWeight;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final List\u003cJsonAdaptedSport\u003e sports \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final List\u003cJsonAdaptedExercise\u003e exerciseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final List\u003cJsonAdaptedSchedule\u003e scheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Constructs a {@code JsonAdaptedClient} with the given client details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public JsonAdaptedClient(@JsonProperty(\"name\") String name, @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            @JsonProperty(\"address\") String address, @JsonProperty(\"birthday\") String birthday,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"currentWeight\") String currentWeight,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            @JsonProperty(\"targetWeight\") String targetWeight, @JsonProperty(\"height\") String height,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            @JsonProperty(\"remark\") String remark, @JsonProperty(\"sports\") List\u003cJsonAdaptedSport\u003e sports,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            @JsonProperty(\"exerciseList\") List\u003cJsonAdaptedExercise\u003e exerciseList,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            @JsonProperty(\"scheduleList\") List\u003cJsonAdaptedSchedule\u003e scheduleList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.currentWeight \u003d currentWeight;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.targetWeight \u003d targetWeight;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (sports !\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            this.sports.addAll(sports);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (exerciseList !\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.exerciseList.addAll(exerciseList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (scheduleList !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            this.scheduleList.addAll(scheduleList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Converts a given {@code Client} into this class for Jackson use."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public JsonAdaptedClient(Client source) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        gender \u003d source.getGender().value;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        birthday \u003d source.getBirthday().displayValue;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        height \u003d source.getHeight().value;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        currentWeight \u003d source.getCurrentWeight().value;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        targetWeight \u003d source.getTargetWeight().value;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        sports.addAll(source.getSports().stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                .map(JsonAdaptedSport::new)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        exerciseList.addAll(source.getExerciseList()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .map(JsonAdaptedExercise::new)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        scheduleList.addAll(source.getScheduleList().getArrayList().stream()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    .map(JsonAdaptedSchedule::new)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Converts this Jackson-friendly adapted client object into the model\u0027s"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code Client} object."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *                               the adapted client."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public Client toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        final List\u003cTag\u003e clientTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            clientTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(clientTags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final List\u003cSport\u003e clientSports \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (JsonAdaptedSport sport : sports) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            clientSports.add(sport.toModelType());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final Set\u003cSport\u003e modelSport \u003d new HashSet\u003c\u003e(clientSports);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final UniqueExerciseList modelExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (JsonAdaptedExercise ex : exerciseList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            modelExerciseList.add(ex.toModelType());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        modelExerciseList.sortByExerciseDateAndName(); // do a sanity presort to ensure initial list is sorted"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        final PersonalBest modelPersonalBest \u003d new PersonalBest();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final ScheduleList modelScheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (JsonAdaptedSchedule schedule : scheduleList) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            modelScheduleList.add(schedule.toModelType());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (birthday \u003d\u003d null) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Birthday.class.getSimpleName()));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!Birthday.isValidBirthday(birthday)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(Birthday.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final Birthday modelBirthday \u003d new Birthday(birthday);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (height \u003d\u003d null) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Height.class.getSimpleName()));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!Height.isValidHeight(height)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        final Height modelHeight \u003d new Height(height);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (currentWeight \u003d\u003d null) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, CurrentWeight.class.getSimpleName()));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!CurrentWeight.isValidWeight(currentWeight)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(CurrentWeight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final CurrentWeight modelCurrentWeight \u003d new CurrentWeight(currentWeight);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (targetWeight \u003d\u003d null) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, TargetWeight.class.getSimpleName()));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!TargetWeight.isValidWeight(targetWeight)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(TargetWeight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final TargetWeight modelTargetWeight \u003d new TargetWeight(targetWeight);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new Client(modelName, modelGender, modelPhone, modelEmail, modelAddress, modelTags, modelBirthday,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                modelCurrentWeight, modelTargetWeight, modelHeight, modelRemark, modelSport, modelExerciseList,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                modelPersonalBest, modelScheduleList);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 19,
      "ziyingli": 15,
      "tohkerwei": 16,
      "Dban1": 15,
      "AaronCQL": 83,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseSets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Jackson-friendly version of {@link Exercise}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "class JsonAdaptedExercise {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Exercise %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String exerciseName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String exerciseReps;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String exerciseSets;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String exerciseWeight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String exerciseDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Constructs a {@code JsonAdaptedExercise} with the given {@code Exercise}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public JsonAdaptedExercise(@JsonProperty(\"exerciseName\") String exerciseName,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            @JsonProperty(\"exerciseReps\") String exerciseReps, @JsonProperty(\"exerciseSets\") String exerciseSets,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            @JsonProperty(\"exerciseWeight\") String exerciseWeight, @JsonProperty(\"exerciseDate\") String exerciseDate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.exerciseName \u003d exerciseName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.exerciseReps \u003d exerciseReps;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.exerciseSets \u003d exerciseSets;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.exerciseWeight \u003d exerciseWeight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.exerciseDate \u003d exerciseDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Converts a given {@code Exercise} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public JsonAdaptedExercise(Exercise source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        exerciseName \u003d source.getExerciseName().value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseReps \u003d source.getExerciseReps().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseSets \u003d source.getExerciseSets().value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        exerciseWeight \u003d source.getExerciseWeight().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseDate \u003d source.getExerciseDate().displayValue;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Converts this Jackson-friendly adapted exercise object into the model\u0027s"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code Exercise} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *                               the adapted exercise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Exercise toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (exerciseName \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ExerciseName.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!ExerciseName.isValidExerciseName(exerciseName)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final ExerciseName modelExerciseName \u003d new ExerciseName(exerciseName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (exerciseReps \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ExerciseReps.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!ExerciseReps.isValidExerciseReps(exerciseReps)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(ExerciseReps.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final ExerciseReps modelExerciseReps \u003d new ExerciseReps(exerciseReps);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (exerciseSets \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ExerciseSets.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!ExerciseSets.isValidExerciseSets(exerciseSets)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(ExerciseSets.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final ExerciseSets modelExerciseSets \u003d new ExerciseSets(exerciseSets);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (exerciseWeight \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ExerciseWeight.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!ExerciseWeight.isValidExerciseWeight(exerciseWeight)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(ExerciseWeight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final ExerciseWeight modelExerciseWeight \u003d new ExerciseWeight(exerciseWeight);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (exerciseDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ExerciseDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!ExerciseDate.isValidExerciseDate(exerciseDate)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(ExerciseDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final ExerciseDate modelExerciseDate \u003d new ExerciseDate(exerciseDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new Exercise(modelExerciseName, modelExerciseReps, modelExerciseSets, modelExerciseWeight,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                modelExerciseDate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 3,
      "AaronCQL": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Day;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.EndTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.StartTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Jackson-friendly version of {@link Schedule}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "class JsonAdaptedSchedule {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Schedule %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final String clientName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Constructs a {@code JsonAdaptedSchedule} with the given {@code Schedule}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public JsonAdaptedSchedule(@JsonProperty(\"day\") String day, @JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            @JsonProperty(\"endTime\") String endTime, @JsonProperty(\"clientName\") String clientName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.clientName \u003d clientName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Converts a given {@code Schedule} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public JsonAdaptedSchedule(Schedule source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        day \u003d source.getDay().value.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        startTime \u003d source.getStartTime().getTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        endTime \u003d source.getEndTime().getTime();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clientName \u003d source.getClientName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Converts this Jackson-friendly adapted schedule object into the model\u0027s"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * {@code Schedule} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *                               the adapted schedule."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public Schedule toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (day \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!Day.isValidDay(day)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        final Day modelDay \u003d new Day(day);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, StartTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!StartTime.isValidTimingFormat(startTime)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            throw new IllegalValueException(StartTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        final StartTime modelStartTime \u003d new StartTime(startTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, EndTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!EndTime.isValidTimingFormat(endTime)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            throw new IllegalValueException(EndTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        final EndTime modelEndTime \u003d new EndTime(endTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (clientName \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        final String modelClientName \u003d clientName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Schedule schedule \u003d new Schedule(modelDay, modelStartTime, modelEndTime);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        schedule.assignClientName(modelClientName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 74,
      "Dban1": 13,
      "AaronCQL": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSport.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Jackson-friendly version of {@link Sport}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "class JsonAdaptedSport {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final String sportName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Constructs a {@code JsonAdaptedSport} with the given {@code sportName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public JsonAdaptedSport(String sportName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.sportName \u003d sportName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Converts a given {@code Sport} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public JsonAdaptedSport(Sport source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        sportName \u003d source.sportName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String getSportName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return sportName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Converts this Jackson-friendly adapted sport object into the model\u0027s {@code Sport} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted sport."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public Sport toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!Sport.isValidSport(sportName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            throw new IllegalValueException(Sport.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return new Sport(sportName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonFitBizStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * A class to access FitBiz data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class JsonFitBizStorage implements FitBizStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFitBizStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public JsonFitBizStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Path getFitBizFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Optional\u003cReadOnlyFitBiz\u003e readFitBiz() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return readFitBiz(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Similar to {@link #readFitBiz()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Optional\u003cReadOnlyFitBiz\u003e readFitBiz(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Optional\u003cJsonSerializableFitBizStorage\u003e jsonFitBiz \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                filePath, JsonSerializableFitBizStorage.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!jsonFitBiz.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Optional.of(jsonFitBiz.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void saveFitBiz(ReadOnlyFitBiz fitBiz) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        saveFitBiz(fitBiz, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Similar to {@link #saveFitBiz(ReadOnlyFitBiz)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void saveFitBiz(ReadOnlyFitBiz fitBiz, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(fitBiz);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFitBizStorage(fitBiz), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 12,
      "AaronCQL": 8,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableFitBizStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * An Immutable FitBiz that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "@JsonRootName(value \u003d \"fitbiz\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "class JsonSerializableFitBizStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"Clients list contains duplicate client(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final List\u003cJsonAdaptedClient\u003e clients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs a {@code JsonSerializableFitBizStorage} with the given clients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public JsonSerializableFitBizStorage(@JsonProperty(\"clients\") List\u003cJsonAdaptedClient\u003e clients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.clients.addAll(clients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Converts a given {@code ReadOnlyFitBiz} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFitBizStorage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public JsonSerializableFitBizStorage(ReadOnlyFitBiz source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clients.addAll(source.getClientList().stream().map(JsonAdaptedClient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Converts this FitBiz into the model\u0027s {@code FitBiz} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public FitBiz toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        FitBiz fitBiz \u003d new FitBiz();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        for (JsonAdaptedClient jsonAdaptedClient : clients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            Client client \u003d jsonAdaptedClient.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            if (fitBiz.hasClient(client)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            fitBiz.addClient(client);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return fitBiz;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 12,
      "Dban1": 8,
      "AaronCQL": 4,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public interface Storage extends FitBizStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    Path getFitBizFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    Optional\u003cReadOnlyFitBiz\u003e readFitBiz() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    void saveFitBiz(ReadOnlyFitBiz fitBiz) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 2,
      "AaronCQL": 3,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Manages storage of FitBiz data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private FitBizStorage fitBizStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public StorageManager(FitBizStorage fitBizStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.fitBizStorage \u003d fitBizStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FitBiz methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Path getFitBizFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return fitBizStorage.getFitBizFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Optional\u003cReadOnlyFitBiz\u003e readFitBiz() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return readFitBiz(fitBizStorage.getFitBizFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Optional\u003cReadOnlyFitBiz\u003e readFitBiz(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return fitBizStorage.readFitBiz(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void saveFitBiz(ReadOnlyFitBiz fitBiz) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        saveFitBiz(fitBiz, fitBizStorage.getFitBizFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void saveFitBiz(ReadOnlyFitBiz fitBiz, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        fitBizStorage.saveFitBiz(fitBiz, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 11,
      "AaronCQL": 5,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * An UI component that displays information of a {@code Client}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class ClientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final String FXML \u003d \"ClientListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public final Client client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label sports;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientCard(Client client, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        name.setText(client.getName().fullName + \" \" + client.buildBirthdayAndGender());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String phoneLabel \u003d \"Phone: \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String phoneAttributeForDisplay \u003d getAttributeForDisplay(client.getPhone().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String fullPhoneForDisplay \u003d phoneLabel + phoneAttributeForDisplay;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        phone.setText(fullPhoneForDisplay);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String emailLabel \u003d \"Email: \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String emailAttributeForDisplay \u003d getAttributeForDisplay(client.getEmail().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String fullEmailForDisplay \u003d emailLabel + emailAttributeForDisplay;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        email.setText(fullEmailForDisplay);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String addressLabel \u003d \"Address: \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String addressAttributeForDisplay \u003d getAttributeForDisplay(client.getAddress().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String fullAddressForDisplay \u003d addressLabel + addressAttributeForDisplay;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        address.setText(fullAddressForDisplay);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String sportsLabel \u003d \"Sports: \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String sportsAttributeForDisplay \u003d getAttributeForDisplay(client.getSportsString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String fullSportsForDisplay \u003d sportsLabel + sportsAttributeForDisplay;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        sports.setText(fullSportsForDisplay);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        client.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (!(other instanceof ClientCard)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ClientCard card \u003d (ClientCard) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                \u0026\u0026 client.equals(card.client);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private String getAttributeForDisplay(String string) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String emptyString \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return !string.equals(emptyString) ? string : \"-\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 17,
      "Dban1": 11,
      "AaronCQL": 11,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Panel containing the list of clients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class ClientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final String FXML \u003d \"ClientListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ClientListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private ListView\u003cClient\u003e clientListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientListPanel(ObservableList\u003cClient\u003e clientList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clientListView.setItems(clientList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clientListView.setCellFactory(listView -\u003e new ClientListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Client} using a {@code ClientCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    class ClientListViewCell extends ListCell\u003cClient\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        protected void updateItem(Client client, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            super.updateItem(client, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            if (empty || client \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                setGraphic(new ClientCard(client, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * An UI component that displays detailed information of a {@code Client}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * For e.g. personal bests and age."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ClientView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String FXML \u003d \"ClientView.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * keywords in JavaFX. As a consequence, UI elements\u0027 variable names cannot be"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * set to such keywords or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *      issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Client client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label birthday;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label currentWeight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label targetWeight;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label height;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private FlowPane sports;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ClientView(Client client) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        name.setText(client.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String genderLabel \u003d \"Gender: \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String genderAttributeForDisplay \u003d getAttributeForDisplay(client.getGender().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String fullGenderForDisplay \u003d genderLabel + genderAttributeForDisplay;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        gender.setText(fullGenderForDisplay);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String birthdayLabel \u003d \"Birthday: \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String birthdayAttributeForDisplay \u003d getAttributeForDisplay(client.getBirthdayString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String fullBirthdayForDisplay \u003d birthdayLabel + birthdayAttributeForDisplay;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        birthday.setText(fullBirthdayForDisplay);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String heightLabel \u003d \"Height: \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String heightAttributeForDisplay \u003d getAttributeForDisplay(client.getHeight().value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String fullHeightForDisplay \u003d heightLabel + heightAttributeForDisplay;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        height.setText(fullHeightForDisplay);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String currentWeightLabel \u003d \"Current Weight: \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String currentWeightAttributeForDisplay \u003d getAttributeForDisplay(client.getCurrentWeight().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String fullCurrentWeightForDisplay \u003d currentWeightLabel + currentWeightAttributeForDisplay;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        currentWeight.setText(fullCurrentWeightForDisplay);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String targetWeightLabel \u003d \"Target Weight: \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String targetWeightAttributeForDisplay \u003d getAttributeForDisplay(client.getTargetWeight().value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String fullTargetWeightForDisplay \u003d targetWeightLabel + targetWeightAttributeForDisplay;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        targetWeight.setText(fullTargetWeightForDisplay);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String remarkLabel \u003d \"Remark: \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String remarkAttributeForDisplay \u003d getAttributeForDisplay(client.getRemark().value);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String fullRemarkForDisplay \u003d remarkLabel + remarkAttributeForDisplay;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        remark.setText(fullRemarkForDisplay);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getClientInViewName() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return client.getName().fullName;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!(other instanceof ClientView)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ClientView card \u003d (ClientView) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return client.equals(card.client);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private String getAttributeForDisplay(String string) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String emptyString \u003d \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return !string.equals(emptyString) ? string : \"-\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientViewDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * An UI class which wraps {@code ClientView} and {@code ExerciseListTable}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * It is updated when the clientInView updates or changes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @author @yonggiee"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ClientViewDisplay {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ClientView clientView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ExerciseListTable exerciseListTable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private PersonalBestTable personalBestTable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ClientView getClientView() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return clientView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseListTable getExerciseListTable() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return exerciseListTable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public PersonalBestTable getPersonalBestTable() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return personalBestTable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getClientInViewName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return clientView.getClientInViewName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Updates the client in {@code ClientView}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void updateClientView(Client client) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.clientView \u003d new ClientView(client);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Updates the exercise list in {@code ExerciseListTable}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void updateExerciseListTable(ObservableList\u003cExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exerciseList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseListTable \u003d new ExerciseListTable(exerciseList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Updates the personal bests of client in {@code PersonalBestTable}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void updatePersonalBestTable(ObservableList\u003cExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exerciseList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.personalBestTable \u003d new PersonalBestTable(exerciseList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Updates the client to be shown on {@code ClientViewDisplay}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void update(Client client) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        updateClientView(client);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        updateExerciseListTable(client.getExerciseList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        updatePersonalBestTable(client.getPersonalBest().getPersonalBest());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.autocomplete.Autocomplete;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.autocomplete.AutocompleteResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.history.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error-text-field\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String SUCCESS_STYLE_CLASS \u003d \"success-text-field\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final CommandHistory commandHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Autocomplete autoComplete;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Event handler for the \"up\" and \"down\" arrow key. Used for the command history"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * feature."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final EventHandler\u003cKeyEvent\u003e eventHandlerUpDownKeys \u003d new EventHandler\u003c\u003e() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void handle(KeyEvent ke) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (ke.getCode() \u003d\u003d KeyCode.UP) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                String prevCommand \u003d commandHistory.getPreviousCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                commandTextField.setText(prevCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                commandTextField.positionCaret(prevCommand.length());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else if (ke.getCode() \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                String nextCommand \u003d commandHistory.getNextCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                commandTextField.setText(nextCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                commandTextField.positionCaret(nextCommand.length());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Event handler the \"tab\" key. Used for the command autocomplete feature."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final EventHandler\u003cKeyEvent\u003e eventHandlerTabKey \u003d new EventHandler\u003c\u003e() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void handle(KeyEvent ke) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (ke.getCode() \u003d\u003d KeyCode.TAB) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                ke.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                AutocompleteResult result \u003d autoComplete.execute(commandTextField.getText(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                        commandTextField.getCaretPosition());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                String textToSet \u003d result.getTextToSet();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                String textToFeedback \u003d result.getTextToFeedback();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                Integer caretPositionToSet \u003d result.getCaretPositionToSet();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                if (textToSet !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    commandTextField.setText(textToSet);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                if (textToFeedback !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    resultDisplay.setFeedbackToUser(textToFeedback);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                if (caretPositionToSet !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    commandTextField.positionCaret(caretPositionToSet);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    };"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, ResultDisplay resultDisplay, CommandHistory commandHistory,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            Autocomplete autoComplete) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.resultDisplay \u003d resultDisplay;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.commandHistory \u003d commandHistory;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.autoComplete \u003d autoComplete;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // handles the up and down arrow keys for command history"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandTextField.setOnKeyPressed(eventHandlerUpDownKeys);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // handles the tab key for command autocomplete"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandTextField.addEventFilter(KeyEvent.KEY_PRESSED, eventHandlerTabKey);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String enteredCommand \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandHistory.addToHistory(enteredCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            commandExecutor.execute(enteredCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            setStyleToIndicateCommandStatus(SUCCESS_STYLE_CLASS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            setStyleToIndicateCommandStatus(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (styleClass.contains(SUCCESS_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            commandTextField.getStyleClass().remove(SUCCESS_STYLE_CLASS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the command box to {@code style} to indicate command status."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void setStyleToIndicateCommandStatus(String style) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        setStyleToDefault(); // clear all status styles first"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (styleClass.contains(style)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        styleClass.add(style);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 82,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExerciseListTable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * A UI component that displays exercises of a {@code Client} in a TableView."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseListTable extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String FXML \u003d \"ExerciseListTable.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * keywords in JavaFX. As a consequence, UI elements\u0027 variable names cannot be"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * set to such keywords or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *      issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableView\u003cExercise\u003e tableView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseSets;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseReps;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseWeight;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseListTable(ObservableList\u003cExercise\u003e e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        id.setCellValueFactory(data -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            Exercise exercise \u003d data.getValue();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            int index \u003d e.indexOf(exercise) + 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new SimpleStringProperty(Integer.toString(index));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseName.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseName\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseDate.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseDate\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseSets.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseSets\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseReps.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseReps\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseWeight.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseWeight\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        tableView.setItems(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GraphWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.util.StringConverter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.graph.AxisType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Controller for a graph page"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @author yonggiee"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class GraphWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(GraphWindow.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String FXML \u003d \"GraphWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final List\u003cExercise\u003e graphList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final AxisType axisType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final String clientName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private XYChart.Series\u003cNumber, Number\u003e series;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private LineChart\u003cNumber, Number\u003e exerciseGraph;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private NumberAxis xAxis;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Creates a new GraphWindow."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private GraphWindow(Stage stage, List\u003cExercise\u003e graphList, AxisType axisType, String clientName) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        super(FXML, stage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.stage \u003d stage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.graphList \u003d graphList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.axisType \u003d axisType;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.clientName \u003d clientName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        fillSeries();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        setGraphName();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        formatDateLabels();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        addToGraph();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Creates a {@GraphWindow} with a list of exercises."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * The xAxis will always be date and the yAxis depends on the value"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * specified by {@AxisType}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static GraphWindow createNewGraph(List\u003cExercise\u003e graphList, AxisType axisType, String clientName) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new GraphWindow(stage, graphList, axisType, clientName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Adds data values depending on the {@code AxisType}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void fillSeries() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        switch (axisType) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case REPS:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            fillRepsSeries();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            yAxis.setLabel(\"Reps\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case WEIGHT:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            fillWeightSeries();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            yAxis.setLabel(\"Weight\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Adds data values with Reps as yAxis to the series."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void fillRepsSeries() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        series \u003d new XYChart.Series\u003cNumber, Number\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        for (Exercise exercise : graphList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            Number plotDate \u003d getDateInNumberFormat(exercise);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            Number plotReps \u003d getRepsInNumberFormat(exercise);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            series.getData().add(new XYChart.Data\u003cNumber, Number\u003e(plotDate, plotReps));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Adds data values with Weight as yAxis to the series."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void fillWeightSeries() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        series \u003d new XYChart.Series\u003cNumber, Number\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        for (Exercise exercise : graphList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            Number plotDate \u003d getDateInNumberFormat(exercise);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            Number plotWeight \u003d getWeightInNumberFormat(exercise);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            series.getData().add(new XYChart.Data\u003cNumber, Number\u003e(plotDate, plotWeight));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Changes the xAxis labels from numbers to dates(dd-MM-yyyy)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void formatDateLabels() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        StringConverter\u003cNumber\u003e converter \u003d new NumberAxis.DefaultFormatter(xAxis) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            public String toString(Number object) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                LocalDate date \u003d LocalDate.ofEpochDay(object.longValue());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                String formattedDate \u003d date.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                return formattedDate;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            public Number fromString(String string) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        };"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        xAxis.setTickLabelFormatter(converter);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void addToGraph() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseGraph.getData().add(series);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void setGraphName() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        series.setName(clientName + \" (\" + getExerciseName() + \")\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        stage.setTitle(clientName + \" (\" + getExerciseName() + \")\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private String getExerciseName() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise exercise \u003d graphList.get(0);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return exercise.getExerciseName().toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Shows the graph window."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cul\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cli\u003eif this method is called on a thread other"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               than the JavaFX Application Thread.\u003c/li\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cli\u003eif this method is called during animation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               or layout processing.\u003c/li\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cli\u003eif this method is called on the primary"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               stage.\u003c/li\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cli\u003eif {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        logger.fine(\"Showing graph.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if the graph window is currently being shown."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Hides the graph window."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Focuses on the graph window."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static Number getRepsInNumberFormat(Exercise exercise) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseReps reps \u003d exercise.getExerciseReps();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Number plotReps \u003d reps.convertToInt();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return plotReps;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static Number getWeightInNumberFormat(Exercise exercise) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseWeight weight \u003d exercise.getExerciseWeight();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Number plotWeight \u003d weight.convertToInt();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return plotWeight;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static Number getDateInNumberFormat(Exercise exercise) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseDate date \u003d exercise.getExerciseDate();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Number plotDate \u003d date.forPlot();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return plotDate;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 210
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://github.com/\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"AY1920S2-CS2103T-F11-2/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cul\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cli\u003eif this method is called on a thread other"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               than the JavaFX Application Thread.\u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cli\u003eif this method is called during animation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               or layout processing.\u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cli\u003eif this method is called on the primary"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               stage.\u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cli\u003eif {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 8,
      "Dban1": 2,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.USER_GUIDE_URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String GOOGLE_FONT_URL \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            \"https://fonts.googleapis.com/css2?family\u003dOpen+Sans:\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        + \"wght@300;400;600;700;800\u0026family\u003dUbuntu+Mono\u0026display\u003dswap\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private ClientListPanel clientListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ClientViewDisplay clientViewDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private SchedulePanel schedulePanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private StackPane clientListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private StackPane clientViewPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private StackPane personalBestTablePlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private StackPane exerciseListTablePlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private StackPane schedulePanelPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // set the font"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        setFont(primaryStage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void setFont(Stage stage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Scene scene \u003d primaryStage.getScene();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        scene.getStylesheets().add(GOOGLE_FONT_URL);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666 is fixed in later version of"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * SDK."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will not"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * work when the focus is in them because the key event is consumed by the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * TextInputControl(s)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * help window purposely so to support accelerators even when focus is in"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clientListPanel \u003d new ClientListPanel(logic.getFilteredClientList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clientListPanelPlaceholder.getChildren().add(clientListPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientViewDisplay \u003d new ClientViewDisplay();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        schedulePanel \u003d new SchedulePanel(logic.getScheduleDayList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        schedulePanelPlaceholder.getChildren().add(schedulePanel.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFitBizFilePath());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, resultDisplay,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                logic.getCommandHistory(), logic.getAutocomplete());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Opens FitBiz user guide in the user\u0027s default web browser."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        logic.openUrlInDefaultWebBrowser(USER_GUIDE_URL);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        resultDisplay.setFeedbackToUser(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Opens a graph with the requested information from {@code CommandResult}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void handleGraph(CommandResult commandResult) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String clientName \u003d clientViewDisplay.getClientInViewName();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        GraphWindow graphWindow \u003d GraphWindow.createNewGraph(commandResult.getGraphList(),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            commandResult.getAxisType(), clientName);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        graphWindow.show();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Removes UI elements from panels regarding {@code ClientInView}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggiee"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void clearClientInViewDisplay() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientViewPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseListTablePlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        personalBestTablePlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Adds UI elements to panels regarding {@code ClientInView}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggiee"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void addClientInViewDisplay() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ClientView clientView \u003d clientViewDisplay.getClientView();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientViewPanelPlaceholder.getChildren().add(clientView.getRoot());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseListTable exerciseListTable \u003d clientViewDisplay.getExerciseListTable();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseListTablePlaceholder.getChildren().add(exerciseListTable.getRoot());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        PersonalBestTable personalBestTable \u003d clientViewDisplay.getPersonalBestTable();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        personalBestTablePlaceholder.getChildren().add(personalBestTable.getRoot());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Updates {@code clientInView}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggiee"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void refreshClientInViewDisplay() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clearClientInViewDisplay();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (logic.hasClientInView()) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            clientViewDisplay.update(logic.getClientInView());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            addClientInViewDisplay();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Updates the SchedulePanel."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private void refreshSchedulePanel() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        schedulePanel \u003d new SchedulePanel(logic.getScheduleDayList());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        schedulePanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        schedulePanelPlaceholder.getChildren().add(schedulePanel.getRoot());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            refreshClientInViewDisplay();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            if (commandResult.isOpenGraph()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                handleGraph(commandResult);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            refreshSchedulePanel();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 79,
      "Dban1": 21,
      "AaronCQL": 19,
      "-": 172
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonalBestTable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * A UI component that displays personal bests of each exercise of a {@code Client} in a TableView."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class PersonalBestTable extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String FXML \u003d \"PersonalBestTable.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * keywords in JavaFX. As a consequence, UI elements\u0027 variable names cannot be"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * set to such keywords or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *      issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableView\u003cExercise\u003e tableView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseWeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseReps;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public PersonalBestTable(ObservableList\u003cExercise\u003e e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseName.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseName\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseDate.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseDate\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseWeight.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseWeight\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseReps.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseReps\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        tableView.setItems(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ScheduleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleDay;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * An UI component that displays detailed information of a {@code Client}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ScheduleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String FXML \u003d \"ScheduleCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * keywords in JavaFX. As a consequence, UI elements\u0027 variable names cannot be"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * set to such keywords or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *      issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public final ScheduleDay scheduleDay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private Label scheduleList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleCard(ScheduleDay scheduleDay) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.scheduleDay \u003d scheduleDay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        name.setText(scheduleDay.getDayName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleList.setText(scheduleDay.getDayScheduleString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleList.setPrefWidth(200);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleList.setPrefHeight(20 + scheduleDay.getNumberOfSchedules() * 20);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        cardPane.setPrefHeight(45 + scheduleDay.getNumberOfSchedules() * 20);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!(other instanceof ScheduleCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ScheduleCard card \u003d (ScheduleCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return scheduleDay.equals(card.scheduleDay);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 49,
      "Dban1": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SchedulePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleDay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Panel containing the schedule panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class SchedulePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String FXML \u003d \"SchedulePanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SchedulePanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private ListView\u003cScheduleDay\u003e schedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public SchedulePanel(ObservableList\u003cScheduleDay\u003e scheduleDayList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        schedule.setItems(scheduleDayList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        schedule.setCellFactory(listView -\u003e new ScheduleCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Client} using"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * a {@code ClientCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    class ScheduleCell extends ListCell\u003cScheduleDay\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        protected void updateItem(ScheduleDay scheduleDay, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            super.updateItem(scheduleDay, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            if (empty || scheduleDay \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                setGraphic(new ScheduleCard(scheduleDay).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 38,
      "Dban1": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/logo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/ClientListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"list-name-label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"list-name-label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"list-attributes-label\" text\u003d\"\\$phone\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"list-attributes-label\" text\u003d\"\\$email\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"list-attributes-label\" text\u003d\"\\$address\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      \u003cLabel fx:id\u003d\"sports\" styleClass\u003d\"list-attributes-label\" text\u003d\"\\$sports\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6,
      "AaronCQL": 7,
      "-": 28
    }
  },
  {
    "path": "src/main/resources/view/ClientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "  \u003cListView fx:id\u003d\"clientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "AaronCQL": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/ClientView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" ?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.geometry.Insets ?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.control.Label ?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane ?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints ?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane ?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane ?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox ?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints ?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox ?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cScrollPane id\u003d\"clientView\" fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "      \u003cGridPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"view-name-label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"view-attributes-label\" text\u003d\"\\$gender\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cLabel fx:id\u003d\"birthday\" styleClass\u003d\"view-attributes-label\" text\u003d\"\\$birthday\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cLabel fx:id\u003d\"height\" styleClass\u003d\"view-attributes-label\" text\u003d\"\\$height\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cLabel fx:id\u003d\"currentWeight\" styleClass\u003d\"view-attributes-label\" text\u003d\"\\$currentWeight\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cLabel fx:id\u003d\"targetWeight\" styleClass\u003d\"view-attributes-label\" text\u003d\"\\$targetWeight\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"view-attributes-label\" text\u003d\"\\$remark\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cFlowPane fx:id\u003d\"sports\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 46,
      "Dban1": 1,
      "AaronCQL": 1
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/ExerciseListTable.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cTableView fx:id\u003d\"tableView\" prefHeight\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003ccolumns\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"id\" editable\u003d\"false\" maxWidth\u003d\"30.0\" minWidth\u003d\"30.0\" prefWidth\u003d\"30.0\" reorderable\u003d\"false\" resizable\u003d\"false\" text\u003d\"#\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseDate\" editable\u003d\"false\" maxWidth\u003d\"100.0\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" reorderable\u003d\"false\" resizable\u003d\"false\" text\u003d\"Date\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseName\" editable\u003d\"false\" minWidth\u003d\"100.0\" prefWidth\u003d\"200.0\" reorderable\u003d\"false\" text\u003d\"Exercise\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseReps\" editable\u003d\"false\" maxWidth\u003d\"75.0\" minWidth\u003d\"75.0\" prefWidth\u003d\"75.0\" reorderable\u003d\"false\" resizable\u003d\"false\" text\u003d\"Reps\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseWeight\" editable\u003d\"false\" maxWidth\u003d\"75.0\" minWidth\u003d\"75.0\" prefWidth\u003d\"75.0\" reorderable\u003d\"false\" resizable\u003d\"false\" text\u003d\"Weight\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseSets\" editable\u003d\"false\" maxWidth\u003d\"75.0\" minWidth\u003d\"75.0\" prefWidth\u003d\"75.0\" reorderable\u003d\"false\" resizable\u003d\"false\" text\u003d\"Sets\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003c/columns\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "   \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "      \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "   \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c/TableView\u003e"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 17,
      "AaronCQL": 1
    }
  },
  {
    "path": "src/main/resources/view/GraphWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cfx:root minHeight\u003d\"200.0\" minWidth\u003d\"200.0\" resizable\u003d\"True\" title\u003d\"Graph\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "      \u003cAnchorPane prefHeight\u003d\"508.0\" prefWidth\u003d\"593.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "          \u003cLineChart fx:id\u003d\"exerciseGraph\" layoutX\u003d\"39.0\" layoutY\u003d\"48.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"511.0\" styleClass\u003d\"chart-series-line\" stylesheets\u003d\"@DarkTheme.css\" AnchorPane.bottomAnchor\u003d\"50.0\" AnchorPane.leftAnchor\u003d\"50.0\" AnchorPane.rightAnchor\u003d\"50.0\" AnchorPane.topAnchor\u003d\"50.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cxAxis\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003cNumberAxis forceZeroInRange\u003d\"false\" label\u003d\"Date\" fx:id\u003d\"xAxis\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cyAxis\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003cNumberAxis fx:id\u003d\"yAxis\" side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "          \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 27,
      "AaronCQL": 5
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cfx:root minHeight\u003d\"800\" minWidth\u003d\"1000.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"FitBiz\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    \u003cImage url\u003d\"@/images/logo.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "      \u003cVBox prefHeight\u003d\"600.0\" prefWidth\u003d\"950.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" prefWidth\u003d\"310.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \u003cHBox prefHeight\u003d\"557.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            \u003cVBox fx:id\u003d\"clientList\" maxWidth\u003d\"400.0\" minWidth\u003d\"250.0\" prefHeight\u003d\"455.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u003cStackPane fx:id\u003d\"clientListPanelPlaceholder\" prefHeight\u003d\"433.0\" prefWidth\u003d\"335.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            \u003cVBox maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"500.0\" prefHeight\u003d\"455.0\" prefWidth\u003d\"650.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                \u003cHBox spacing\u003d\"10\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"clientViewPanelPlaceholder\" minHeight\u003d\"200.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"personalBestTablePlaceholder\" minHeight\u003d\"200.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u003cStackPane fx:id\u003d\"exerciseListTablePlaceholder\" layoutX\u003d\"21.0\" layoutY\u003d\"21.0\" minHeight\u003d\"300.0\" styleClass\u003d\"pane-with-no-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cVBox fx:id\u003d\"schedule\" layoutX\u003d\"560.0\" layoutY\u003d\"10.0\" maxWidth\u003d\"300.0\" minWidth\u003d\"240.0\" prefWidth\u003d\"240.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u003cStackPane fx:id\u003d\"schedulePanelPlaceholder\" minWidth\u003d\"220.0\" prefWidth\u003d\"220.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" prefWidth\u003d\"608.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 38,
      "AaronCQL": 9,
      "-": 46
    }
  },
  {
    "path": "src/main/resources/view/PersonalBestTable.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" ?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn ?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.control.TableView ?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cTableView fx:id\u003d\"tableView\" prefHeight\u003d\"200.0\" prefWidth\u003d\"250.0\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003ccolumns\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseName\" editable\u003d\"false\" minWidth\u003d\"200.0\" prefWidth\u003d\"200.0\" reorderable\u003d\"false\" text\u003d\"Personal Best Exercise\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseDate\" editable\u003d\"false\" maxWidth\u003d\"150.0\" minWidth\u003d\"85.0\" prefWidth\u003d\"85.0\" reorderable\u003d\"false\" resizable\u003d\"false\" text\u003d\"Date\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseReps\" editable\u003d\"false\" maxWidth\u003d\"100.0\" minWidth\u003d\"65.0\" prefWidth\u003d\"65.0\" reorderable\u003d\"false\" resizable\u003d\"false\" text\u003d\"Reps\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseWeight\" editable\u003d\"false\" maxWidth\u003d\"100.0\" minWidth\u003d\"65.0\" prefWidth\u003d\"65.0\" reorderable\u003d\"false\" resizable\u003d\"false\" text\u003d\"Weight\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003c/columns\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c/TableView\u003e"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 15,
      "AaronCQL": 3
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ScheduleCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003c?import javafx.scene.effect.Glow?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"107.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "   xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "   xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "   \u003cAnchorPane prefHeight\u003d\"85.0\" prefWidth\u003d\"140.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "         \u003cLabel fx:id\u003d\"name\" maxHeight\u003d\"30.0\" prefHeight\u003d\"20.0\" prefWidth\u003d\"64.0\" styleClass\u003d\"list-name-label\" text\u003d\"\\$first\" AnchorPane.leftAnchor\u003d\"3.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "         \u003cLabel fx:id\u003d\"scheduleList\" alignment\u003d\"TOP_LEFT\" maxHeight\u003d\"999.0\" maxWidth\u003d\"180.0\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"20.0\" prefWidth\u003d\"180.0\" styleClass\u003d\"list-attributes-label\" text\u003d\"\\$scheduleList\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "   \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6,
      "Dban1": 7,
      "AaronCQL": 5
    }
  },
  {
    "path": "src/main/resources/view/SchedulePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003cListView fx:id\u003d\"schedule\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 7,
      "AaronCQL": 1
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        final Index fifthClientIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(fifthClientIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(fifthClientIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(fifthClientIndex.equals(fifthClientIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(fifthClientIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(fifthClientIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(fifthClientIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/trie/NodeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.commons.trie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class NodeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final char VALID_CHAR_1 \u003d \u0027a\u0027;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final char VALID_CHAR_2 \u003d \u0027b\u0027;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor_nullParent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Node(VALID_CHAR_1, null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void isRoot_rootNode_returnsTrue() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node root \u003d new Node();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(true, root.isRoot());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void isRoot_childNode_returnsFalse() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node root \u003d new Node();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node child \u003d new Node(VALID_CHAR_1, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(false, child.isRoot());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasSingleChild_oneChild_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node root \u003d new Node();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node child \u003d new Node(VALID_CHAR_1, root);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        root.addChild(child);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(true, root.hasSingleChild());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasSingleChild_multipleChilds_returnsFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node root \u003d new Node();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node child1 \u003d new Node(VALID_CHAR_1, root);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node child2 \u003d new Node(VALID_CHAR_2, child1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        root.addChild(child1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        root.addChild(child2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(false, root.hasSingleChild());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getSingleChild_oneChild_returnsCorrectChild() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node root \u003d new Node();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node child1 \u003d new Node(VALID_CHAR_1, root);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        root.addChild(child1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(child1, root.getSingleChild());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getSingleChild_multipleChilds_throwsAssertionError() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node root \u003d new Node();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node child1 \u003d new Node(VALID_CHAR_1, root);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node child2 \u003d new Node(VALID_CHAR_2, child1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        root.addChild(child1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        root.addChild(child2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e root.getSingleChild());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/trie/SimilarWordsResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.commons.trie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class SimilarWordsResultTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String EMPTY_WORD \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final ArrayList\u003cString\u003e EMPTY_WORD_LIST \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final SimilarWordsResult EMPTY_WORD_RESULT \u003d new SimilarWordsResult(EMPTY_WORD, EMPTY_WORD_LIST);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String SINGLE_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final ArrayList\u003cString\u003e SINGLE_WORD_LIST \u003d new ArrayList\u003c\u003e(List.of(SINGLE_WORD));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final SimilarWordsResult SINGLE_WORD_RESULT \u003d new SimilarWordsResult(SINGLE_WORD, SINGLE_WORD_LIST);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String WORD_1 \u003d \"exit\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String WORD_2 \u003d \"edit-e\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String WORD_3 \u003d \"edit-c\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String LONGEST_COMMON_PREFIX \u003d \"e\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final ArrayList\u003cString\u003e MULTIPLE_WORD_LIST \u003d new ArrayList\u003c\u003e(List.of(WORD_1, WORD_2, WORD_3));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final SimilarWordsResult MULTIPLE_WORD_RESULT \u003d new SimilarWordsResult(LONGEST_COMMON_PREFIX,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            MULTIPLE_WORD_LIST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String nullString \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ArrayList\u003cString\u003e nullList \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String validString \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ArrayList\u003cString\u003e validList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SimilarWordsResult(nullString, validList));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SimilarWordsResult(validString, nullList));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertDoesNotThrow(() -\u003e new SimilarWordsResult(validString, validList));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasNoResult_onEmptyResult_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(EMPTY_WORD_RESULT.hasNoResult());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasNoResult_onNonEmptyResult_returnsFalse() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(SINGLE_WORD_RESULT.hasNoResult());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(MULTIPLE_WORD_RESULT.hasNoResult());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasOnlyOneWord_onSingleWordResult_returnsTrue() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(SINGLE_WORD_RESULT.hasOnlyOneWord());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasOnlyOneWord_onNonSingleWordResult_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(EMPTY_WORD_RESULT.hasOnlyOneWord());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(MULTIPLE_WORD_RESULT.hasOnlyOneWord());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getSingleWord_onSingleWordResult_returnsCorrectString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(SINGLE_WORD_RESULT.getSingleWord(), SINGLE_WORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getSingleWord_onNonSingleWordResult_throwsAssertionError() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e EMPTY_WORD_RESULT.getSingleWord());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e MULTIPLE_WORD_RESULT.getSingleWord());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/trie/TrieTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.commons.trie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class TrieTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String SEARCH_STRING \u003d \"he\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_WORD_1 \u003d \"hello\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_WORD_2 \u003d \"help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_WORD_3 \u003d \"helm\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String LONGEST_PREFIX_1_AND_2 \u003d \"hel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Trie trie \u003d new Trie();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertNotNull(trie);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void insert_nonNullString_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Trie trie \u003d new Trie();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertDoesNotThrow(() -\u003e trie.insert(VALID_WORD_1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertDoesNotThrow(() -\u003e trie.insert(VALID_WORD_2));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertDoesNotThrow(() -\u003e trie.insert(VALID_WORD_3));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void insert_nullString_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Trie trie \u003d new Trie();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e trie.insert(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void listAllSimilarWords_oneWordTrie_returnsCorrectLongestPrefix() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Trie trie \u003d new Trie();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(VALID_WORD_1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        SimilarWordsResult result \u003d trie.listAllSimilarWords(SEARCH_STRING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(VALID_WORD_1, result.longestPrefixString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void listAllSimilarWords_multipleWordsTrie_returnsCorrectLongestPrefix() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Trie trie \u003d new Trie();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(VALID_WORD_1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(VALID_WORD_2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(VALID_WORD_3);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        SimilarWordsResult result \u003d trie.listAllSimilarWords(SEARCH_STRING);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(LONGEST_PREFIX_1_AND_2, result.longestPrefixString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void listAllSimilarWords_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Trie trie \u003d new Trie();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e trie.listAllSimilarWords(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/logo.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.storage.JsonFitBizStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonFitBizStorage fitBizStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new JsonFitBizStorage(temporaryFolder.resolve(\"fitbiz.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        StorageManager storage \u003d new StorageManager(fitBizStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String deleteCommand \u003d \"delete-c 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // Setup LogicManager with JsonFitBizIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonFitBizStorage fitBizStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new JsonFitBizIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionFitBiz.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        StorageManager storage \u003d new StorageManager(fitBizStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.addClient(expectedClient);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredClientList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static class JsonFitBizIoExceptionThrowingStub extends JsonFitBizStorage {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        private JsonFitBizIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void saveFitBiz(ReadOnlyFitBiz fitBiz, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 4,
      "Dban1": 9,
      "AaronCQL": 11,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/autocomplete/AutocompleteResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class AutocompleteResultTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor_nullValues_doesNotThrow() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // since null is used to indicate whether the member is present or not, this should not throw any errors"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertDoesNotThrow(() -\u003e new AutocompleteResult(null, null, null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/autocomplete/AutocompleteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.GraphCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class AutocompleteTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"add-c\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String ADD_COMMAND \u003d \"add-c\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int ADD_CURRENT_CARET_POSITION \u003d 5;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int ADD_CARET_POSITION_TO_SET \u003d 8; // index right after the \"/\" in \"n/\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String ADD_FEEDBACK_TO_SET \u003d AddCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String ADD_COMMAND_TO_SET \u003d \"add-c n/ p/ e/ a/ g/ b/ cw/ tw/ h/ r/ s/ t/\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"add-e\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String ADD_EXERCISE_COMMAND \u003d \"add-e\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int ADD_EXERCISE_CURRENT_CARET_POSITION \u003d 5;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int ADD_EXERCISE_CARET_POSITION_TO_SET \u003d 8; // index right after the \"/\" in \"n/\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String ADD_EXERCISE_FEEDBACK_TO_SET \u003d AddExerciseCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String ADD_EXERCISE_COMMAND_TO_SET \u003d \"add-e n/ d/ reps/ ew/ sets/\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"clear\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String CLEAR_COMMAND \u003d \"clear\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int CLEAR_CURRENT_CARET_POSITION \u003d 5;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int CLEAR_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String CLEAR_FEEDBACK_TO_SET \u003d ClearCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String CLEAR_COMMAND_TO_SET \u003d \"clear\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"delete-c\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String DELETE_COMMAND \u003d \"delete-c\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int DELETE_CURRENT_CARET_POSITION \u003d 8;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int DELETE_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String DELETE_FEEDBACK_TO_SET \u003d DeleteCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String DELETE_COMMAND_TO_SET \u003d \"delete-c \"; // extra preamble white space"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"delete-e\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String DELETE_EXERCISE_COMMAND \u003d \"delete-e\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int DELETE_EXERCISE_CURRENT_CARET_POSITION \u003d 8;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int DELETE_EXERCISE_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String DELETE_EXERCISE_FEEDBACK_TO_SET \u003d DeleteExerciseCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String DELETE_EXERCISE_COMMAND_TO_SET \u003d \"delete-e \"; // extra preamble white space"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"edit-c\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EDIT_COMMAND \u003d \"edit-c\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int EDIT_CURRENT_CARET_POSITION \u003d 6;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int EDIT_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EDIT_FEEDBACK_TO_SET \u003d EditCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EDIT_COMMAND_TO_SET \u003d \"edit-c \"; // extra preamble white space"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"edit-e\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EDIT_EXERCISE_COMMAND \u003d \"edit-e\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int EDIT_EXERCISE_CURRENT_CARET_POSITION \u003d 6;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int EDIT_EXERCISE_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EDIT_EXERCISE_FEEDBACK_TO_SET \u003d EditExerciseCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EDIT_EXERCISE_COMMAND_TO_SET \u003d \"edit-e \"; // extra preamble white space"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"exit\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EXIT_COMMAND \u003d \"exi\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int EXIT_CURRENT_CARET_POSITION \u003d 3;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int EXIT_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EXIT_FEEDBACK_TO_SET \u003d ExitCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EXIT_COMMAND_TO_SET \u003d \"exit\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"export\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EXPORT_COMMAND \u003d \"exp\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int EXPORT_CURRENT_CARET_POSITION \u003d 3;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int EXPORT_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EXPORT_FEEDBACK_TO_SET \u003d ExportCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EXPORT_COMMAND_TO_SET \u003d \"export\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"filter-c\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FILTER_COMMAND \u003d \"filt\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int FILTER_CURRENT_CARET_POSITION \u003d 4;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int FILTER_CARET_POSITION_TO_SET \u003d 11; // index right after the \"/\" in \"t/\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FILTER_FEEDBACK_TO_SET \u003d FilterCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FILTER_COMMAND_TO_SET \u003d \"filter-c t/ s/\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"find-c\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FIND_COMMAND \u003d \"fin\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int FIND_CURRENT_CARET_POSITION \u003d 3;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int FIND_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FIND_FEEDBACK_TO_SET \u003d FindCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FIND_COMMAND_TO_SET \u003d \"find-c \"; // extra preamble white space"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"graph\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String GRAPH_COMMAND \u003d \"gra\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int GRAPH_CURRENT_CARET_POSITION \u003d 3;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int GRAPH_CARET_POSITION_TO_SET \u003d 8; // index right after the \"/\" in \"n/\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String GRAPH_FEEDBACK_TO_SET \u003d GraphCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String GRAPH_COMMAND_TO_SET \u003d \"graph n/ a/ sd/ ed/\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"help\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String HELP_COMMAND \u003d \"hel\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int HELP_CURRENT_CARET_POSITION \u003d 3;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int HELP_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String HELP_FEEDBACK_TO_SET \u003d HelpCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String HELP_COMMAND_TO_SET \u003d \"help\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"list-c\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String LIST_COMMAND \u003d \"lis\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int LIST_CURRENT_CARET_POSITION \u003d 3;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int LIST_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String LIST_FEEDBACK_TO_SET \u003d ListCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String LIST_COMMAND_TO_SET \u003d \"list-c\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"schedule\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String SCHEDULE_COMMAND \u003d \"sch\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int SCHEDULE_CURRENT_CARET_POSITION \u003d 3;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int SCHEDULE_CARET_POSITION_TO_SET \u003d 9; // index just after first white space"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String SCHEDULE_FEEDBACK_TO_SET \u003d ScheduleCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String SCHEDULE_COMMAND_TO_SET \u003d \"schedule  sch/\"; // extra preamble white space"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"view-c\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VIEW_COMMAND \u003d \"vie\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int VIEW_CURRENT_CARET_POSITION \u003d 3;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int VIEW_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE; // index just after first white space"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VIEW_FEEDBACK_TO_SET \u003d ViewCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VIEW_COMMAND_TO_SET \u003d \"view-c \"; // extra preamble white space"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Ambiguous commands"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String AC_COMMAND \u003d \"a\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int AC_CURRENT_CARET_POSITION \u003d 1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int AC_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String AC_FEEDBACK_TO_SET \u003d Autocomplete.FEEDBACK_MULTIPLE_COMMANDS + \"[add-e, add-c]\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String AC_COMMAND_TO_SET \u003d \"add-\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Invalid commands"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String IC_COMMAND \u003d \"FitBiz!!\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int IC_CURRENT_CARET_POSITION \u003d 8;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final Integer IC_CARET_POSITION_TO_SET \u003d null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String IC_FEEDBACK_TO_SET \u003d Autocomplete.FEEDBACK_NO_COMMANDS;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String IC_COMMAND_TO_SET \u003d null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Using tab while command is completed to go to next prefix for \"graph\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int GRAPH_FIRST_PREFIX_INDEX \u003d 8;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int GRAPH_SECOND_PREFIX_INDEX \u003d 11;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int GRAPH_THIRD_PREFIX_INDEX \u003d 15;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int GRAPH_LAST_PREFIX_INDEX \u003d 19;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Using tab when command has white spaces and no \"/\" prefixes"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String WHITE_SPACES_WITHOUT_PREFIX \u003d \"export random things\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int WHITE_SPACES_WITHOUT_PREFIX_INDEX \u003d 20;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Autocomplete autoComplete \u003d new Autocomplete();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d START OF FITBIZ COMMAND TESTS"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_addCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(ADD_COMMAND, ADD_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(ADD_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(ADD_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(ADD_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_addExerciseCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(ADD_EXERCISE_COMMAND, ADD_EXERCISE_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(ADD_EXERCISE_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(ADD_EXERCISE_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(ADD_EXERCISE_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_clearCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(CLEAR_COMMAND, CLEAR_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(CLEAR_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(CLEAR_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(CLEAR_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_deleteCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(DELETE_COMMAND, DELETE_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(DELETE_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(DELETE_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(DELETE_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_deleteExerciseCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(DELETE_EXERCISE_COMMAND,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                DELETE_EXERCISE_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(DELETE_EXERCISE_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(DELETE_EXERCISE_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(DELETE_EXERCISE_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_editCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(EDIT_COMMAND, EDIT_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EDIT_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EDIT_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EDIT_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_editExerciseCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(EDIT_EXERCISE_COMMAND, EDIT_EXERCISE_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EDIT_EXERCISE_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EDIT_EXERCISE_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EDIT_EXERCISE_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_exitCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(EXIT_COMMAND, EXIT_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EXIT_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EXIT_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EXIT_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_exportCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(EXPORT_COMMAND, EXPORT_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EXPORT_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EXPORT_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EXPORT_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_filterCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(FILTER_COMMAND, FILTER_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(FILTER_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(FILTER_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(FILTER_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_findCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(FIND_COMMAND, FIND_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(FIND_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(FIND_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(FIND_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_graphCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(GRAPH_COMMAND, GRAPH_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(GRAPH_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(GRAPH_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(GRAPH_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_helpCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(HELP_COMMAND, HELP_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(HELP_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(HELP_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(HELP_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_listCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(LIST_COMMAND, LIST_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(LIST_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(LIST_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(LIST_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_scheduleCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(SCHEDULE_COMMAND, SCHEDULE_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(SCHEDULE_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(SCHEDULE_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(SCHEDULE_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_viewCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(VIEW_COMMAND, VIEW_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(VIEW_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(VIEW_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(VIEW_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d END OF FITBIZ COMMAND TESTS"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_ambiguousCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(AC_COMMAND, AC_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(AC_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(AC_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(AC_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_invalidCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(IC_COMMAND, IC_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(IC_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(IC_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(IC_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_graphCommandAlreadyCompleted_returnsCorrectCaretPositions() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult firstResult \u003d autoComplete.execute(GRAPH_COMMAND, GRAPH_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(GRAPH_FIRST_PREFIX_INDEX, firstResult.getCaretPositionToSet());"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult secondResult \u003d autoComplete.execute(GRAPH_COMMAND_TO_SET, GRAPH_FIRST_PREFIX_INDEX);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(GRAPH_SECOND_PREFIX_INDEX, secondResult.getCaretPositionToSet());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult thirdResult \u003d autoComplete.execute(GRAPH_COMMAND_TO_SET, GRAPH_SECOND_PREFIX_INDEX);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(GRAPH_THIRD_PREFIX_INDEX, thirdResult.getCaretPositionToSet());"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult lastResult \u003d autoComplete.execute(GRAPH_COMMAND_TO_SET, GRAPH_THIRD_PREFIX_INDEX);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(GRAPH_LAST_PREFIX_INDEX, lastResult.getCaretPositionToSet());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult wrapAroundResult \u003d autoComplete.execute(GRAPH_COMMAND_TO_SET, GRAPH_LAST_PREFIX_INDEX);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(GRAPH_FIRST_PREFIX_INDEX, wrapAroundResult.getCaretPositionToSet());"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_exportCommandAlreadyCompleted_returnsAllNullResults() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(WHITE_SPACES_WITHOUT_PREFIX,"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                WHITE_SPACES_WITHOUT_PREFIX_INDEX);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(null, result.getTextToSet());"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(null, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(null, result.getTextToFeedback());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 359
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_newClient_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.addClient(validClient);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandSuccess(new AddCommand(validClient), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validClient), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_duplicateClient_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Client clientInList \u003d model.getFitBiz().getClientList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandFailure(new AddCommand(clientInList), model, AddCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 9,
      "AaronCQL": 5,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleDay;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void constructor_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_clientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ModelStubAcceptingClientAdded modelStub \u003d new ModelStubAcceptingClientAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validClient).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validClient), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(Arrays.asList(validClient), modelStub.clientsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_duplicateClient_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validClient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithClient(validClient);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_CLIENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client alice \u003d new ClientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client bob \u003d new ClientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public Path getFitBizFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void setFitBizFilePath(Path fitBizFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public void addClient(Client client) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public ReadOnlyFitBiz getFitBiz() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void setFitBiz(ReadOnlyFitBiz newData) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public void deleteClient(Client target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public ObservableList\u003cScheduleDay\u003e getScheduleDayList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public Client getClientInView() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void setClientInView(Client client) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void clearClientInView() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public boolean hasClientInView() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void updateClientViewIfApplicable(Client clientToEdit, Client editedClient) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void editExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public Client addExerciseToClient(Exercise exercise) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void deleteExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * A Model stub that contains a single client."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private class ModelStubWithClient extends ModelStub {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        private final Client client;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ModelStubWithClient(Client client) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            this.client \u003d client;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return this.client.isSameClient(client);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * A Model stub that always accept the client being added."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private class ModelStubAcceptingClientAdded extends ModelStub {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        final ArrayList\u003cClient\u003e clientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return clientsAdded.stream().anyMatch(client::isSameClient);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public void addClient(Client client) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            clientsAdded.add(client);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public ReadOnlyFitBiz getFitBiz() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new FitBiz();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 10,
      "Dban1": 47,
      "AaronCQL": 9,
      "-": 175
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddExerciseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code AddExerciseCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class AddExerciseCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Client clientInView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientInView \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddExerciseCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_exerciseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.setClientInView(clientInView);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Exercise newExercise \u003d new ExerciseBuilder().withExerciseName(\"Changed\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        CommandResult commandResult \u003d new AddExerciseCommand(newExercise).execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(String.format(AddExerciseCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            newExercise.getForOutput()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_noClientInView_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise exerciseToAdd \u003d clientInView.getExerciseList().getExercise(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AddExerciseCommand addExerciseCommand \u003d new AddExerciseCommand(exerciseToAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertCommandFailure(addExerciseCommand, model, AddExerciseCommand.MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_duplicateExercise_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model.setClientInView(clientInView);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Exercise exerciseToAdd \u003d clientInView.getExerciseList().getExercise(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AddExerciseCommand addExerciseCommand \u003d new AddExerciseCommand(exerciseToAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertCommandFailure(addExerciseCommand, model, AddExerciseCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Exercise exercise1 \u003d new ExerciseBuilder().withExerciseName(\"exercise1\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Exercise exercise2 \u003d new ExerciseBuilder().withExerciseName(\"exercise2\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AddExerciseCommand addCommand1 \u003d new AddExerciseCommand(exercise1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AddExerciseCommand addCommand2 \u003d new AddExerciseCommand(exercise2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(addCommand1.equals(addCommand1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AddExerciseCommand copyAddCommand1 \u003d new AddExerciseCommand(exercise1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(addCommand1.equals(copyAddCommand1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(addCommand1.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(addCommand1.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(addCommand1.equals(addCommand2));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6,
      "AaronCQL": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_emptyFitBiz_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_nonEmptyFitBiz_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        expectedModel.setFitBiz(new FitBiz());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 1,
      "AaronCQL": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.Day;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.EndTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.StartTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String VALID_DAY_MON \u003d \"mon\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String VALID_TIME_START \u003d \"1200\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String VALID_TIME_END \u003d \"1400\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String DAY_DESC_MON \u003d \" \" + PREFIX_DAY + VALID_DAY_MON;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String TIME_DESC_START \u003d \" \" + PREFIX_START_TIME + VALID_TIME_START;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String TIME_DESC_END \u003d \" \" + PREFIX_END_TIME + VALID_TIME_END;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String SCHEDULE_DESC_MON \u003d \" \" + PREFIX_SCHEDULE + VALID_DAY_MON + \"-\" + VALID_TIME_START"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                            + \"-\" + VALID_TIME_END;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String INVALID_DAY_DESC \u003d \" \" + PREFIX_DAY + \"wrong123\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String INVALID_STARTTIME_DESC \u003d \" \" + PREFIX_START_TIME + \"asd123\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String INVALID_ENDTIME_DESC \u003d \" \" + PREFIX_START_TIME + \"bobobooooo\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Schedule VALID_SCHEDULE_ONE \u003d new Schedule(new Day(VALID_DAY_MON),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            new StartTime(VALID_TIME_START), new EndTime(VALID_TIME_END));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final EditCommand.EditClientDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final EditCommand.EditClientDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DESC_AMY \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DESC_BOB \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Convenience wrapper to"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * {@link #assertCommandSuccess(Command, Model, CommandResult, Model)} that"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * - the FitBiz, filtered client list and selected client in"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBiz expectedFitBiz \u003d new FitBiz(actualModel.getFitBiz());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        List\u003cClient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredClientList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(expectedFitBiz, actualModel.getFitBiz());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredClientList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the client at the given"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code targetIndex} in the {@code model}\u0027s FitBiz."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static void showClientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client client \u003d model.getFilteredClientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        final String[] splitName \u003d client.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.updateFilteredClientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(1, model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 14,
      "tohkerwei": 16,
      "Dban1": 22,
      "AaronCQL": 5,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        showNoClient(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of FitBiz list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFitBiz().getClientList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_CLIENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private void showNoClient(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.updateFilteredClientList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(model.getFilteredClientList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 26,
      "AaronCQL": 7,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteExerciseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE_DELETED_EXERCISE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteExerciseCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @author @yonggiee"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class DeleteExerciseCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Client clientInView;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientInView \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void execute_noClientInView_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DeleteExerciseCommand deleteExerciseCommand \u003d new DeleteExerciseCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertCommandFailure(deleteExerciseCommand, model, DeleteExerciseCommand.MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.setClientInView(clientInView);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise exerciseToDelete \u003d clientInView.getExerciseList().getExercise(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DeleteExerciseCommand deleteExerciseCommand \u003d new DeleteExerciseCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExerciseCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            exerciseToDelete.getForOutput());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client alice \u003d expectedModel.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedModel.setClient(alice, ALICE_DELETED_EXERCISE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedModel.setClientInView(ALICE_DELETED_EXERCISE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // ALICE_DELETED_EXERCISE have UniqueExerciseList with the exercise deleted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertCommandSuccess(deleteExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.setClientInView(clientInView);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(clientInView.getExerciseList().size() + 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DeleteExerciseCommand deleteExerciseCommand \u003d new DeleteExerciseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertCommandFailure(deleteExerciseCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DeleteExerciseCommand deleteFirstCommand \u003d new DeleteExerciseCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DeleteExerciseCommand deleteSecondCommand \u003d new DeleteExerciseCommand(INDEX_SECOND_EXERCISE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DeleteExerciseCommand deleteFirstCommandCopy \u003d new DeleteExerciseCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 97,
      "AaronCQL": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditClientDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class EditClientDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditClientDescriptor descriptorWithSameValues \u003d new EditClientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditClientDescriptor editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 9,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(editedClient).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FitBiz(model.getFitBiz()), new UserPrefs(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ClientInView());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.setClient(model.getFilteredClientList().get(0), editedClient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index indexLastClient \u003d Index.fromOneBased(model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client lastClient \u003d model.getFilteredClientList().get(indexLastClient.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ClientBuilder clientInList \u003d new ClientBuilder(lastClient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedClient \u003d clientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastClient, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FitBiz(model.getFitBiz()), new UserPrefs(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ClientInView());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.setClient(lastClient, editedClient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, new EditCommand.EditClientDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedClient \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FitBiz(model.getFitBiz()), new UserPrefs(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ClientInView());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedClient \u003d new ClientBuilder(clientInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FitBiz(model.getFitBiz()), new UserPrefs(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ClientInView());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.setClient(model.getFilteredClientList().get(0), editedClient);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_duplicateClientUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client firstClient \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(firstClient).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_CLIENT, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_duplicateClientFilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // edit client in filtered list into a duplicate in FitBiz"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Client clientInList \u003d model.getFitBiz().getClientList().get(INDEX_SECOND_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                new EditClientDescriptorBuilder(clientInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_invalidClientIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list, but"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * smaller than size of FitBiz"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_invalidClientIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of FitBiz list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFitBiz().getClientList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, DESC_AMY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand.EditClientDescriptor copyDescriptor \u003d new EditClientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_CLIENT, copyDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_CLIENT, DESC_AMY)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_CLIENT, DESC_BOB)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 1,
      "Dban1": 52,
      "AaronCQL": 22,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditExerciseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.DESC_BENCH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.DESC_PUSHUP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * {@code EditExerciseCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @author @yonggiee"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class EditExerciseCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Client clientInView;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientInView \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void execute_noClientInView_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise editedExercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            new EditExerciseDescriptorBuilder(editedExercise).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseCommand editExerciseCommand \u003d new EditExerciseCommand(INDEX_FIRST_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertCommandFailure(editExerciseCommand, model, EditExerciseCommand.MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void execute_duplicateExerciseUnfilteredList_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.setClientInView(clientInView);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise firstExercise \u003d clientInView.getExerciseList().getExercise(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder(firstExercise).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseCommand editExerciseCommand \u003d new EditExerciseCommand(INDEX_SECOND_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertCommandFailure(editExerciseCommand, model, EditExerciseCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.setClientInView(clientInView);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise firstExercise \u003d clientInView.getExerciseList().getExercise(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d (new EditExerciseDescriptorBuilder(firstExercise))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseReps(\"20\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise editedExercise \u003d new ExerciseBuilder(firstExercise).withExerciseReps(\"20\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseCommand editExerciseCommand \u003d new EditExerciseCommand(INDEX_FIRST_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String expectedMessage \u003d String.format(EditExerciseCommand.MESSAGE_EDIT_EXERCISE_SUCCESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            editedExercise.getForOutput());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client clientInViewExpected \u003d expectedModel.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedModel.setClientInView(clientInViewExpected);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise firstExerciseExpected \u003d clientInViewExpected.getExerciseList().getExercise(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedModel.editExercise(firstExerciseExpected, editedExercise);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertCommandSuccess(editExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.setClientInView(clientInView);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(clientInView.getExerciseList().size() + 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder(DESC_PUSHUP).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseCommand editExerciseCommand \u003d new EditExerciseCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertCommandFailure(editExerciseCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        final EditExerciseCommand standardCommand \u003d new EditExerciseCommand(INDEX_FIRST_EXERCISE, DESC_PUSHUP);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(standardCommand.equals(new EditExerciseCommand(INDEX_SECOND_EXERCISE, DESC_BENCH)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(standardCommand.equals(new EditExerciseCommand(INDEX_FIRST_EXERCISE, DESC_BENCH)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExerciseCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE_WEIGHT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SETS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Contains helper methods for testing exerise commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseCommandTestUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_NAME_PUSHUP \u003d \"pushup\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_NAME_BENCH \u003d \"Bench Press\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_REPS_PUSHUP \u003d \"30\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_REPS_BENCH \u003d \"12\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_SETS_PUSHUP \u003d \"5\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_SETS_BENCH \u003d \"4\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_WEIGHT_PUSHUP \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_WEIGHT_BENCH \u003d \"100\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_DATE_PUSHUP \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        LocalDate.now().minusMonths(4).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_DATE_BENCH \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        LocalDate.now().minusDays(1).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_NAME_DESC_PUSHUP \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_NAME + VALID_EXERCISE_NAME_PUSHUP;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_NAME_DESC_BENCH \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_NAME + VALID_EXERCISE_NAME_BENCH;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_REPS_DESC_PUSHUP \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_REPS + VALID_EXERCISE_REPS_PUSHUP;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_REPS_DESC_BENCH \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_REPS + VALID_EXERCISE_REPS_BENCH;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_SETS_DESC_PUSHUP \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_SETS + VALID_EXERCISE_SETS_PUSHUP;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_SETS_DESC_BENCH \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_SETS + VALID_EXERCISE_SETS_BENCH;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_WEIGHT_DESC_PUSHUP \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_EXERCISE_WEIGHT + VALID_EXERCISE_WEIGHT_PUSHUP;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_WEIGHT_DESC_BENCH \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_EXERCISE_WEIGHT + VALID_EXERCISE_WEIGHT_BENCH;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_DATE_DESC_PUSHUP \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_DATE + VALID_EXERCISE_DATE_PUSHUP;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_DATE_DESC_BENCH \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_DATE + VALID_EXERCISE_DATE_BENCH;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String INVALID_EXERCISE_NAME_DESC \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_NAME + \"Pushup\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String INVALID_EXERCISE_REPS_DESC \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_REPS + \"91a\"; // \u0027a\u0027 not allowed in reps"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String INVALID_EXERCISE_SETS_DESC \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_SETS + \"21a9\"; // \u0027a\u0027 not allowed in sets"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String INVALID_EXERCISE_WEIGHT_DESC \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_EXERCISE_WEIGHT + \"1o21\"; // \u0027o\u0027 not allowed in weight"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String INVALID_EXERCISE_DATE_DESC \u003d \" \" + PREFIX_DATE + \"\"; // empty string not allowed for date"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final EditExerciseCommand.EditExerciseDescriptor DESC_PUSHUP;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final EditExerciseCommand.EditExerciseDescriptor DESC_BENCH;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DESC_PUSHUP \u003d new EditExerciseDescriptorBuilder()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseName(VALID_EXERCISE_NAME_PUSHUP)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseReps(VALID_EXERCISE_REPS_PUSHUP)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseSets(VALID_EXERCISE_SETS_PUSHUP)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseWeight(VALID_EXERCISE_WEIGHT_PUSHUP)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseDate(VALID_EXERCISE_DATE_PUSHUP).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DESC_BENCH \u003d new EditExerciseDescriptorBuilder()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseName(VALID_EXERCISE_NAME_BENCH)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseReps(VALID_EXERCISE_REPS_BENCH)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseSets(VALID_EXERCISE_SETS_BENCH)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseWeight(VALID_EXERCISE_WEIGHT_BENCH)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseDate(VALID_EXERCISE_DATE_BENCH).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Client clientWithoutExercises \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Client clientWithExercises \u003d new ClientBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            .withExercisesInExerciseList(new ExerciseBuilder().build()).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private String clientWithExercisesCsvFileName \u003d clientWithExercises.getName().fullName + \".csv\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_noClientInView_throwsCommandException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertCommandFailure(exportCommand, model, ExportCommand.MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_clientWithoutExercises_throwsCommandException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model.setClientInView(clientWithoutExercises);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertCommandFailure(exportCommand, model, ExportCommand.MESSAGE_NO_EXERCISES);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_clientWithExercises_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model.setClientInView(clientWithExercises);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        expectedModel.setClientInView(clientWithExercises);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                String.format(ExportCommand.MESSAGE_SUCCESS, clientWithExercisesCsvFileName));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertCommandSuccess(new ExportCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FilterCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.TagAndSportContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FilterCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class FilterCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        TagAndSportContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                new TagAndSportContainsKeywordsPredicate(Collections.singletonList(\"firsttag\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                        Collections.singletonList(\"firstsport\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        TagAndSportContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                new TagAndSportContainsKeywordsPredicate(Collections.singletonList(\"secondtag\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                        Collections.singletonList(\"secondsport\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        FilterCommand filterFirstCommand \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        FilterCommand filterSecondCommand \u003d new FilterCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        FilterCommand filterFirstCommandCopy \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertFalse(filterFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertFalse(filterFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertFalse(filterFirstCommand.equals(filterSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void execute_validTagAndSport_clientFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        TagAndSportContainsKeywordsPredicate predicate \u003d preparePredicate(\"normal\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                \"dance\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void execute_validTagNoSport_multipleClientsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        TagAndSportContainsKeywordsPredicate predicate \u003d preparePredicate(\"normal\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                \"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void execute_validSportNoTag_multipleClientsFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        TagAndSportContainsKeywordsPredicate predicate \u003d preparePredicate(\"\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                \"dance\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Parses {@code tagInput and @code sportInput} into a {@code TagAndSportContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private TagAndSportContainsKeywordsPredicate preparePredicate(String tagInput, String sportInput) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        List\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        List\u003cString\u003e sports \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!tagInput.equals(\"\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            tags \u003d Arrays.asList(tagInput.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!sportInput.equals(\"\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            sports \u003d Arrays.asList(sportInput.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return new TagAndSportContainsKeywordsPredicate(tags, sports);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_zeroKeywords_noClientFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredClientList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_multipleKeywords_multipleClientsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredClientList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 14,
      "AaronCQL": 4,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GraphCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_AXIS_REPS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_AXIS_WEIGHT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_ENDDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_EXERCISE_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_STARTDATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.Axis;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.EndDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.Graph;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.StartDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class GraphCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private Graph validGraphFirst;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private Graph validGraphSecond;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        validGraphFirst \u003d new Graph("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            new ExerciseName(VALID_EXERCISE_NAME), new Axis(VALID_AXIS_REPS),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            new StartDate(VALID_STARTDATE), new EndDate(VALID_ENDDATE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        validGraphSecond \u003d new Graph("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            new ExerciseName(VALID_EXERCISE_NAME), new Axis(VALID_AXIS_WEIGHT),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            new StartDate(VALID_STARTDATE), new EndDate(VALID_ENDDATE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void constructor_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GraphCommand(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void execute_noClientInView_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        GraphCommand graphCommand \u003d new GraphCommand(validGraphFirst);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertCommandFailure(graphCommand, model, GraphCommand.MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        GraphCommand graphFirstCommand \u003d new GraphCommand(validGraphFirst);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        GraphCommand graphSecondCommand \u003d new GraphCommand(validGraphSecond);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(graphFirstCommand.equals(graphFirstCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        GraphCommand graphFirstCommandCopy \u003d new GraphCommand(validGraphFirst);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(graphFirstCommand.equals(graphFirstCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(graphFirstCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(graphFirstCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // different graph -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(graphFirstCommand.equals(graphSecondCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GraphCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AXIS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Contains helper static variables for testing graph commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class GraphCommandTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    // valid"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_EXERCISE_NAME \u003d \"pushup\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_AXIS_REPS \u003d \"reps\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_AXIS_WEIGHT \u003d \"weight\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_STARTDATE \u003d \"01-01-2020\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_ENDDATE \u003d \"01-04-2020\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_EXERCISE_NAME_DESC \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_EXERCISE_NAME + VALID_EXERCISE_NAME;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_AXIS_REPS_DESC \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_AXIS + VALID_AXIS_REPS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_AXIS_WEIGHT_DESC \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_AXIS + VALID_AXIS_WEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_STARTDATE_DESC \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_STARTDATE + VALID_STARTDATE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_ENDDATE_DESC \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_ENDDATE + VALID_ENDDATE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_GRAPH_USER_INPUT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            VALID_EXERCISE_NAME_DESC + VALID_AXIS_REPS_DESC"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + VALID_STARTDATE_DESC + VALID_ENDDATE_DESC;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    // invalid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String INVALID_EXERCISE_NAME \u003d \"pushup\u0026\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String INVALID_AXIS \u003d \"repss\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String INVALID_STARTDATE \u003d \"1-1-2\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String INVALID_ENDDATE \u003d \"1-1-2\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String INVALID_EXERCISE_NAME_DESC \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_EXERCISE_NAME + INVALID_EXERCISE_NAME;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String INVALID_AXIS_DESC \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_AXIS + INVALID_AXIS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String INVALID_STARTDATE_DESC \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_STARTDATE + INVALID_STARTDATE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String INVALID_ENDDATE_DESC \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_ENDDATE + INVALID_ENDDATE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 2,
      "AaronCQL": 5,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ScheduleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "class ScheduleCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e emptyScheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientToSchedule \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_CLIENT, emptyScheduleList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleCommand.MESSAGE_CLEARED, clientToSchedule.getName().fullName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.setClient(model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased()), clientToSchedule);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandSuccess(scheduleCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_validIndexFilteredList_showsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e emptyScheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientToSchedule \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_CLIENT, emptyScheduleList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.setClient(model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased()), clientToSchedule);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        showNoClient(expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandFailure(scheduleCommand, expectedModel, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private void showNoClient(Model model) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.updateFilteredClientList(p -\u003e false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(model.getFilteredClientList().isEmpty());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e scheduleListFirst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e scheduleListSecond \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ScheduleCommand scheduleFirstCommand \u003d new ScheduleCommand(INDEX_FIRST_CLIENT, scheduleListFirst);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ScheduleCommand scheduleSecondCommand \u003d new ScheduleCommand(INDEX_SECOND_CLIENT, scheduleListSecond);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(scheduleFirstCommand.equals(scheduleFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ScheduleCommand scheduleFirstCommandCopy \u003d new ScheduleCommand(INDEX_FIRST_CLIENT, scheduleListFirst);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(scheduleFirstCommand.equals(scheduleFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(scheduleFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(scheduleFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(scheduleFirstCommand.equals(scheduleSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 83,
      "AaronCQL": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * {@code ViewCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Client clientToView \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_SUCCESS, clientToView.getName().fullName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        expectedModel.setClientInView(clientToView);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertCommandSuccess(viewCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Client clientToView \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_SUCCESS, clientToView.getName().fullName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        showClientAtIndex(expectedModel, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        expectedModel.setClientInView(clientToView);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertCommandSuccess(viewCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of FitBiz list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFitBiz().getClientList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ViewCommand viewFirstCommand \u003d new ViewCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ViewCommand viewSecondCommand \u003d new ViewCommand(INDEX_SECOND_CLIENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ViewCommand deleteFirstCommandCopy \u003d new ViewCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(viewFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(viewFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(viewFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(viewFirstCommand.equals(viewSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 92,
      "AaronCQL": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/history/CommandHistoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This test ensures integration between the storage {@code FileUtil} and model"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code CommandHistoryState}. More stringent unit tests can be found in their"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * respective tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_COMMAND_1 \u003d \"edit-c 1 t/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_COMMAND_2 \u003d \"edit-c 2 n/Nimar\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_COMMAND_3 \u003d \"help\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // helper methods test cases"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String STORAGE_STRING \u003d String.format(\"%s\\n%s\\n%s\", VALID_COMMAND_1, VALID_COMMAND_2,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            VALID_COMMAND_3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final List\u003cString\u003e STATE_LIST \u003d List.of(VALID_COMMAND_1, VALID_COMMAND_2, VALID_COMMAND_3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandHistory \u003d new CommandHistory(getTempFilePath(\"test.txt\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandHistory.clearHistory(); // sanity check that history is cleared"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CommandHistory(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void storageStringToStateList_validStorageString_returnsCorrectList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        List\u003cString\u003e convertedList \u003d commandHistory.storageStringToStateList(STORAGE_STRING);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(convertedList.equals(STATE_LIST));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void stateListToStorageString_validStateList_returnsCorrectString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String convertedString \u003d commandHistory.stateListToStorageString(STATE_LIST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(convertedString.equals(STORAGE_STRING));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void clearHistory_returnsCorrectOutputs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandHistory.clearHistory(); // sanity check that history is cleared"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(commandHistory.getNextCommand(), EMPTY_STRING);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(commandHistory.getPreviousCommand(), EMPTY_STRING);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getPreviousCommand_oneItemHistory_returnsSameString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandHistory.addToHistory(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command1 \u003d commandHistory.getPreviousCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command2 \u003d commandHistory.getPreviousCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command3 \u003d commandHistory.getPreviousCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command4 \u003d commandHistory.getPreviousCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command5 \u003d commandHistory.getPreviousCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(command1 \u003d\u003d VALID_COMMAND_1 \u0026\u0026 command2 \u003d\u003d VALID_COMMAND_1 \u0026\u0026 command3 \u003d\u003d VALID_COMMAND_1"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                \u0026\u0026 command4 \u003d\u003d VALID_COMMAND_1 \u0026\u0026 command5 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void simulatedUsage_returnsCorrectOutputs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandHistory.addToHistory(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandHistory.addToHistory(VALID_COMMAND_2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String shouldBeValidCommand2 \u003d commandHistory.getPreviousCommand(); // returns VALID_COMMAND_2"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(shouldBeValidCommand2 \u003d\u003d VALID_COMMAND_2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String shouldBeValidCommand1 \u003d commandHistory.getPreviousCommand(); // returns VALID_COMMAND_1"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(shouldBeValidCommand1 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        shouldBeValidCommand1 \u003d commandHistory.getPreviousCommand(); // returns VALID_COMMAND_1"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(shouldBeValidCommand1 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        shouldBeValidCommand2 \u003d commandHistory.getNextCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(shouldBeValidCommand2 \u003d\u003d VALID_COMMAND_2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String shouldBeEmptyString \u003d commandHistory.getNextCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(shouldBeEmptyString \u003d\u003d EMPTY_STRING);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client expectedClientMultipleTags \u003d new ClientBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedClientMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 10,
      "AaronCQL": 8,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddExerciseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.EXERCISE_DATE_DESC_PUSHUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.EXERCISE_NAME_DESC_PUSHUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.INVALID_EXERCISE_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.INVALID_EXERCISE_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.INVALID_EXERCISE_REPS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.INVALID_EXERCISE_SETS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.INVALID_EXERCISE_WEIGHT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_DATE_PUSHUP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_NAME_PUSHUP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseSets;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class AddExerciseCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_FIELD \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private AddExerciseCommandParser parser \u003d new AddExerciseCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Exercise expectedClient \u003d new ExerciseBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .withExerciseName(VALID_EXERCISE_NAME_PUSHUP)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .withExerciseDate(VALID_EXERCISE_DATE_PUSHUP)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .withExerciseReps(EMPTY_FIELD)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .withExerciseSets(EMPTY_FIELD)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .withExerciseWeight(EMPTY_FIELD)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertParseSuccess(parser, EXERCISE_NAME_DESC_PUSHUP + EXERCISE_DATE_DESC_PUSHUP,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new AddExerciseCommand(expectedClient));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExerciseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // missing exercise date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertParseFailure(parser, VALID_EXERCISE_NAME_PUSHUP, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // missing exercise name"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertParseFailure(parser, VALID_EXERCISE_DATE_PUSHUP, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertParseFailure(parser, INVALID_EXERCISE_NAME_DESC + EXERCISE_DATE_DESC_PUSHUP,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertParseFailure(parser, EXERCISE_NAME_DESC_PUSHUP + INVALID_EXERCISE_DATE_DESC,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                ExerciseDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // invalid reps"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertParseFailure(parser, EXERCISE_NAME_DESC_PUSHUP + EXERCISE_DATE_DESC_PUSHUP"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                + INVALID_EXERCISE_REPS_DESC, ExerciseReps.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertParseFailure(parser, EXERCISE_NAME_DESC_PUSHUP + EXERCISE_DATE_DESC_PUSHUP"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                + INVALID_EXERCISE_WEIGHT_DESC, ExerciseWeight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // invalid sets"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertParseFailure(parser, EXERCISE_NAME_DESC_PUSHUP + EXERCISE_DATE_DESC_PUSHUP"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                + INVALID_EXERCISE_SETS_DESC, ExerciseSets.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            System.out.println(command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            System.out.println(expectedCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_CLIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteExerciseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * outside of the DeleteExerciseCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * same path through the DeleteExerciseCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class DeleteExerciseCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private DeleteExerciseCommandParser parser \u003d new DeleteExerciseCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parse_validArgs_returnsDeleteExerciseCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteExerciseCommand(INDEX_FIRST_EXERCISE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 26,
      "-": 179
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.TagAndSportContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private FilterCommandParser parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void parse_emptyTagAndSport_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        FilterCommand expectedFilterCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                new FilterCommand(new TagAndSportContainsKeywordsPredicate(new ArrayList\u003cString\u003e(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                        new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertParseSuccess(parser, \"t/ s/\", expectedFilterCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void parse_validArgs_returnsFilterCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        FilterCommand expectedFilterCommand \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                new FilterCommand(new TagAndSportContainsKeywordsPredicate(Arrays.asList(\"normal\", \"vegetarian\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                        Arrays.asList(\"hockey\", \"sumo\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertParseSuccess(parser, \"t/normal t/vegetarian s/hockey s/sumo\", expectedFilterCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FitBizParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.ClientUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class FitBizParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final FitBizParser parser \u003d new FitBizParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ClientUtil.getAddCommand(client));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(new AddCommand(client), command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_CLIENT), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(client).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                + INDEX_FIRST_CLIENT.getOneBased() + \" \" + ClientUtil.getEditClientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // System.out.println(ClientUtil.getEditClientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_CLIENT, descriptor), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void parseCommand_export() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(parser.parseCommand(ExportCommand.COMMAND_WORD) instanceof ExportCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(parser.parseCommand(ExportCommand.COMMAND_WORD + \" 3\") instanceof ExportCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 10,
      "AaronCQL": 16,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GraphCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.INVALID_AXIS_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.INVALID_ENDDATE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.INVALID_EXERCISE_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.INVALID_STARTDATE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_AXIS_REPS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_AXIS_REPS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_ENDDATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_ENDDATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_EXERCISE_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_EXERCISE_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_GRAPH_USER_INPUT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_STARTDATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_STARTDATE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.commands.GraphCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.Axis;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.EndDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.Graph;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.StartDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class GraphCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, GraphCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private GraphCommandParser parser \u003d new GraphCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, GraphCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // no name specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                parser, VALID_AXIS_REPS_DESC + VALID_STARTDATE_DESC + VALID_ENDDATE_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // no axis specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                parser, VALID_EXERCISE_NAME_DESC + VALID_STARTDATE_DESC + VALID_ENDDATE_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // no startdate specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                parser, VALID_EXERCISE_NAME_DESC + VALID_AXIS_REPS_DESC + VALID_ENDDATE_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // no enddate specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                parser, VALID_EXERCISE_NAME_DESC + VALID_AXIS_REPS_DESC + VALID_STARTDATE_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // no exercise name, no axis, no start date and no end date specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String userInput \u003d VALID_GRAPH_USER_INPUT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Graph graph \u003d new Graph(new ExerciseName(VALID_EXERCISE_NAME), new Axis(VALID_AXIS_REPS),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            new StartDate(VALID_STARTDATE), new EndDate(VALID_ENDDATE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        GraphCommand expectedCommand \u003d new GraphCommand(graph);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // invalid exercise name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure(parser, INVALID_EXERCISE_NAME_DESC + VALID_AXIS_REPS_DESC"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                + VALID_STARTDATE_DESC + VALID_ENDDATE_DESC, ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // invalid axis"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure(parser, VALID_EXERCISE_NAME_DESC + INVALID_AXIS_DESC"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                + VALID_STARTDATE_DESC + VALID_ENDDATE_DESC, Axis.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // invalid start date"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure(parser, VALID_EXERCISE_NAME_DESC + VALID_AXIS_REPS_DESC"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                + INVALID_STARTDATE_DESC + VALID_ENDDATE_DESC, StartDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // invalid end date"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure(parser, VALID_EXERCISE_NAME_DESC + VALID_AXIS_REPS_DESC"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                + VALID_STARTDATE_DESC + INVALID_ENDDATE_DESC, EndDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private static final String INVALID_HEIGHT \u003d \"23.34.2\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"male1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private static final String VALID_HEIGHT \u003d \"152.2\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String VALID_GENDER \u003d \"Male\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String VALID_REMARK \u003d \"need do more bench\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void parseBirthday_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBirthday((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parseHeight_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseHeight((String) null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parseHeight_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHeight(INVALID_HEIGHT));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parseHeight_validValueWithoutWhitespace_returnsHeight() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Height expectedHeight \u003d new Height(VALID_HEIGHT);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals(expectedHeight, ParserUtil.parseHeight(VALID_HEIGHT));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parseHeight_validValueWithWhitespace_returnsTrimmedHeight() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String heightWithWhitespace \u003d WHITESPACE + VALID_HEIGHT + WHITESPACE;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Height expectedHeight \u003d new Height(VALID_HEIGHT);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals(expectedHeight, ParserUtil.parseHeight(heightWithWhitespace));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parseGender_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGender((String) null));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parseGender_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGender(INVALID_GENDER));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parseGender_validValueWithoutWhitespace_returnsGender() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Gender expectedGender \u003d new Gender(VALID_GENDER);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedGender, ParserUtil.parseGender(VALID_GENDER));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parseGender_validValueWithWhitespace_returnsTrimmedGender() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String genderWithWhitespace \u003d WHITESPACE + VALID_GENDER + WHITESPACE;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Gender expectedGender \u003d new Gender(VALID_GENDER);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedGender, ParserUtil.parseGender(genderWithWhitespace));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parseRemark_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRemark((String) null));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parseRemark_validValueWithoutWhitespace_returnsRemark() throws Exception {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Remark expectedRemark \u003d new Remark(VALID_REMARK);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedRemark, ParserUtil.parseRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parseRemark_validValueWithWhitespace_returnsTrimmedRemark() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String remarkWithWhitespace \u003d WHITESPACE + VALID_REMARK + WHITESPACE;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Remark expectedRemark \u003d new Remark(VALID_REMARK);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedRemark, ParserUtil.parseRemark(remarkWithWhitespace));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 46,
      "ziyingli": 26,
      "Dban1": 12,
      "-": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ScheduleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DAY_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ENDTIME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STARTTIME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHEDULE_DESC_MON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_MON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.EndTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.StartTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class ScheduleCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private ScheduleCommandParser parser \u003d new ScheduleCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertParseFailure(parser, VALID_DAY_MON, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + SCHEDULE_DESC_MON;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArrayList\u003cSchedule\u003e scheduleArrayList \u003d new ArrayList\u003cSchedule\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        scheduleArrayList.add(new Schedule(new Day(\"mon\"), new StartTime(\"1200\"), new EndTime(\"1400\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ScheduleCommand expectedCommand \u003d new ScheduleCommand(targetIndex, scheduleArrayList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void parse_missingOptionalFields_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String userInput \u003d \"\" + targetIndex.getOneBased() + \" \" + PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArrayList\u003cSchedule\u003e scheduleArrayList \u003d new ArrayList\u003cSchedule\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ScheduleCommand expectedCommand \u003d new ScheduleCommand(targetIndex, scheduleArrayList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String message \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DAY_DESC, message); // invalid day"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STARTTIME_DESC, message); // invalid start time"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ENDTIME_DESC, message); // invalid end time"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 68,
      "Dban1": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * outside of the ViewCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * same path through the ViewCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ViewCommand(INDEX_FIRST_CLIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CommandHistoryStateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class CommandHistoryStateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final ArrayList\u003cString\u003e INITIAL_EMPTY_STATE \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_COMMAND_1 \u003d \"edit-c 1 t/\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_COMMAND_2 \u003d \"edit-c 2 n/Nimar\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int LIST_SIZE_EMPTY \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int LIST_SIZE_ONE \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int LIST_SIZE_FIVE \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final CommandHistoryState historyState \u003d new CommandHistoryState(INITIAL_EMPTY_STATE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // no matter what, history must be initialised"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(historyState.getCurrentState() !\u003d null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void clearState_emptyListHistory() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(Collections.emptyList(), historyState.getCurrentState());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void add_emptyString_addsNothing() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(EMPTY_STRING);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(historyState.getCurrentState().size() \u003d\u003d LIST_SIZE_EMPTY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void add_similarValidCommandMultipleTimes_addsOnlyOne() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(historyState.getCurrentState().size() \u003d\u003d LIST_SIZE_ONE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void add_validUniqueCommandMultipleTimes_addsAll() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(historyState.getCurrentState().size() \u003d\u003d LIST_SIZE_FIVE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getNextCommand_emptyHistory_returnsEmptyString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(historyState.getNextCommand() \u003d\u003d EMPTY_STRING);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getPreviousCommand_emptyHistory_returnsEmptyString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(historyState.getPreviousCommand() \u003d\u003d EMPTY_STRING);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getNextCommand_nonEmptyHistory_returnsEmptyString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(historyState.getNextCommand() \u003d\u003d EMPTY_STRING);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getPreviousCommand_oneItemHistory_returnsSameString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command1 \u003d historyState.getPreviousCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command2 \u003d historyState.getPreviousCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command3 \u003d historyState.getPreviousCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command4 \u003d historyState.getPreviousCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command5 \u003d historyState.getPreviousCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(command1 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(command2 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(command3 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(command4 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(command5 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getPreviousCommand_twoItemsHistory_returnsCorrectStrings() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String shouldBeValidCommand2 \u003d historyState.getPreviousCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String shouldBeValidCommand1 \u003d historyState.getPreviousCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(shouldBeValidCommand2 \u003d\u003d VALID_COMMAND_2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(shouldBeValidCommand1 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getNextCommand_twoItemsHistoryAfterGetPrevCommand_returnsCorrectString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.getPreviousCommand(); // returns VALID_COMMAND_2"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.getPreviousCommand(); // returns VALID_COMMAND_1"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String shouldBeValidCommand2 \u003d historyState.getNextCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(shouldBeValidCommand2 \u003d\u003d VALID_COMMAND_2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/model/FitBizTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.exceptions.DuplicateClientException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class FitBizTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final FitBiz fitBiz \u003d new FitBiz();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(Collections.emptyList(), fitBiz.getClientList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fitBiz.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void resetData_withValidReadOnlyFitBiz_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBiz newData \u003d getTypicalFitBiz();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBiz.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(newData, fitBiz);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void resetData_withDuplicateClients_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Two clients with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        List\u003cClient\u003e newClients \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBizStub newData \u003d new FitBizStub(newClients);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e fitBiz.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void hasClient_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fitBiz.hasClient(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasClient_clientNotInFitBiz_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(fitBiz.hasClient(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasClient_clientInFitBiz_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBiz.addClient(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(fitBiz.hasClient(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasClient_clientWithSameIdentityFieldsInFitBiz_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBiz.addClient(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(fitBiz.hasClient(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void getClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e fitBiz.getClientList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * A stub FitBizStub whose clients list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static class FitBizStub implements ReadOnlyFitBiz {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        private final ObservableList\u003cClient\u003e clients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBizStub(Collection\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            this.clients.setAll(clients);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public ObservableList\u003cClient\u003e getClientList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return clients;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 15,
      "AaronCQL": 24,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.FitBizBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(new FitBiz(), new FitBiz(modelManager.getFitBiz()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        userPrefs.setFitBizFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        userPrefs.setFitBizFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setFitBizFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setFitBizFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setFitBizFilePath_validPath_setsFitBizFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        modelManager.setFitBizFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(path, modelManager.getFitBizFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void hasClient_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasClient(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasClient_clientNotInFitBiz_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(modelManager.hasClient(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasClient_clientInFitBiz_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        modelManager.addClient(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(modelManager.hasClient(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredClientList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBiz fitBiz \u003d new FitBizBuilder().withClient(ALICE).withClient(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        FitBiz differentFitBiz \u003d new FitBiz();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ClientInView clientInView \u003d new ClientInView();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        modelManager \u003d new ModelManager(fitBiz, userPrefs, clientInView);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(fitBiz, userPrefs, clientInView);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different fitBiz -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentFitBiz, userPrefs, clientInView)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        modelManager.updateFilteredClientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(fitBiz, userPrefs, clientInView)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        modelManager.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        differentUserPrefs.setFitBizFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(fitBiz, differentUserPrefs, clientInView)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 7,
      "Dban1": 13,
      "AaronCQL": 14,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setFitBizFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFitBizFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/BirthdayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static java.time.temporal.ChronoUnit.MONTHS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "class BirthdayTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Birthday(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void isValidBirthday() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // null birthday"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Birthday.isValidBirthday(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // invalid birthdays"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\" \")); // spaces only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"91\")); // random numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"not a birthday\")); // non-numeric"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"not a birthday1\")); // non-numeric"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"not a birthday2\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"not a birthday3\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"not a birthday4\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"not a birthday5\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"11-e33-1998\")); // erroneous alphanumeric"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(LocalDate.now().plus(1, DAYS)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")))); // birthday 1 day after current date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(LocalDate.now().plus(2, MONTHS)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")))); //birthday 2 months after current date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(LocalDate.now()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")))); // birthday today"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(LocalDate.now().minusYears(120).minusDays(1)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")))); // birthday just the day before the earliest limit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // valid birthday"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(Birthday.isValidBirthday(\"01-01-1980\")); // birthday in 01-01-1980"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(Birthday.isValidBirthday(\"01-01-1970\")); //birthday in 01-01-1979"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Birthday.isValidBirthday((\"\"))); //default empty birthday"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Birthday.isValidBirthday(LocalDate.now().minusYears(120)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")))); //birthday right on the earliest limit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(new Birthday(\"01-01-1980\").hashCode() \u003d\u003d new Birthday(\"01-01-1980\").hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(new Birthday(\"01-01-1980\").toString().equals(\"01-01-1980\") \u003d\u003d true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 34,
      "AaronCQL": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/ClientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class ClientTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e client.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void isSameClient() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(ALICE.isSameClient(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(ALICE.isSameClient(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client aliceCopy \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 26,
      "AaronCQL": 1,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/CurrentWeightTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class CurrentWeightTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CurrentWeight(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor_invalidCurrentWeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String invalidCurrentWeight \u003d \"i\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new CurrentWeight(invalidCurrentWeight));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void isValidWeight() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // null weight"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CurrentWeight.isValidWeight(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"ab\")); // contains no numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"a.b\")); // contains no numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\".2\")); // no leading number before decimal"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"2.2.2\")); // too many decimal points"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"-23\")); // negative numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"-23.23\")); // negative decimals"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"as.23\")); // inclusion of letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23.as\")); // inclusion of letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23.a1\")); // inclusion of letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23z1\")); // inclusion of letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23,23\")); // wrong symbols"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23|23\")); // wrong symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23/23\")); // wrong symbols"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23./23\")); // wrong symbols"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23/.23\")); // wrong symbols"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"2-3.23\")); // wrong symbols"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23.2\u00273\")); // wrong symbols"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"41.34573223138567385432\")); // long decimal"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"34573223138567385432.3\")); // long decimal"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // valid weight"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(CurrentWeight.isValidWeight(\"\")); // empty string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(CurrentWeight.isValidWeight(\"0\")); // single digit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(CurrentWeight.isValidWeight(\"5\")); // single digit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(CurrentWeight.isValidWeight(\"003\")); // leading zeros"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(CurrentWeight.isValidWeight(\"456\")); // numbers only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(CurrentWeight.isValidWeight(\"1.2\")); // numbers with decimal points"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(CurrentWeight.isValidWeight(\"45.23\")); // numbers with decimal points"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(CurrentWeight.isValidWeight(\"0.1\")); // numbers with decimal points and leading 0"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void formatWeight_properlyFormatted() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"0\")).value, \"0.00\"); // single digits"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"5\")).value, \"5.00\"); // single digits"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"003\")).value, \"3.00\"); // strip leading zeros"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"000\")).value, \"0.00\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"000.3\")).value, \"0.30\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"45.23\")).value, \"45.23\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void equals_validWeight() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        CurrentWeight w1 \u003d new CurrentWeight(\"12.2\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(w1.equals(w1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(w1.equals(new CurrentWeight(\"12.2\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(w1.equals(new CurrentWeight(\"12\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hashCode_validWeight() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        CurrentWeight w1 \u003d new CurrentWeight(\"12.2\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(w1.hashCode() \u003d\u003d new CurrentWeight(\"12.2\").hashCode());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(w1.hashCode() \u003d\u003d new CurrentWeight(\"12.1\").hashCode());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/GenderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class GenderTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Gender(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_invalidGender_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String invalidGender \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Gender(invalidGender));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void isValidGender() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null gender"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Gender.isValidGender(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // invalid genders"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(Gender.isValidGender(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(Gender.isValidGender(\"tranny\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(Gender.isValidGender(\"shemale\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(Gender.isValidGender(\"Other\")); // match with Others"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(Gender.isValidGender(\"23552\")); // numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(Gender.isValidGender(\"MaleFemale\")); // multiple"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(Gender.isValidGender(\"Ma le\")); // spaces within"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(Gender.isValidGender(\"feMa3le\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // valid gender"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(Gender.isValidGender(\"Male\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(Gender.isValidGender(\"Female\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(Gender.isValidGender(\"Others\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(Gender.isValidGender(\"male\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(Gender.isValidGender(\"feMale\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(Gender.isValidGender(\"others\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/HeightTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class HeightTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Height(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void constructor_invalidHeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String invalidHeight \u003d \"i\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Height(invalidHeight));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void isValidHeight() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // null height"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Height.isValidHeight(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // invalid height"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"ab\")); // contains no numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"a.b\")); // contains no numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\".2\")); // no leading number before decimal"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"2.2.2\")); // too many decimal points"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"-23\")); // negative numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"-23.23\")); // negative decimals"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"as.23\")); // inclusion of letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23.as\")); // inclusion of letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23.a1\")); // inclusion of letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23z1\")); // inclusion of letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23,23\")); // wrong symbols"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23|23\")); // wrong symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23/23\")); // wrong symbols"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23./23\")); // wrong symbols"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23/.23\")); // wrong symbols"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"2-3.23\")); // wrong symbols"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23.2\u00273\")); // wrong symbols"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"41.34573223138567385432\")); // long decimal"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"34573223138567385432.3\")); // long decimal"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // valid height"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Height.isValidHeight(\"\")); // empty string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Height.isValidHeight(\"0\")); // single digit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Height.isValidHeight(\"5\")); // single digit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Height.isValidHeight(\"003\")); // leading zeros"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Height.isValidHeight(\"456\")); // numbers only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Height.isValidHeight(\"1.2\")); // numbers with decimal points"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Height.isValidHeight(\"45.23\")); // numbers with decimal points"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Height.isValidHeight(\"0.1\")); // numbers with decimal points and leading 0"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void equals_validHeight() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Height h1 \u003d new Height(\"152.2\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(h1.equals(h1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(h1.equals(new Height(\"152.2\")));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(h1.equals(new Height(\"152\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void formatHeight_properlyFormatted() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals((new Height(\"0\")).value, \"0.00\"); // single digits"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals((new Height(\"5\")).value, \"5.00\"); // single digits"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals((new Height(\"003\")).value, \"3.00\"); // strip leading zeros"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals((new Height(\"000\")).value, \"0.00\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals((new Height(\"000.3\")).value, \"0.30\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals((new Height(\"45.23\")).value, \"45.23\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals((new Height(\"\")).value, \"\"); // empty string"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void hashCode_validHeight() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Height h1 \u003d new Height(\"152.2\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(h1.hashCode() \u003d\u003d new Height(\"152.2\").hashCode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(h1.hashCode() \u003d\u003d new Height(\"152.1\").hashCode());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 10,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Name.isValidName(\"Lim, Kopi\")); // name with one comma"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Name.isValidName(\"Lim, Kopi,, John\")); // name with multiple commas"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 2,
      "Dban1": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/RemarkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Remark remark \u003d new Remark(\"Hello\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(remark.equals(remark));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Remark remarkCopy \u003d new Remark(remark.value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(remark.equals(remarkCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(remark.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(remark.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Remark differentRemark \u003d new Remark(\"Bye\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(remark.equals(differentRemark));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/SportTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class SportTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Sport(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void constructor_invalidSport_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String invalidSport \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Sport(invalidSport));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void isValidSport() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // null Sport"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Sport.isValidSport(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // invalid sport"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Sport.isValidSport(\"-\")); // a dash"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Sport.isValidSport(\".\")); // a period"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Sport.isValidSport(\"$$(*#(+_\")); // weird symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // valid sport"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertTrue(Sport.isValidSport(\"NIL\")); // no sport"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertTrue(Sport.isValidSport(\"no sport\")); // no sport"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertTrue(Sport.isValidSport(\"hockey\")); // one sport"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertTrue(Sport.isValidSport(\"jengabuildingfreestyle81mountainskydivingswimveryfast\")); // long sport"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Sport.isValidSport(\"81xtwelveriiasdfmnklanlcccoccunut\")); // sport with numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Sport.isValidSport(\"Cross country mountain biking\")); // sport with space"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void equals_validSport() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Sport s1 \u003d new Sport(\"100000m race\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(s1.equals(s1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(s1.equals(new Sport(\"100000m race\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(s1.equals(new Sport(\"100000mrace\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void hashCode_validSport() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Sport s1 \u003d new Sport(\"100000m race\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(s1.hashCode() \u003d\u003d new Sport(\"100000m race\").hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(s1.hashCode() \u003d\u003d new Sport(\"100000mrace\").hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 14,
      "tohkerwei": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/TargetWeightTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class TargetWeightTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TargetWeight(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor_invalidTargetWeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String invalidTargetWeight \u003d \"i\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TargetWeight(invalidTargetWeight));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void isValidWeight() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // null weight"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TargetWeight.isValidWeight(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"ab\")); // contains no numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"a.b\")); // contains no numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\".2\")); // no leading number before decimal"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"2.2.2\")); // too many decimal points"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"-23\")); // negative numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"-23.23\")); // negative decimals"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"as.23\")); // inclusion of letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23.as\")); // inclusion of letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23.a1\")); // inclusion of letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23z1\")); // inclusion of letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23,23\")); // wrong symbols"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23|23\")); // wrong symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23/23\")); // wrong symbols"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23./23\")); // wrong symbols"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23/.23\")); // wrong symbols"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"2-3.23\")); // wrong symbols"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23.2\u00273\")); // wrong symbols"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"41.34573223138567385432\")); // long decimal"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"34573223138567385432.3\")); // long decimal"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // valid weight"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(TargetWeight.isValidWeight(\"\")); // empty string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(TargetWeight.isValidWeight(\"0\")); // single digit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(TargetWeight.isValidWeight(\"5\")); // single digit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(TargetWeight.isValidWeight(\"003\")); // leading zeros"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(TargetWeight.isValidWeight(\"456\")); // numbers only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(TargetWeight.isValidWeight(\"1.2\")); // numbers with decimal points"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(TargetWeight.isValidWeight(\"45.23\")); // numbers with decimal points"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(TargetWeight.isValidWeight(\"0.1\")); // numbers with decimal points and leading 0"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void formatWeight_properlyFormatted() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"0\")).value, \"0.00\"); // single digits"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"5\")).value, \"5.00\"); // single digits"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"003\")).value, \"3.00\"); // strip leading zeros"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"000\")).value, \"0.00\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"000.3\")).value, \"0.30\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"45.23\")).value, \"45.23\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"\")).value, \"\"); // empty string"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void equals_validWeight() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        TargetWeight w1 \u003d new TargetWeight(\"12.2\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(w1.equals(w1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(w1.equals(new TargetWeight(\"12.2\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(w1.equals(new TargetWeight(\"12\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hashCode_validWeight() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        TargetWeight w1 \u003d new TargetWeight(\"12.2\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(w1.hashCode() \u003d\u003d new TargetWeight(\"12.2\").hashCode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(w1.hashCode() \u003d\u003d new TargetWeight(\"12.1\").hashCode());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/UniqueClientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.exceptions.ClientNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.exceptions.DuplicateClientException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class UniqueClientListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final UniqueClientList uniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void contains_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void contains_clientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(uniqueClientList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void contains_clientInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(uniqueClientList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void contains_clientWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(uniqueClientList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void add_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void add_duplicateClient_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient_nullTargetClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClient(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient_nullEditedClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClient(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient_targetClientNotInList_throwsClientNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(ClientNotFoundException.class, () -\u003e uniqueClientList.setClient(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient_editedClientIsSameClient_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.setClient(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedUniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient_editedClientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.setClient(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedUniqueClientList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient_editedClientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.setClient(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient_editedClientHasNonUniqueIdentity_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.setClient(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void remove_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void remove_clientDoesNotExist_throwsClientNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(ClientNotFoundException.class, () -\u003e uniqueClientList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void remove_existingClient_removesClient() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClients_nullUniqueClientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClients((UniqueClientList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClients_uniqueClientList_replacesOwnListWithProvidedUniqueClientList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.setClients(expectedUniqueClientList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClients((List\u003cClient\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        List\u003cClient\u003e clientList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.setClients(clientList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClients_listWithDuplicateClients_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        List\u003cClient\u003e listWithDuplicateClients \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.setClients(listWithDuplicateClients));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            -\u003e uniqueClientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 169,
      "AaronCQL": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "class ExerciseDateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final LocalDate DATE_NOW \u003d LocalDate.now();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExerciseDate(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void isValidExerciseDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null birthday"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExerciseDate.isValidExerciseDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // invalid birthdays"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"91\")); // random numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"not a birthday\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"not a birthday1\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"not a birthday2\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"not a birthday3\")); // non-numeric"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"not a birthday4\")); // non-numeric"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"11-e33-1998\")); // erroneous alphanumeric"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"11/12/1213\")); // incorrect delimiter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"11-13-1213\")); // months more than 12"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"32-11-1213\")); // dates more than 31"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"9-11-12131\")); // years more than 4 digits"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            DATE_NOW.plusDays(1).format(DATE_TIME_FORMATTER))); // 1 day after the current day"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            DATE_NOW.minusYears(1).minusDays(1).format(DATE_TIME_FORMATTER))); // 1 year and 1 day before current date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            DATE_NOW.minusYears(2).format(DATE_TIME_FORMATTER))); // 2 years before current date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // valid birthday"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseDate.isValidExerciseDate("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            DATE_NOW.format(DATE_TIME_FORMATTER))); // current date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseDate.isValidExerciseDate("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            DATE_NOW.minusMonths(4).format(DATE_TIME_FORMATTER))); // 4 months before current date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseDate.isValidExerciseDate("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            DATE_NOW.minusYears(1).format(DATE_TIME_FORMATTER))); // 1 year before current date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExerciseName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_invalidExerciseName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String invalidExerciseName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExerciseName(invalidExerciseName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExerciseName.isValidExerciseName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseName.isValidExerciseName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseName.isValidExerciseName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseName.isValidExerciseName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseName.isValidExerciseName(\"pushups*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseName.isValidExerciseName(\"pushuppushuppushuppushuppushup1\")); // 31 characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseName.isValidExerciseName(\"bench press\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseName.isValidExerciseName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseName.isValidExerciseName(\"bench press 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseName.isValidExerciseName(\"Bench Press\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseName.isValidExerciseName(\"pushuppushuppushuppushuppushup\")); // 30 chars"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseRepsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseRepsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExerciseReps(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_invalidExerciseReps_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String invalidExerciseReps \u003d \"i\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExerciseReps(invalidExerciseReps));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void isValidExerciseReps() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null reps"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExerciseReps.isValidExerciseReps(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // invalid reps"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"ab\")); // contains no numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\".2\")); // decimal numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"01\")); // starts with 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"10000\")); // over 9999"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"-23\")); // negative numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"-23.23\")); // negative decimals"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"as.23\")); // inclusion of letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"23.as\")); // inclusion of letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"23.a1\")); // inclusion of letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"23z1\")); // inclusion of letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"23/.23\")); // inclusion of symbols"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"2-3.23\")); // inclusion of symbols"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"23.2\u00273\")); // inclusion of symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // valid reps"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"\")); // empty string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"5\")); // single digit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"456\")); // numbers only"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"1\")); // near boundary"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"9999\")); // near boundary"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseSetsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseSetsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExerciseSets(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_invalidExerciseReps_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String invalidExerciseSets \u003d \"i\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExerciseSets(invalidExerciseSets));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void isValidExerciseSets() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null weight"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExerciseSets.isValidExerciseSets(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"ab\")); // contains no numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\".2\")); // decimal numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"01\")); // starts with 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"10000\")); // over 9999"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"-23\")); // negative numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"-23.23\")); // negative decimals"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"as.23\")); // inclusion of letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"23.as\")); // inclusion of letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"23.a1\")); // inclusion of letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"23z1\")); // inclusion of letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"23/.23\")); // inclusion of symbols"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"2-3.23\")); // inclusion of symbols"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"23.2\u00273\")); // inclusion of symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // valid weight"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseSets.isValidExerciseSets(\"\")); // empty string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseSets.isValidExerciseSets(\"5\")); // single digit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseSets.isValidExerciseSets(\"456\")); // numbers only"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"1\")); // near boundary"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"9999\")); // near boundary"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_DATE_BENCH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_NAME_BENCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_REPS_BENCH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_SETS_BENCH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_WEIGHT_BENCH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.BENCH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.PUSHUP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void isSameExercise() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(PUSHUP.isSameExercise(PUSHUP));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.isSameExercise(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different reps, different date, different weight -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise editedPushup \u003d new ExerciseBuilder(PUSHUP)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseReps(VALID_EXERCISE_REPS_BENCH)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseDate(VALID_EXERCISE_DATE_BENCH)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseWeight(VALID_EXERCISE_WEIGHT_BENCH)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.isSameExercise(editedPushup));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        editedPushup \u003d new ExerciseBuilder(PUSHUP).withExerciseName(VALID_EXERCISE_NAME_BENCH).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.isSameExercise(editedPushup));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same name, same date, same weight, same reps, different sets -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        editedPushup \u003d new ExerciseBuilder(PUSHUP).withExerciseSets(VALID_EXERCISE_SETS_BENCH).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(PUSHUP.isSameExercise(editedPushup));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise pushupCopy \u003d new ExerciseBuilder(PUSHUP).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(PUSHUP.equals(pushupCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(PUSHUP.equals(PUSHUP));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.equals(5));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different Exercise -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.equals(BENCH));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different Name -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise editedPushup \u003d new ExerciseBuilder(PUSHUP).withExerciseName(VALID_EXERCISE_NAME_BENCH).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.equals(editedPushup));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different reps -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        editedPushup \u003d new ExerciseBuilder(PUSHUP).withExerciseReps(VALID_EXERCISE_REPS_BENCH).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.equals(editedPushup));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different weight -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        editedPushup \u003d new ExerciseBuilder(PUSHUP).withExerciseWeight(VALID_EXERCISE_WEIGHT_BENCH).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.equals(editedPushup));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        editedPushup \u003d new ExerciseBuilder(PUSHUP).withExerciseDate(VALID_EXERCISE_DATE_BENCH).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.equals(editedPushup));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseWeightTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseWeightTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExerciseWeight(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_invalidExerciseReps_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String invalidExerciseWeight \u003d \"i\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExerciseWeight(invalidExerciseWeight));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void isValidExerciseWeight() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null weight"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExerciseWeight.isValidExerciseWeight(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"ab\")); // contains no numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\".2\")); // decimal numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"01\")); // starts with 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"10000\")); // over 9999"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"-23\")); // negative numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"-23.23\")); // negative decimals"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"as.23\")); // inclusion of letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"23.as\")); // inclusion of letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"23.a1\")); // inclusion of letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"23z1\")); // inclusion of letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"23/.23\")); // inclusion of symbols"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"2-3.23\")); // inclusion of symbols"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"23.2\u00273\")); // inclusion of symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // valid weight"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseWeight.isValidExerciseWeight(\"\")); // empty string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseWeight.isValidExerciseWeight(\"5\")); // single digit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseWeight.isValidExerciseWeight(\"456\")); // numbers only"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"1\")); // near boundary"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"9999\")); // near boundary"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/UniqueExerciseListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_SETS_BENCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.BENCH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.PUSHUP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class UniqueExerciseListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final UniqueExerciseList uniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void contains_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void contains_exerciseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(uniqueExerciseList.contains(PUSHUP));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void contains_exerciseInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(uniqueExerciseList.contains(PUSHUP));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void contains_exerciseWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise editedPushup \u003d new ExerciseBuilder(PUSHUP).withExerciseSets(VALID_EXERCISE_SETS_BENCH).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(uniqueExerciseList.contains(editedPushup));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void add_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void add_duplicateExercise_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList.add(PUSHUP));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercise_nullTargetExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercise(null, PUSHUP));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercise_nullEditedExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercise(PUSHUP, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercise_targetExerciseNotInList_throwsExerciseNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(ExerciseNotFoundException.class, () -\u003e uniqueExerciseList.setExercise(PUSHUP, PUSHUP));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercise_editedExerciseIsSameExercise_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.setExercise(PUSHUP, PUSHUP);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedUniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercise_editedExerciseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise editedPushup \u003d new ExerciseBuilder(PUSHUP).withExerciseSets(VALID_EXERCISE_SETS_BENCH).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.setExercise(PUSHUP, editedPushup);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedUniqueExerciseList.add(editedPushup);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercise_editedExerciseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.setExercise(PUSHUP, BENCH);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedUniqueExerciseList.add(BENCH);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercise_editedExerciseHasNonUniqueIdentity_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(BENCH);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList.setExercise(PUSHUP, BENCH));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void remove_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void remove_exerciseDoesNotExist_throwsExerciseNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(ExerciseNotFoundException.class, () -\u003e uniqueExerciseList.remove(PUSHUP));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void remove_existingExercise_removesExercise() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.remove(PUSHUP);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercises_nullUniqueExerciseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercises((UniqueExerciseList) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercises_uniqueExerciseList_replacesOwnListWithProvidedUniqueExerciseList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedUniqueExerciseList.add(BENCH);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.setExercises(expectedUniqueExerciseList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercises_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercises((List\u003cExercise\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercises_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        List\u003cExercise\u003e exerciseList \u003d Collections.singletonList(BENCH);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.setExercises(exerciseList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedUniqueExerciseList.add(BENCH);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercises_listWithDuplicateExercises_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        List\u003cExercise\u003e listWithDuplicateExercises \u003d Arrays.asList(PUSHUP, PUSHUP);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            uniqueExerciseList.setExercises(listWithDuplicateExercises));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            uniqueExerciseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/model/graph/AxisTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class AxisTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Axis(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void constructor_invalidAxis_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String invalidAxis \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Axis(invalidAxis));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void isValidAxis() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // null axis"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Axis.isValidAxis(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // invalid axis"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Axis.isValidAxis(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Axis.isValidAxis(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Axis.isValidAxis(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Axis.isValidAxis(\"reps*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // valid axis"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Axis.isValidAxis(\"reps\")); // small letters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Axis.isValidAxis(\"Reps\")); // with capital letters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Axis.isValidAxis(\"weIgHt\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Axis.isValidAxis(\"WEIGHT\")); // with all caps"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/graph/EndDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class EndDateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final LocalDate DATE_NOW \u003d LocalDate.now();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EndDate(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void isValidEndDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // null birthday"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EndDate.isValidEndDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // invalid birthdays"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"91\")); // random numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"not a birthday\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"not a birthday1\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"not a birthday2\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"not a birthday3\")); // non-numeric"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"not a birthday4\")); // non-numeric"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"11-e33-1998\")); // erroneous alphanumeric"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"11/12/1213\")); // incorrect delimiter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"11-13-1213\")); // months more than 12"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"32-11-1213\")); // dates more than 31"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"9-11-12131\")); // years more than 4 digits"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.plusDays(1).format(DATE_TIME_FORMATTER))); // 1 day after the current day"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.minusYears(1).minusDays(1).format(DATE_TIME_FORMATTER))); // 1 year and 1 day before current date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.minusYears(2).format(DATE_TIME_FORMATTER))); // 2 years before current date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(EndDate.isValidEndDate("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.format(DATE_TIME_FORMATTER))); // current date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(EndDate.isValidEndDate("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.minusMonths(4).format(DATE_TIME_FORMATTER))); // 4 months before current date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(EndDate.isValidEndDate("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.minusYears(1).format(DATE_TIME_FORMATTER))); // 1 year before current date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/graph/GraphTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_AXIS_REPS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_AXIS_WEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_ENDDATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_EXERCISE_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_STARTDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class GraphTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Graph graph1 \u003d new Graph(new ExerciseName(VALID_EXERCISE_NAME), new Axis(VALID_AXIS_REPS),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                new StartDate(VALID_STARTDATE), new EndDate(VALID_ENDDATE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Graph graph2 \u003d new Graph(new ExerciseName(VALID_EXERCISE_NAME), new Axis(VALID_AXIS_WEIGHT),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                new StartDate(VALID_STARTDATE), new EndDate(VALID_ENDDATE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Graph graph1Copy \u003d new Graph(new ExerciseName(VALID_EXERCISE_NAME), new Axis(VALID_AXIS_REPS),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                new StartDate(VALID_STARTDATE), new EndDate(VALID_ENDDATE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(graph1.equals(graph1Copy));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(graph1.equals(graph1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(graph1.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(graph1.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // different Graph -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(graph1.equals(graph2));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/graph/StartDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class StartDateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final LocalDate DATE_NOW \u003d LocalDate.now();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StartDate(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void isValidStartDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // null birthday"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StartDate.isValidStartDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // invalid birthdays"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"91\")); // random numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"not a birthday\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"not a birthday1\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"not a birthday2\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"not a birthday3\")); // non-numeric"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"not a birthday4\")); // non-numeric"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"11-e33-1998\")); // erroneous alphanumeric"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"11/12/1213\")); // incorrect delimiter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"11-13-1213\")); // months more than 12"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"32-11-1213\")); // dates more than 31"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"9-11-12131\")); // years more than 4 digits"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.plusDays(1).format(DATE_TIME_FORMATTER))); // 1 day after the current day"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.minusYears(1).minusDays(1).format(DATE_TIME_FORMATTER))); // 1 year and 1 day before current date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.minusYears(2).format(DATE_TIME_FORMATTER))); // 2 years before current date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(StartDate.isValidStartDate("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.format(DATE_TIME_FORMATTER))); // current date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(StartDate.isValidStartDate("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.minusMonths(4).format(DATE_TIME_FORMATTER))); // 4 months before current date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(StartDate.isValidStartDate("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.minusYears(1).format(DATE_TIME_FORMATTER))); // 1 year before current date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/schedule/DayEnumTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "class DayEnumTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void valueOfTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(DayEnum.Weekday.valueOf(\"MON\") \u003d\u003d DayEnum.Weekday.MON);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/schedule/DayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "class DayTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private Day originalDay \u003d new Day(\"mon\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Day(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void isValidDay() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        //null day"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Day.isValidDay(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        //invalid days"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Day.isValidDay(\"\")); //empty String"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Day.isValidDay(\"bs289sb\")); //random String 1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Day.isValidDay(\"D#$D#..\")); //random String 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Day.isValidDay(\"monday\")); //not adhering to three-letter format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Day.isValidDay(\"kim\")); //random String 3"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        //valid days"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Day.isValidDay(\"mon\")); //monday"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Day.isValidDay(\"mOn\")); //case insensitive"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Day.isValidDay(\"tuE\")); //case insensitive"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Day.isValidDay(\"Wed\")); //case insensitive"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Day.isValidDay(\"tHu\")); //case insensitive"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Day.isValidDay(\"frI\")); //case insensitive"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Day.isValidDay(\"SAT\")); //case insensitive"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Day.isValidDay(\"sUN\")); //case insensitive"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Day clonedDay \u003d originalDay.clone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(originalDay.equals(clonedDay));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        System.out.println(originalDay.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(originalDay.toString().equals(\"MON\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void getDayEnum() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(originalDay.getDayEnum().equals(DayEnum.Weekday.MON));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/schedule/TimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "class TimeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private Time time \u003d new Time(\"0000\") {}; //anonymous class that extends abstract Time for testing"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void isValidTimingFormat() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        //null initialisation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Time.isValidTimingFormat(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        //invalid timings"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Time.isValidTimingFormat(\"\")); //empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Time.isValidTimingFormat(\"fr3u9f\")); //random strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Time.isValidTimingFormat(\"4372\")); //wrong 4 digit number"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        //valid timings"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Time.isValidTimingFormat(\"0000\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Time.isValidTimingFormat(\"2359\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Time.isValidTimingFormat(\"0110\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void formatTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Time.formatTime(\"0000\").equals(\"00:00\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void getTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(time.getTime().equals(\"0000\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(time.toString().equals(\"00:00\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Time secondTime \u003d new Time(\"0000\") {};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Time thirdTime \u003d new Time(\"0001\") {};"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(time.equals(secondTime));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(time.equals(thirdTime));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void getDirectTimeInt() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(time.getDirectTimeInt() \u003d\u003d 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String invalidTagName \u003d \"/.,a\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedClientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.storage.JsonAdaptedClient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Birthday;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.CurrentWeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.TargetWeight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class JsonAdaptedClientTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_BIRTHDAY \u003d \"happy bday!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_CURRENT_WEIGHT \u003d \"eighty 2\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"helicopter\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_TARGET_WEIGHT \u003d \"tree fiddy\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_HEIGHT \u003d \"fiddy 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private static final String INVALID_SCHEDULE \u003d \"mon Time: 99:99 - 55:55\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_BIRTHDAY \u003d BENSON.getBirthday().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_CURRENT_WEIGHT \u003d BENSON.getCurrentWeight().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_GENDER \u003d BENSON.getGender().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_TARGET_WEIGHT \u003d BENSON.getTargetWeight().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_HEIGHT \u003d BENSON.getHeight().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream().map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final List\u003cJsonAdaptedSport\u003e VALID_SPORTS \u003d BENSON.getSports().stream().map(JsonAdaptedSport::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final List\u003cJsonAdaptedExercise\u003e VALID_EXERCISE_LIST \u003d BENSON.getExerciseList()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            .asUnmodifiableObservableList().stream().map(JsonAdaptedExercise::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private static final List\u003cJsonAdaptedSchedule\u003e VALID_SCHEDULE_LIST \u003d BENSON.getScheduleList().getArrayList()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            .stream().map(JsonAdaptedSchedule::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_validClientDetails_returnsClient() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(BENSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(BENSON, client.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(INVALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(null, VALID_GENDER, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT, VALID_REMARK,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT, VALID_REMARK,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT, VALID_REMARK,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                INVALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT, VALID_REMARK,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, invalidTags, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, client::toModelType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidBirthday_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, INVALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d Birthday.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullBirthday_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, null, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT, VALID_REMARK,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Birthday.class.getSimpleName());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidCurrentWeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, INVALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d CurrentWeight.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullCurrentWeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, null, VALID_TARGET_WEIGHT, VALID_HEIGHT, VALID_REMARK,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CurrentWeight.class.getSimpleName());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, INVALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d Gender.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT, VALID_REMARK,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidTargetWeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, INVALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d TargetWeight.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullTargetWeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, null, VALID_HEIGHT, VALID_REMARK,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TargetWeight.class.getSimpleName());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidHeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, INVALID_HEIGHT,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d Height.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullHeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, null,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Height.class.getSimpleName());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullRemark_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                null, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 2,
      "Dban1": 21,
      "AaronCQL": 221
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "class JsonAdaptedScheduleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final String INVALID_DAY \u003d \"RANDOMDAY\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final String INVALID_START_TIME \u003d \"5555\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final String INVALID_END_TIME \u003d \"9999\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final String VALID_DAY \u003d \"MON\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final String VALID_START_TIME \u003d \"1100\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final String VALID_END_TIME \u003d \"1200\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void toModelType_validSchedule_returnsSchedule() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        JsonAdaptedSchedule schedule \u003d new JsonAdaptedSchedule(BENSON.getScheduleList().getArrayList().get(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            assertEquals(BENSON.getScheduleList().getArrayList().get(0), schedule.toModelType());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new AssertionError(\"This test should not fail.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonFitBizStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalClients.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalClients.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class JsonFitBizStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonFitBizStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void readFitBiz_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readFitBiz(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFitBiz\u003e readFitBiz(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new JsonFitBizStorage(Paths.get(filePath)).readFitBiz(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(readFitBiz(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFitBiz(\"notJsonFormatFitBiz.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void readFitBiz_invalidClientFitBiz_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFitBiz(\"invalidClientFitBiz.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void readFitBiz_invalidAndValidClientFitBiz_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFitBiz(\"invalidAndValidClientFitBiz.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void readAndSaveFitBiz_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempFitBiz.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBiz original \u003d getTypicalFitBiz();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        JsonFitBizStorage jsonFitBizStorage \u003d new JsonFitBizStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        jsonFitBizStorage.saveFitBiz(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ReadOnlyFitBiz readBack \u003d jsonFitBizStorage.readFitBiz(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(original, new FitBiz(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        original.addClient(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        original.removeClient(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        jsonFitBizStorage.saveFitBiz(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        readBack \u003d jsonFitBizStorage.readFitBiz(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(original, new FitBiz(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        original.addClient(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        jsonFitBizStorage.saveFitBiz(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        readBack \u003d jsonFitBizStorage.readFitBiz().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(original, new FitBiz(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void saveFitBiz_nullFitBiz_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFitBiz(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Saves {@code fitBiz} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void saveFitBiz(ReadOnlyFitBiz fitBiz, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            new JsonFitBizStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    .saveFitBiz(fitBiz, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void saveFitBiz_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFitBiz(new FitBiz(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 101,
      "AaronCQL": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableFitBizStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.TypicalClients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class JsonSerializableFitBizStorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableFitBizStorageTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final Path TYPICAL_CLIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalClientsFitBiz.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final Path INVALID_CLIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidClientFitBiz.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final Path DUPLICATE_CLIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateClientFitBiz.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_typicalClientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        JsonSerializableFitBizStorage dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_CLIENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                JsonSerializableFitBizStorage.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        FitBiz fitBizFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBiz typicalClientsFitBiz \u003d TypicalClients.getTypicalFitBiz();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(fitBizFromFile, typicalClientsFitBiz);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void toModelType_invalidClientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        JsonSerializableFitBizStorage dataFromFile \u003d JsonUtil.readJsonFile(INVALID_CLIENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                JsonSerializableFitBizStorage.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_duplicateClients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        JsonSerializableFitBizStorage dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_CLIENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                JsonSerializableFitBizStorage.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFitBizStorage.MESSAGE_DUPLICATE_CLIENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 15,
      "Dban1": 1,
      "AaronCQL": 11,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        userPrefs.setFitBizFilePath(Paths.get(\"fitbiz.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonFitBizStorage fitBizStorage \u003d new JsonFitBizStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        storageManager \u003d new StorageManager(fitBizStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void fitBizReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * {@link JsonFitBizStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonFitBizStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBiz original \u003d getTypicalFitBiz();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        storageManager.saveFitBiz(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ReadOnlyFitBiz retrieved \u003d storageManager.readFitBiz().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(original, new FitBiz(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getFitBizFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertNotNull(storageManager.getFitBizFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6,
      "AaronCQL": 8,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Birthday;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.CurrentWeight;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.PersonalBest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.TargetWeight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * A utility class to help with building Client objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class ClientBuilder {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String DEFAULT_BIRTHDAY \u003d \"01-01-1992\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String DEFAULT_CURRENT_WEIGHT \u003d \"52\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String DEFAULT_TARGET_WEIGHT \u003d \"52\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"Male\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String DEFAULT_HEIGHT \u003d \"175\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"Some remarks\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String DEFAULT_SPORT \u003d \"Coding\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String DEFAULT_SCHEDULE \u003d \"mon Time: 12:00 - 14:00\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Birthday birthday;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private CurrentWeight currentWeight;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Height height;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Set\u003cSport\u003e sports;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private TargetWeight targetWeight;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // TODO: change this later"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private UniqueExerciseList exerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private PersonalBest personalBest \u003d new PersonalBest();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private ScheduleList scheduleList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientBuilder() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        currentWeight \u003d new CurrentWeight(DEFAULT_CURRENT_WEIGHT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        height \u003d new Height(DEFAULT_HEIGHT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        targetWeight \u003d new TargetWeight(DEFAULT_TARGET_WEIGHT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        sports \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Initializes the ClientBuilder with the data of {@code clientToCopy}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientBuilder(Client clientToCopy) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        name \u003d clientToCopy.getName();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        phone \u003d clientToCopy.getPhone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        email \u003d clientToCopy.getEmail();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        address \u003d clientToCopy.getAddress();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        birthday \u003d clientToCopy.getBirthday();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        currentWeight \u003d clientToCopy.getCurrentWeight();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        gender \u003d clientToCopy.getGender();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        height \u003d clientToCopy.getHeight();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        remark \u003d clientToCopy.getRemark();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        targetWeight \u003d clientToCopy.getTargetWeight();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        sports \u003d new HashSet\u003c\u003e(clientToCopy.getSports());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(clientToCopy.getTags());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ScheduleList newScheduleList \u003d clientToCopy.getScheduleList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        scheduleList \u003d newScheduleList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Sets the {@code Name} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientBuilder withName(String name) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Client} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Sets the {@code Address} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Sets the {@code Phone} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Sets the {@code Email} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Birthday} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ClientBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.birthday \u003d new Birthday(birthday);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code CurrentWeight} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ClientBuilder withCurrentWeight(String currentWeight) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.currentWeight \u003d new CurrentWeight(currentWeight);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Gender} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ClientBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Height} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ClientBuilder withHeight(String height) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.height \u003d new Height(height);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Remark} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ClientBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code TargetWeight} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ClientBuilder withTargetWeight(String targetWeight) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.targetWeight \u003d new TargetWeight(targetWeight);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Parses the {@code sports} into a {@code Set\u003cSport\u003e} and set it to the {@code Client} that we are building."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ClientBuilder withSports(String... sports) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.sports \u003d SampleDataUtil.getSportSet(sports);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Adds the {@code exercise} to {@code UniqueExerciseList}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ClientBuilder withExercisesInExerciseList(Exercise exercise) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseList.add(exercise);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Sets the {@code scheduleList} to the {@code Client} that we are building."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientBuilder withScheduleList(ScheduleList scheduleList) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.scheduleList \u003d scheduleList;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Builds and returns the client."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public Client build() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new Client(name, gender, phone, email, address, tags, birthday, currentWeight,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                targetWeight, height, remark, sports, exerciseList, personalBest, scheduleList);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 9,
      "ziyingli": 3,
      "tohkerwei": 2,
      "Dban1": 38,
      "AaronCQL": 98,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENT_WEIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPORT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET_WEIGHT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * A utility class for Client."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class ClientUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns an add command string for adding the {@code client}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static String getAddCommand(Client client) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getClientDetails(client);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns the part of command string for the given {@code client}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static String getClientDetails(Client client) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        sb.append(PREFIX_NAME + client.getName().fullName + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        sb.append(PREFIX_PHONE + client.getPhone().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        sb.append(PREFIX_EMAIL + client.getEmail().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        sb.append(PREFIX_ADDRESS + client.getAddress().value + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        client.getTags().stream().forEach("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns the part of command string for the given {@code EditClientDescriptor}\u0027s details."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static String getEditClientDescriptorDetails(EditClientDescriptor descriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.getBirthday().ifPresent(bday -\u003e sb.append(PREFIX_BIRTHDAY).append(bday.displayValue).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.getCurrentWeight().ifPresent(cWeight -\u003e sb.append(PREFIX_CURRENT_WEIGHT)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .append(cWeight.value).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.getGender().ifPresent(gender -\u003e sb.append(PREFIX_GENDER).append(gender.value).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.getHeight().ifPresent(height -\u003e sb.append(PREFIX_HEIGHT).append(height.value).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.getRemark().ifPresent(remark -\u003e sb.append(PREFIX_REMARK).append(remark.value).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.getTargetWeight().ifPresent(tWeight -\u003e sb.append(PREFIX_TARGET_WEIGHT)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .append(tWeight.value).append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (descriptor.getSports().isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            Set\u003cSport\u003e sports \u003d descriptor.getSports().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (sports.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                sb.append(PREFIX_SPORT).append(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                sports.forEach(s -\u003e sb.append(PREFIX_SPORT).append(s.sportName).append(\" \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 16,
      "AaronCQL": 24,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditClientDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Birthday;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.CurrentWeight;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.TargetWeight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * A utility class to help with building EditClientDescriptor objects."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class EditClientDescriptorBuilder {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private EditClientDescriptor descriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptorBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor \u003d new EditCommand.EditClientDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptorBuilder(EditClientDescriptor descriptor) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.descriptor \u003d new EditClientDescriptor(descriptor);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns an {@code EditClientDescriptor} with fields containing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code client}\u0027s details"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptorBuilder(Client client) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor \u003d new EditCommand.EditClientDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setName(client.getName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setPhone(client.getPhone());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setEmail(client.getEmail());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setAddress(client.getAddress());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setTags(client.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setGender(client.getGender());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setCurrentWeight(client.getCurrentWeight());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setTargetWeight(client.getTargetWeight());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setRemark(client.getRemark());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setSports(client.getSports());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setBirthday(client.getBirthday());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setHeight(client.getHeight());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Name} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Email} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Address} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Gender} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public EditClientDescriptorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setGender(new Gender(gender));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code CurrentWeight} of the {@code EditClientDescriptor} that we"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public EditClientDescriptorBuilder withCurrentWeight(String currentWeight) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setCurrentWeight(new CurrentWeight(currentWeight));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code TargetWeight} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public EditClientDescriptorBuilder withTargetWeight(String targetWeight) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setTargetWeight(new TargetWeight(targetWeight));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Remark} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public EditClientDescriptorBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setRemark(new Remark(remark));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Birthday} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public EditClientDescriptorBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setBirthday(new Birthday(birthday));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Height} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public EditClientDescriptorBuilder withHeight(String height) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setHeight(new Height(height));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Parses the {@code sports} into a {@code Set\u003cSport\u003e} and set it to the"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public EditClientDescriptorBuilder withSports(String... sports) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Set\u003cSport\u003e tagSet \u003d Stream.of(sports).map(Sport::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setSports(tagSet);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptor build() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 80,
      "AaronCQL": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditExerciseDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseSets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * A utility class to help with building EditExerciseDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @author @yonggiee"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class EditExerciseDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private EditExerciseDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor \u003d new EditExerciseCommand.EditExerciseDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptorBuilder(EditExerciseDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.descriptor \u003d new EditExerciseDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns an {@code EditExerciseDescriptor} with fields containing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * {@code Exercise}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptorBuilder(Exercise exercise) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor \u003d new EditExerciseCommand.EditExerciseDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseName(exercise.getExerciseName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseReps(exercise.getExerciseReps());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseSets(exercise.getExerciseSets());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseWeight(exercise.getExerciseWeight());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseDate(exercise.getExerciseDate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseName} of the {@code EditExerciseDescriptor} that we"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptorBuilder withExerciseName(String exerciseName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseName(new ExerciseName(exerciseName));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseReps} of the {@code EditExerciseDescriptor} that we"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptorBuilder withExerciseReps(String exerciseReps) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseReps(new ExerciseReps(exerciseReps));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseSets} of the {@code EditExerciseDescriptor} that we"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptorBuilder withExerciseSets(String exerciseSets) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseSets(new ExerciseSets(exerciseSets));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseWeight} of the {@code EditExerciseDescriptor} that we"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptorBuilder withExerciseWeight(String exerciseWeight) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseWeight(new ExerciseWeight(exerciseWeight));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseDate} of the {@code EditExerciseDescriptor} that we"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptorBuilder withExerciseDate(String exerciseDate) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseDate(new ExerciseDate(exerciseDate));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptor build() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExerciseBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseSets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * A utility class to help with building Exercise objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @author @yonggiee"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String DEFAULT_EXERCISE_NAME \u003d \"Bench Press\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String DEFAULT_EXERCISE_REPS \u003d \"12\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String DEFAULT_EXERCISE_SETS \u003d \"4\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String DEFAULT_EXERCISE_WEIGHT \u003d \"100\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String DEFAULT_EXERCISE_DATE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        LocalDate.now().minusDays(1).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ExerciseName exerciseName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ExerciseReps exerciseReps;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ExerciseSets exerciseSets;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ExerciseWeight exerciseWeight;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ExerciseDate exerciseDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseName \u003d new ExerciseName(DEFAULT_EXERCISE_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseReps \u003d new ExerciseReps(DEFAULT_EXERCISE_REPS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseSets \u003d new ExerciseSets(DEFAULT_EXERCISE_SETS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseWeight \u003d new ExerciseWeight(DEFAULT_EXERCISE_WEIGHT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseDate \u003d new ExerciseDate(DEFAULT_EXERCISE_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Initializes the ExerciseBuilder with the data of {@code exerciseToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseBuilder(Exercise exerciseToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseName \u003d exerciseToCopy.getExerciseName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseReps \u003d exerciseToCopy.getExerciseReps();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseSets \u003d exerciseToCopy.getExerciseSets();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseWeight \u003d exerciseToCopy.getExerciseWeight();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseDate \u003d exerciseToCopy.getExerciseDate();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseName} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseBuilder withExerciseName(String exerciseName) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseName \u003d new ExerciseName(exerciseName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseReps} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseBuilder withExerciseReps(String exerciseReps) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseReps \u003d new ExerciseReps(exerciseReps);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseSets} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseBuilder withExerciseSets(String exerciseSets) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseSets \u003d new ExerciseSets(exerciseSets);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseWeight} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseBuilder withExerciseWeight(String exerciseWeight) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseWeight \u003d new ExerciseWeight(exerciseWeight);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseDate} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseBuilder withExerciseDate(String exerciseDate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseDate \u003d new ExerciseDate(exerciseDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Builds and returns the Exercise."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Exercise build() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new Exercise(exerciseName, exerciseReps, exerciseSets, exerciseWeight, exerciseDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FitBizBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * A utility class to help with building {@code FitBiz} objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " *     {@code FitBiz ab \u003d new FitBizBuilder().withClient(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class FitBizBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private FitBiz fitBiz;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public FitBizBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBiz \u003d new FitBiz();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public FitBizBuilder(FitBiz fitBiz) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.fitBiz \u003d fitBiz;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Adds a new {@code Client} to the {@code FitBiz} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public FitBizBuilder withClient(Client client) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBiz.addClient(client);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public FitBiz build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return fitBiz;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ScheduleBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.Day;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.EndTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.StartTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * A utility class to help build Schedules."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class ScheduleBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String DEFAULT_DAY \u003d (\"MON\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"1100\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"1200\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private Day day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private StartTime startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private EndTime endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        day \u003d new Day(DEFAULT_DAY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        startTime \u003d new StartTime(DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        endTime \u003d new EndTime(DEFAULT_END_TIME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public Schedule build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new Schedule(day, startTime, endTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Wraps the current Schedule in a ScheduleList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleList buildAsList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e scheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleList.add(this.build());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new ScheduleList(scheduleList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Updates the Day of the ScheduleBuilder."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleBuilder withDay(String day) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.day \u003d new Day(day);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Updates the Start Time of the ScheduleBuilder."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param st"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleBuilder withStartTime(String st) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.startTime \u003d new StartTime(st);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Updates the End Time of the ScheduleBuilder."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param et"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleBuilder withEndTime(String et) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.endTime \u003d new EndTime(et);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns the middle index of the client in the {@code model}\u0027s client list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return Index.fromOneBased(model.getFilteredClientList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns the last index of the client in the {@code model}\u0027s client list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return Index.fromOneBased(model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns the client in the {@code model}\u0027s client list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static Client getClient(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return model.getFilteredClientList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalClients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * A utility class containing a list of {@code Client} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class TypicalClients {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client ALICE \u003d new ClientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExercisesInExerciseList(new ExerciseBuilder().build())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExercisesInExerciseList(new ExerciseBuilder().withExerciseName(\"ZANOTHER\").build())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Client ALICE_DELETED_EXERCISE \u003d new ClientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExercisesInExerciseList(new ExerciseBuilder().withExerciseName(\"ZANOTHER\").build())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client BENSON \u003d new ClientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withBirthday(\"12-03-1980\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            .withCurrentWeight(\"70.3\").withGender(\"m\").withTargetWeight(\"90\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            .withHeight(\"180\").withSports(\"Hockey\", \"Skating\").withRemark(\"Thicc\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            .withScheduleList(new ScheduleBuilder().buildAsList()).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client CARL \u003d new ClientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client DANIEL \u003d new ClientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client ELLE \u003d new ClientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client FIONA \u003d new ClientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withTags(\"normal\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client GEORGE \u003d new ClientBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withTags(\"normal\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            .withSports(\"dance\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client HOON \u003d new ClientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client IDA \u003d new ClientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    // Manually added - Client\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client AMY \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client BOB \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    //Manually added for filter"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final Client JESSICA \u003d new ClientBuilder().withName(\"Jessica Ang\").withPhone(\"84851234\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            .withEmail(\"jess@example.com\").withAddress(\"little indianic ocean\").withTags(\"handsome\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            .withSports(\"hockey\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final Client RACHEL \u003d new ClientBuilder().withName(\"Rachel Tan\").withPhone(\"8445631\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            .withEmail(\"tanr@example.com\").withAddress(\"chicagonean ave coast\").withTags(\"normal\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            .withSports(\"sumo\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private TypicalClients() {} // prevents instantiation"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns an {@code FitBiz} with all the typical clients."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static FitBiz getTypicalFitBiz() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        FitBiz ab \u003d new FitBiz();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        for (Client client : getTypicalClients()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            ab.addClient(client);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static List\u003cClient\u003e getTypicalClients() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 13,
      "tohkerwei": 12,
      "Dban1": 21,
      "AaronCQL": 3,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExercises.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_DATE_BENCH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_DATE_PUSHUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_NAME_BENCH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_NAME_PUSHUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_REPS_BENCH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_REPS_PUSHUP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_SETS_BENCH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_SETS_PUSHUP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_WEIGHT_BENCH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_WEIGHT_PUSHUP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * A utility class containing a list of {@code Exercise} objects to be used in"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class TypicalExercises {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    // Manually added - Exercise details found in {@code ExerciseCommandTestUtil}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Exercise PUSHUP \u003d new ExerciseBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseName(VALID_EXERCISE_NAME_PUSHUP)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseReps(VALID_EXERCISE_REPS_PUSHUP)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseSets(VALID_EXERCISE_SETS_PUSHUP)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseWeight(VALID_EXERCISE_WEIGHT_PUSHUP)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseDate(VALID_EXERCISE_DATE_PUSHUP).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Exercise BENCH \u003d new ExerciseBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseName(VALID_EXERCISE_NAME_BENCH)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseReps(VALID_EXERCISE_REPS_BENCH)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseSets(VALID_EXERCISE_SETS_BENCH)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseWeight(VALID_EXERCISE_WEIGHT_BENCH)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseDate(VALID_EXERCISE_DATE_BENCH).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TypicalExercises() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Index INDEX_FIRST_CLIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Index INDEX_SECOND_CLIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Index INDEX_THIRD_CLIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Index INDEX_FIRST_EXERCISE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Index INDEX_SECOND_EXERCISE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 3,
      "Dban1": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 3
    }
  }
]
