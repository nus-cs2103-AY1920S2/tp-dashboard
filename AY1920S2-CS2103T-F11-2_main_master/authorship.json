[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    applicationDefaultJvmArgs \u003d [\u0027-Dglass.gtk.uiScale\u003d1.5\u0027]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // uncomment this to enable printing to stdout in tests"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // testLogging.showStandardStreams \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    archiveName \u003d \u0027FitBiz.jar\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027seedu/address/ui\u0027, \u0027seedu/address/model/util\u0027])"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        \u0027site-name\u0027: \u0027FitBiz\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F11-2/main\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 11,
      "-": 150
    }
  },
  {
    "path": "docs/draft/UserGuideDraft.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003c!-- omit in toc --\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "# FitBiz User Guide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- [2. Quick Start](#2-quick-start)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- [3. Features](#3-features)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.1. View help: `help`](#31-view-help-help)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.2. Add a new client profile: `add client`](#32-add-a-new-client-profile-add-client)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.3. View a client profile: `view client`](#33-view-a-client-profile-view-client)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.4. Edit a client’s profile: `edit client`](#34-edit-a-clients-profile-edit-client)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.5. Delete a client: `delete client`](#35-delete-a-client-delete-client)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.6. List all clients: `list`](#36-list-all-clients-list)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.7. Display a list of predefined exercises: `view exercise`](#37-display-a-list-of-predefined-exercises-view-exercise)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.8. Add a new exercise: `add exercise template`](#38-add-a-new-exercise-add-exercise-template)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.9. Start a timer: `time`](#39-start-a-timer-time)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - [3.10. Add a new routine template: `add routine template`](#310-add-a-new-routine-template-add-routine-template)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - [3.11. View the list of routine template: `view routine template`](#311-view-the-list-of-routine-template-view-routine-template)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - [3.12. Edit a routine template: `edit routine template`](#312-edit-a-routine-template-edit-routine-template)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "  - [3.13. Tag a client: `tag`](#313-tag-a-client-tag)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "  - [3.14. Sort clients based on attribute: `sort clients`](#314-sort-clients-based-on-attribute-sort-clients)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - [3.15. List routines: `list routines`](#315-list-routines-list-routines)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "  - [3.16. Check total earnings: `earnings`](#316-check-total-earnings-earnings)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.18. Track payment date: `view payment`](#318-track-payment-date-view-payment)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "  - [3.19. View cliental best: `view pb`](#319-view-cliental-best-view-pb)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.20. View schedule for the day/week: `view schedule`](#320-view-schedule-for-the-dayweek-view-schedule)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.21. View client summary: `show summary`](#321-view-client-summary-show-summary)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.22. Export as CSV: `export`](#322-export-as-csv-export)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.23. Add a new food template: `add food template`](#323-add-a-new-food-template-add-food-template)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.24. Edit an existing food template: `edit food template`](#324-edit-an-existing-food-template-edit-food-template)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.25. Delete food item: `delete food template`](#325-delete-food-item-delete-food-template)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.26. Display visualisations of training progress: `training graph`](#326-display-visualisations-of-training-progress-training-graph)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.27. List all gyms: `list gyms`](#327-list-all-gyms-list-gyms)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.28. Find out information about a gym: `view gym`](#328-find-out-information-about-a-gym-view-gym)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.29. Make meal plans: `meal`](#329-make-meal-plans-meal)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.28. Compares the daily and target caloric intake: `calories`](#328-compares-the-daily-and-target-caloric-intake-calories)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.29. Show Competitors: `find competitor`](#329-show-competitors-find-competitor)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - [3.30. Find the nearest gyms: `find gym`](#330-find-the-nearest-gyms-find-gym)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.31. Booking a facility: `book`](#331-booking-a-facility-book)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.32. Add photos to client’s photo album: `add photo`](#332-add-photos-to-clients-photo-album-add-photo)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - [3.33. View client photo album: `view photo`](#333-view-client-photo-album-view-photo)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "FitBiz is for fitness coaches who are managing multiple clients and prefer to use a desktop app for managing their clients. More importantly, FitBiz is optimized for those who prefer to work with Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, FitBiz can get your client management and tracking tasks done faster than traditional GUI apps. Interested? Jump to the Section 2, “Quick Start” to get started. Enjoy!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "1. Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "2. Download the latest FitBiz.jar here."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your Fitness Manager."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "4. Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "5. Type the command in the command box and press Enter to execute it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "e.g. typing help and pressing Enter will open the help window."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "6. Some example commands you can try:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    - `list` : lists all clients"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    - `add client n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named John Doe to the Address Book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    - `exit` : exits the app"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "7. Refer to Section 3, “Features” for details of each command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format of commands:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Words in `UPPER_SNAKE_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Items with `…` after them can be used multiple times including zero times e.g. `[t/TAG]…` can be used as   (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.1. View help: `help`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Lists all available commands and a short description of what they do. Specify the command for more detailed explanation."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `help [c/COMMAND]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `help`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Lists all commands"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `help add client`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows a detailed explanation of the `add client` command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.2. Add a new client profile: `add client`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Initialises and adds a new client profile."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `add client n/NAME`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `add client n/Ming Liang`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Adds a new client: Ming Liang"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `add client n/Low Tah Kiow, John`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Adds a new client: Low Tah Kiow, John"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.3. View a client profile: `view client`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows all available information of the client."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view client n/NAME`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view client n/Ming Liang`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows information about Ming Liang"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view client n/Low Tah Kiow, John`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows information about Low Tah Kiow, John"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.4. Edit a client’s profile: `edit client`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Updates the client’s cliental details by specifying the attribute and the new value."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `edit client n/NAME [a/ATTRIBUTE v/VALUE]...`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[a/ATTRIBUTE]` has to be a valid attribute for the client."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[v/VALUE]` has to be of matching type to the attribute of the client"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `edit client n/Ming Liang a/age v/60 a/gender v/male`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Sets Ming Liang’s age to 60 and gender to male."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.5. Delete a client: `delete client`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Deletes a client from the program."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `delete n/NAME`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `delete n/Ming Liang`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Removes Ming Liang’s profile."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.6. List all clients: `list`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows all clients currently entered in this program."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.7. Display a list of predefined exercises: `view exercise`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Displays a list of exercises available in the program. Specify the muscle group(s) to list only exercises that target that muscle group(s)."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view exercise [m/MUSCLE]...`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view exercise`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows a list of all exercises and their information stored in the program"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view exercise m/abdomens m/chest`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows all exercises that target the abdomens and chest"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.8. Add a new exercise: `add exercise template`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "If the list of predefined exercises are not enough, you may choose to add a new exercise for future use."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `add exercise template e/EXERCISE_NAME t/TARGET_MUSCLE...`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- There must be at least one `TARGET_MUSCLE` specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `add exercise template e/Skipping Rope t/Quadriceps t/Calves`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Adds a new exercise Skipping Rope which targets the Quadricepts and Calves muscle group"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.9. Start a timer: `time`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Starts a timer which will notify you when it ends."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `time [h/HOURS] [m/MINUTES] [s/SECONDS]`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `time m/4 s/40`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Starts a timer for 4 minutes and 40 seconds"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "### 3.10. Add a new routine template: `add routine template`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Adds a new routine template with the specified name and exercise templates."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Format: `add routine template n/NAME_OF_TEMPLATE e/[EXERCISE_TEMPLATES]...`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME_OF_TEMPLATE` is case insensitive. e.g `back` will match `Back`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Push Pull` will not match `Pull Push`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g `Push` will not match `Push Pull`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `e/EXERCISE_TEMPLATES` must exist in the predefined list of exercise templates"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `add routine template n/Push Pull e/Pull Up e/Bench Press`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - Adds a new routine template with called Push Pull with 2 exercises, Pull Up and Bench Press."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "### 3.11. View the list of routine template: `view routine template`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Lists all routine templates."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Format: `view routine template`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "### 3.12. Edit a routine template: `edit routine template`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Edits a new routine template with the specified name and exercise templates."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Format: `edit routine template n/NAME_OF_TEMPLATE [a/ATTRIBUTE v/VALUE]...`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME_OF_TEMPLATE` is case insensitive. e.g `back` will match `Back`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Push Pull` will not match `Pull Push`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g `Push` will not match `Push Pull`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `[a/ATTRIBUTE]` has to be a valid attribute for the routine template"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `[v/VALUE]` has to be of matching type to the attribute of the routine template"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `edit routine template n/Push Pull a/NAME_OF_TEMPLATE v/Pull Push`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - Renames the routine template called Push Pull to Pull Push"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `add routine template n/Push Pull e/Pull Up e/Bench Press`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - Adds a new routine template with called Push Pull with 2 exercises, Pull Up and Bench Press"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Dban1"
        },
        "content": "### 3.13. Tag a client: `tag`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Assigns a tag to a client for ease of grouping and searching."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Format: `tag c/CLIENT t/TAG`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- `tag c/Jeffreigh t/Professional`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Dban1"
        },
        "content": " - The client Jeffreigh is now tagged as \"Professional\". Future searches for the Professional tag will include Jeffreigh"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Dban1"
        },
        "content": "### 3.14. Sort clients based on attribute: `sort clients`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Sorts clients by descending order based on the specified attribute."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Format: `sort clients a/ATTRIBUTE`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- `sort clients a/Height`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    - returns a sorted list of all clients in descending order"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "### 3.15. List routines: `list routines`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Returns a list of all routines."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Format: `list routines`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `list routines`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    - returns a complete list of all routines."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Sorts clients by descending order based on the specified attribute."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Format: `sort clients a/ATTRIBUTE`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- `sort clients a/Height`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    - returns a sorted list of all clients in descending order"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Dban1"
        },
        "content": "### 3.16. Check total earnings: `earnings`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows the total earnings or the specific earnings for a client."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `earnings [n/NAME] [t/TAG]`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- If no name is given, total earnings from all clients will be shown"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- If a name is given, only earnings from that client is shown"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[n/NAME]` is case insensitive. e.g hans will match Hans"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g Hans Ong will not match Ong Hans"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. Hans will not match Hans Ong"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `earnings`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows the complete list of clients and total earnings."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `earnings n/Jane Doe`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows the earnings from client Jane Doe only."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.18. Track payment date: `view payment`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows the list of payment information."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view payment d/DETAIL`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `d/DETAIL` can be `n/NAME`, `d/DATE` or `m/MONTH`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME`is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `d/DATE` must be in the format `DD/MM/YYYY`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `m/MONTH` must be spelt in full e.g. `january`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view payment n/tom`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows a payment details of clients name Tom"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view payment d/12/12/2020`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows all payment details on 12 December 2020"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view payment m/august`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows all payment details in August"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Dban1"
        },
        "content": "### 3.19. View cliental best: `view pb`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Dban1"
        },
        "content": "Displays the cliental best of all exercises of a client."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view pb n/NAME`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view pb n/Raymond tan`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows the best record done for all exercises done by Raymond Tan"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.20. View schedule for the day/week: `view schedule`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows the schedule for today or the time specified."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view schedule t/TYPE`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `t/TYPE` can be `d/DATE`, `week` or `month`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `d/DATE` must be of the format `DD/MM/YYYY`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- to view schedule for today, leave `t/TYPE` blank"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view schedule`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows the schedule for today"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view schedule t/week`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows the schedule of the current week"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.21. View client summary: `show summary`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows all the trainings done by the client."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view summary n/NAME`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view summary n/Timothy Lee`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows all the training records of Timothy Lee"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.22. Export as CSV: `export`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Exports client\u0027s training record to a CSV file."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `export n/NAME`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `export n/Lucy Liu`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Exports training records of Lucy Liu as a CSV file"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.23. Add a new food template: `add food template`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Adds a new food template with the specified name and calories per serving."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `add food n/NAME_OF_FOOD c/CALORIES`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME_OF_FOOD` is case insensitive. e.g `laksa` will match `Laksa`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Nasi Lemak` will not match `Lemak Nasi`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g `Nasi` will not match `Nasi Lemak`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `c/CALORIES` is the calories per serving"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `add food template n/Chilli Crab c/100`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Adds a new food template with food name Chilli Crab and 100 calories per serving."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.24. Edit an existing food template: `edit food template`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Edits an existing food template."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `edit food template n/NAME_OF_FOOD [a/ATTRIBUTE v/VALUE]...`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME_OF_FOOD` is case insensitive. e.g `laksa` will match `Laksa`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Nasi Lemak` will not match `Lemak Nasi`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g `Nasi` will not match `Nasi Lemak`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[a/ATTRIBUTE]` has to be a valid attribute for the food"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[v/VALUE]` has to be of matching type to the attribute of the food"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `edit n/Chilli Crab a/CALORIES v/200`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Edits the calories per serving for Chilli Crab to be 200g per serving.  "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.25. Delete food item: `delete food template`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Deletes an existing food template."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `delete food template n/NAME_OF_FOOD`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME_OF_FOOD` is case insensitive. e.g `laksa` will match `Laksa`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Nasi Lemak` will not match `Lemak Nasi`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g `Nasi` will not match `Nasi Lemak`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[a/ATTRIBUTE]` has to be a valid attribute for the food."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `delete food template n/Chilli Crab`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Removes food template for Chilli Crab."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.26. Display visualisations of training progress: `training graph`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Shows visualisations of client’s exercise progress."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `training graph n/NAME a/ATTRIBUTE [s/START] [e/END]`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Generates a graphical representation of the client’s progress"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Client is specified by `n/NAME`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- `a/ATTRIBUTE` include client’s weight, workout cliental best, fat percentage etc"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[s/START]`, `[e/END]` are optional"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Date format of `[s/START]`, `[e/END]` is `DD/MM/YYYY`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `training graph n/Ming Liang a/weight`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows a graph of Ming Liang’s weight losing progress since he first started to current date."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.27. List all gyms: `list gyms`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Lists all available gyms in Singapore."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `list gyms`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.28. Find out information about a gym: `view gym`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Finds and lists information about a gym, including opening and closing times, popularity etc."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view gym g/GYM`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `g/GYM` is case insensitive. e.g `clementi gym` will match `Clementi Gym`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Gym Clementi` will not match `Clementi Gym`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Jurong` will not match `Jurong East Gym`."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view gym g/Jurong East Fitness Club`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Returns the address, opening and closing times and average occupancy.  "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.29. Make meal plans: `meal`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Stores meal plans into the storage."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `meal [n/NAME] [l/] [f/FOOD] [c/CALORIES]`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Saves the meal into storage for reference and to assign to client."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Multiple ingredients are separated by `[l/]`."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Can have multiple `[l/]` for the breakdown of different ingredients in the food."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[c/CALORIES]` can be used to calculate client’s daily calories intake automatically."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[c/CALORIES]` must be a number."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `meal n/Chicken Breast with Brocolli l/f/Chicken breast c/165 calories 1/f/Brocolli c/34 calories`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Stores meal plan chicken breast with broccoli with the breakdown of calories from chicken breast and broccoli."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.28. Compares the daily and target caloric intake: `calories`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Calculates the difference between client’s current calorie intake and expected intake value"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `calories [n/NAME]`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[n/Name]` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `calories n/Ming Liang`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Returns Ming Liang’s current calorie intake out of expected calorie intake."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.29. Show Competitors: `find competitor`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows a list of clients who have the specified competition."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `find competitors [n/NAME]`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Shows a list of clients with the specified competition tagged to their profile."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/[Name]` is case insensitive. e.g hometeamns will match HomeTeamNS"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will not matter. e.g `Fitness Ironman` will match `Ironman Fitness`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only full words will be matched. e.g. `Iron` will not match `Irons`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Competition matching at least one keyword will be returned. e.g. `Ironman Powerlifting` will return `HomeTeamNS Fitness Ironman 2019, Sheffield 2020 Powerlifting`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `find competitors HomeTeamNS Fitness Ironman 2019`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows a list of clients competing for HomeTeamNS Fitness Ironman 2019."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `find competitors Sheffield 2020 Powerlifting`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows a list of clients competing for Sheffield 2020 Powerlifting."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "### 3.30. Find the nearest gyms: `find gym`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Finds the nearest gyms to a client according to their address."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "Format: `find gym [n/NAME]`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `n/NAME` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of words will matter. e.g `Hans Ong` will not match `Ong Hans`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only exact match will be shown. e.g. `Hans` will not match `Hans Ong`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- At most 5 gyms will be shown"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "- `find gym n/Kee Ah Siow`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  - Finds the nearest gyms to Kee Ah Siow"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.31. Booking a facility: `book`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Books a fitness facility from a in-built list of available facilities."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: book `[f/FACILITY] [t/TIME] [d/DURATION]`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Books the facility specified in `[f/FACILITY]`. The facility needs to be found in the in-built list. Else, an error would occur"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[f/FACILITY]`,  `[t/TIME]`, `[d/DURATION]` must be provided"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Facilities have different operating hours and an error would occur if user book outside the operating hours"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Format for `[t/TIME]` is 24-hour clock"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Format for `[d/DURATION]` is in minutes and should be multiples of 30. Else, an error would occur"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `book f/Farrer Park Field t/1400 d/60`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Books Farrer Park Field from 2pm to 3pm"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `book f/Burghley Tennis Centre t/0900 d/120`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Books Burghley Tennis Centre from 9am to 11am"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.32. Add photos to client’s photo album: `add photo`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Add photo to a client’s photo album to track physique progress."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `add photo n/NAME"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `[n/NAME]` is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- If there are 2 people with the same name, enter the `INDEX` of the correct client"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- After the client is identified, a file attachment window will appear"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Select the file you want from the file attachment window"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The timestamp of the photo added will be recorded"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `add photo tom`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Adds photo tommy.png(chosen)to Tom’s photo album"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `add photo Betty`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Adds photo betty.png(chosen) to Betty Koh’s photo album"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "### 3.33. View client photo album: `view photo`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Shows client\u0027s photo in an album format."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Format: `view photo [n/NAME]`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Photos displayed in photo album are sorted by date(Newest to Oldest)"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- The order of the keywords will matter. e.g. `Hans Bo` will not match `Bo Hans`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only the name is searched."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- Clients matching at least one keyword will be returned (i.e. OR search). e.g. `Hans Bo` will return `Hans Gruber, Bo Yang`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Dban1"
        },
        "content": "- If there are 2 people identified, enter the `INDEX` of the correct client"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "- `view photo Diana`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  - Shows photo album of Diana"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 33,
      "Dban1": 49,
      "AaronCQL": 507
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.storage.FitBizStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.storage.JsonFitBizStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FitBiz ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBizStorage fitBizStorage \u003d new JsonFitBizStorage(userPrefs.getFitBizFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        storage \u003d new StorageManager(fitBizStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ClientInView clientInView \u003d new ClientInView();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs, clientInView);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s FitBiz and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * The data from the sample FitBiz will be used instead if {@code storage}\u0027s FitBiz is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * or an empty FitBiz will be used instead if errors occur when reading {@code storage}\u0027s FitBiz."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs, ClientInView clientInView) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Optional\u003cReadOnlyFitBiz\u003e fitBizOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ReadOnlyFitBiz initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            fitBizOptional \u003d storage.readFitBiz();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (!fitBizOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample FitBiz\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            initialData \u003d fitBizOptional.orElseGet(SampleDataUtil::getSampleFitBiz);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FitBiz\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            initialData \u003d new FitBiz();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FitBiz\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            initialData \u003d new FitBiz();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new ModelManager(initialData, userPrefs, clientInView);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FitBiz\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        logger.info(\"Starting FitBiz \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping FitBiz ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 12,
      "AaronCQL": 17,
      "-": 156
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String LOG_FILE \u003d \"fitbiz.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX \u003d \"The client index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX \u003d \"The exercise index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_CLIENTS_LISTED_OVERVIEW \u003d \"%1$d clients listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 1,
      "Dban1": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/trie/Node.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.commons.trie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class represents a single node of the trie data structure."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class Node {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int SIZE_OF_ONE \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private char letter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Node parent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private HashMap\u003cCharacter, Node\u003e children;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private boolean isWordEnd;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Constructs the root {@code Node}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Node() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        children \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        isWordEnd \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        parent \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Constructs a child node {@code Node} with a parent node {@code parent}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param letter the letter that this new child contains"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param parent the parent node {@code Node} of this child, which must not be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *               {@code null}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Node(char letter, Node parent) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(parent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.letter \u003d letter;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.parent \u003d parent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        children \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        isWordEnd \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns {@code children}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public HashMap\u003cCharacter, Node\u003e getChildren() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return children;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true iff {@code children} is of size one."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean hasSingleChild() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return children.size() \u003d\u003d SIZE_OF_ONE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the only child of this node. {@code children} must only contain one"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * child child to start with."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Node getSingleChild() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assert hasSingleChild();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (Node node : children.values()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return node;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true iff {@code children} contains {@code letter}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean hasChild(char letter) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return children.containsKey(letter);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the child {@Node} in {@code children}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Node getChild(char letter) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return children.get(letter);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Adds a child {@code Node} to this {@code Node}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void addChild(Node child) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        children.put(child.getLetter(), child);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setIsWordEnd(boolean bool) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        isWordEnd \u003d bool;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean isWordEnd() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return isWordEnd;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public char getLetter() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return letter;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true iff @{code parent} is null, meaning that this node must be the"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * root node."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean isRoot() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return parent \u003d\u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Constructs the word by recursively going up the parent node."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return the constructed word string"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String constructWord() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (isRoot()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return EMPTY_STRING;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return parent.constructWord() + getLetter();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/trie/SimilarWordsResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.commons.trie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This is a wrapper class to hold the information returned by"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code Trie#listAllSimilarWords}. The member {@code longestPrefixString} will"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * contain the longest common prefix of the words in {@code similarWords}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class SimilarWordsResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public final String longestPrefixString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public final ArrayList\u003cString\u003e similarWords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public SimilarWordsResult(String longestPrefixString, ArrayList\u003cString\u003e similarWords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireAllNonNull(longestPrefixString, similarWords);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.longestPrefixString \u003d longestPrefixString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.similarWords \u003d similarWords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean hasNoResult() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return similarWords.isEmpty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean hasOnlyOneWord() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return similarWords.size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getSingleWord() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assert hasOnlyOneWord();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return similarWords.get(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getLongestPrefix() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return longestPrefixString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns a copy of the list {@code similarWords}, any modifications to this"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * returned list will not affect the original list {@code similarWords}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ArrayList\u003cString\u003e getSimilarWords() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new ArrayList\u003cString\u003e(similarWords);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/trie/Trie.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.commons.trie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class represents the trie data structure."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class Trie {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Node root;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Trie() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        root \u003d new Node();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Inserts the given string {@code word} into this trie."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void insert(String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node current \u003d root;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (char letter : word.toCharArray()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (current.hasChild(letter)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                current \u003d current.getChild(letter);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                Node newChild \u003d new Node(letter, current);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                current.addChild(newChild);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                current \u003d newChild;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        current.setIsWordEnd(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the {@code Node} whose constructed word (when constructed using"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code Node#constructWord()}) contain the longest common prefix of the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * argument {@code word} and all the words currently in this trie. If no such"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code Node} can be found, {@code null} is returned."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param word String to search for"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return a {@code Node} or {@null} if no such node can be found"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Node getLongestPrefixNode(String word) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node current \u003d root;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // this loop should end prematurely if word is not a proper substring"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (char letter : word.toCharArray()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (!current.hasChild(letter)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            current \u003d current.getChild(letter);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        while (current.hasSingleChild()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            current \u003d current.getSingleChild();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return current;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns a {@code SimilarWordsResult} object containing the list of similar"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * words in this trie that starts with the parameter {@code word}, and the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * longest common prefix of these words."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param word string to match"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return an object of type {@code SimilarWordsResult}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public SimilarWordsResult listAllSimilarWords(String word) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node longestPrefixNode \u003d getLongestPrefixNode(word);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ArrayList\u003cString\u003e similarWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node subtrie \u003d longestPrefixNode;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // case 1: longest prefix does not exist"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (subtrie \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return new SimilarWordsResult(EMPTY_STRING, similarWords);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // case 2: longest prefix is actually the completed word"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String longestPrefixString \u003d longestPrefixNode.constructWord();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (subtrie.isWordEnd()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            similarWords.add(longestPrefixString);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return new SimilarWordsResult(longestPrefixString, similarWords);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // case 3: longest prefix is not a completed word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // dfs to find all similar words that contain subtrie"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Stack\u003cNode\u003e stack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        stack.push(subtrie);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        while (!stack.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            Node current \u003d stack.pop();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (current.isWordEnd()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                similarWords.add(current.constructWord());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                stack.addAll(current.getChildren().values());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new SimilarWordsResult(longestPrefixString, similarWords);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/ExportUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class contains the logic behind the exporting of files."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class ExportUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String DEFAULT_EXPORTS_DIRECTORY \u003d \"exports\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String EXERCISE_CSV_HEADERS \u003d \"Date,Exercise Name,Reps,Weights,Sets\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Exports the provided list of {@code exercises} as a CSV file and saves it to"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * storage as {@code fileName}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param exercises client\u0027s exercises to export"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param fileName  name of the CSV file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws IOException if the file is unable to be saved"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static void exportExercisesAsCsv(List\u003cExercise\u003e exercises, String fileName) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Path filePath \u003d Paths.get(DEFAULT_EXPORTS_DIRECTORY, fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String csvContent \u003d EXERCISE_CSV_HEADERS + \"\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (Exercise e : exercises) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            String dateString \u003d e.getExerciseDate().displayValue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            String nameString \u003d e.getExerciseName().value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            String repsString \u003d e.getExerciseReps().value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            String weightString \u003d e.getExerciseWeight().value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            String setsString \u003d e.getExerciseSets().value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            String rowContent \u003d String.format(\"%s,%s,%s,%s,%s\\n\", dateString, nameString, repsString, weightString,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    setsString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            csvContent +\u003d rowContent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FileUtil.createFile(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FileUtil.writeToFile(filePath, csvContent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.autocomplete.Autocomplete;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.history.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleDay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns the FitBiz."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @see seedu.address.model.Model#getFitBiz()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    ReadOnlyFitBiz getFitBiz();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of clients"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    ObservableList\u003cClient\u003e getFilteredClientList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns all schedules across all clients according to the week day."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    ObservableList\u003cScheduleDay\u003e getScheduleDayList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns the client required by {@code ViewCommand} from {@code ModelManager}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggiee"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    Client getClientInView();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if there is a client in {@code clientInView} in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * {@code ModelManager}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggiee"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    Boolean hasClientInView();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the user prefs\u0027 FitBiz file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    Path getFitBizFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Opens the provided {@code url} in the user\u0027s default web browser."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param url website url to open"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void openUrlInDefaultWebBrowser(String url);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the {@code CommandHistory} object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    CommandHistory getCommandHistory();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the {@code Autocomplete} object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    Autocomplete getAutocomplete();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 15,
      "Dban1": 14,
      "AaronCQL": 25,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.autocomplete.Autocomplete;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.history.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.parser.FitBizParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleDay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final FitBizParser fitBizParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final CommandHistory commandHistory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Autocomplete autoComplete;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBizParser \u003d new FitBizParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        autoComplete \u003d new Autocomplete();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Command command \u003d fitBizParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            storage.saveFitBiz(model.getFitBiz());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ReadOnlyFitBiz getFitBiz() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return model.getFitBiz();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return model.getFilteredClientList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Client getClientInView() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return model.getClientInView();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Boolean hasClientInView() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return model.hasClientInView();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Path getFitBizFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return model.getFitBizFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ObservableList\u003cScheduleDay\u003e getScheduleDayList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return model.getScheduleDayList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void openUrlInDefaultWebBrowser(String url) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String os \u003d System.getProperty(\"os.name\").toLowerCase().substring(0, 3);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        logger.info(\"External URL : redirecting user to \" + url);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        switch (os) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case \"win\": // windows"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case \"mac\": // macOS"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (Desktop.isDesktopSupported() \u0026\u0026 Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    Desktop.getDesktop().browse(new URI(url));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                } catch (IOException | URISyntaxException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case \"lin\": // linux"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case \"uni\": // unix"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ProcessBuilder(\"x-www-browser\", url).start();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            logger.warning(\"External URL : failed to redirect user to \" + url);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public CommandHistory getCommandHistory() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return commandHistory;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Autocomplete getAutocomplete() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return autoComplete;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 9,
      "Dban1": 9,
      "AaronCQL": 59,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/autocomplete/Autocomplete.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIMITTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.commons.trie.SimilarWordsResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.commons.trie.Trie;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.GraphCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class contains the logic behind the autocomplete feature. It makes use"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * of {@code Trie} as the underlying data structure."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class Autocomplete {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String FEEDBACK_EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String FEEDBACK_MULTIPLE_COMMANDS \u003d \"Commands found:\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String FEEDBACK_NO_COMMANDS \u003d \"No commands found\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int CARET_POSITION_INDEX \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String WHITE_SPACE_STRING \u003d \" \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String PREAMBLE_WHITE_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Trie trie;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Default constructor for this class. Note that both {@code commandTextField}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * and {@code resultDisplay} must not be {@code null}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Autocomplete() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie \u003d new Trie();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        addAllCommands();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Adds all the commands included in FitBiz to {@code Trie}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void addAllCommands() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(AddExerciseCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(DeleteExerciseCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(EditExerciseCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(ExportCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(FilterCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(GraphCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(ScheduleCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(ViewCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns a string of {@code prefixes} delimited by a single empty space."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private String generatePrefixesString(List\u003cPrefix\u003e prefixes) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String toReturn \u003d EMPTY_STRING;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (Prefix p : prefixes) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            toReturn +\u003d WHITE_SPACE_STRING + p.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private AutocompleteResult noCommandHandler() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new AutocompleteResult(null, FEEDBACK_NO_COMMANDS, null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Handles the instance when the autocomplete can uniquely identify a single"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * This method will auto generate the prefixes for some commands like add-c,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * add-e, and schedule. The caret position will also be set to the most"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * appropriate position. The display of {@code ResultDisplay} will also indicate"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * the usage of the current completed command."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private AutocompleteResult singleCommandHandler(String command) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String textToSet \u003d command;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String textToFeedback \u003d FEEDBACK_EMPTY_STRING;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        int caretPositionToSet \u003d CARET_POSITION_INDEX;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d generatePrefixesString(AddCommand.PREFIXES);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d AddCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            caretPositionToSet \u003d textToSet.indexOf(PREFIX_DELIMITTER) + 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case AddExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d generatePrefixesString(AddExerciseCommand.PREFIXES);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d AddExerciseCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            caretPositionToSet \u003d textToSet.indexOf(PREFIX_DELIMITTER) + 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d ClearCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d PREAMBLE_WHITE_SPACE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d DeleteCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case DeleteExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d PREAMBLE_WHITE_SPACE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d DeleteExerciseCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d PREAMBLE_WHITE_SPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d EditCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d ExitCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d ExportCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case EditExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d PREAMBLE_WHITE_SPACE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d EditExerciseCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d generatePrefixesString(FilterCommand.PREFIXES);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d FilterCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            caretPositionToSet \u003d textToSet.indexOf(PREFIX_DELIMITTER) + 1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d PREAMBLE_WHITE_SPACE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d FindCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case GraphCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d generatePrefixesString(GraphCommand.PREFIXES);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d GraphCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            caretPositionToSet \u003d textToSet.indexOf(PREFIX_DELIMITTER) + 1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d HelpCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d ListCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d PREAMBLE_WHITE_SPACE + generatePrefixesString(ScheduleCommand.PREFIXES);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d ScheduleCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            caretPositionToSet \u003d textToSet.indexOf(PREAMBLE_WHITE_SPACE) + 1;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToSet +\u003d PREAMBLE_WHITE_SPACE;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            textToFeedback \u003d ViewCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new AutocompleteResult(textToSet, textToFeedback, caretPositionToSet);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Handles the instance when the autocomplete cannot uniquely identify a single"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private AutocompleteResult multipleCommandsHandler(SimilarWordsResult result) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String textToSet \u003d result.getLongestPrefix();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String textToFeedback \u003d FEEDBACK_MULTIPLE_COMMANDS + result.getSimilarWords().toString();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        int caretPositionToSet \u003d CARET_POSITION_INDEX;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new AutocompleteResult(textToSet, textToFeedback, caretPositionToSet);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Handles the instance when the command has already been completed and the user"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * presses tab to get to the next prefix."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * This method will set the caret position of the user to the next"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code PREFIX_DELIMITTER} (with wraparound) when the user presses tab. If no"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * such {@code PREFIX_DELIMITTER} exists in the user\u0027s command, this method will"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * stop."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private AutocompleteResult completedCommandHandler(String currentCommand, int currentCaretPosition) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!currentCommand.contains(PREFIX_DELIMITTER)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return new AutocompleteResult(null, null, null);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        int nextPrefixPosition \u003d currentCommand.indexOf(PREFIX_DELIMITTER, currentCaretPosition);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (nextPrefixPosition \u003d\u003d -1) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            // next prefix not found, wrap around to start"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            nextPrefixPosition \u003d currentCommand.indexOf(PREFIX_DELIMITTER) + 1;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            nextPrefixPosition++;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new AutocompleteResult(null, null, nextPrefixPosition);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Executes the main logic behind the autocomplete, and should be called when"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * the user presses \"tab\"."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public AutocompleteResult execute(String currentCommand, int currentCaretPosition) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String trimmedCommand \u003d currentCommand.trim();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // command word has already been completed"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (trimmedCommand.contains(WHITE_SPACE_STRING)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return completedCommandHandler(trimmedCommand, currentCaretPosition);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        SimilarWordsResult similarWords \u003d trie.listAllSimilarWords(trimmedCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (similarWords.hasNoResult()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return noCommandHandler();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else if (similarWords.hasOnlyOneWord()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return singleCommandHandler(similarWords.getSingleWord());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return multipleCommandsHandler(similarWords);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 238
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/autocomplete/AutocompleteResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This is a wrapper class to hold the information returned by"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code Autocomplete#execute}. The member {@code textToSet} and"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code caretPositionToSet} will contain the text and caret position to set"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * for the {@code CommandBox#commandTextField} respectively. The member"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code textToFeedback} will contain the text to set for the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code CommandBox#resultDisplay}. Null members indicate that they should not"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * be set or used by."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class AutocompleteResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String textToSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String textToFeedback;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Integer caretPositionToSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Default constructor for this class. Note that {@code null} values can be used"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * to denote that the field is empty."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public AutocompleteResult(String textToSet, String textToFeedback, Integer caretPositionToSet) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.textToSet \u003d textToSet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.textToFeedback \u003d textToFeedback;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.caretPositionToSet \u003d caretPositionToSet;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getTextToSet() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return textToSet;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getTextToFeedback() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return textToFeedback;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Integer getCaretPositionToSet() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return caretPositionToSet;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENT_WEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPORT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET_WEIGHT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Adds a client to the FitBiz."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final List\u003cPrefix\u003e PREFIXES \u003d List.of(PREFIX_NAME,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_GENDER,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            PREFIX_BIRTHDAY, PREFIX_CURRENT_WEIGHT, PREFIX_TARGET_WEIGHT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            PREFIX_HEIGHT, PREFIX_REMARK, PREFIX_SPORT, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-c\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a client to FitBiz. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"[\" + PREFIX_CURRENT_WEIGHT + \"CURRENT_WEIGHT] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"[\" + PREFIX_TARGET_WEIGHT + \"TARGET_WEIGHT] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_HEIGHT + \"HEIGHT] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"[\" + PREFIX_SPORT + \"SPORT]... \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_REMARK + \"REMARK]\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + PREFIX_GENDER + \"Male \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_BIRTHDAY + \"26-01-1980 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + PREFIX_CURRENT_WEIGHT + \"96 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_TARGET_WEIGHT + \"69 \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            + PREFIX_HEIGHT + \"156 \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + PREFIX_SPORT + \"Sumo Wrestling \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + PREFIX_TAG + \"Vegan \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + PREFIX_TAG + \"Lacks Protein \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + PREFIX_REMARK + \"History of back injuries\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New client added: %1$s\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This phone number and/or email already exists in FitBiz.\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"Clients must have different phone numbers and email addresses.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final Client toAdd;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Client}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public AddCommand(Client client) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        toAdd \u003d client;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (model.hasClient(toAdd)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.addClient(toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6,
      "ziyingli": 4,
      "tohkerwei": 2,
      "Dban1": 11,
      "AaronCQL": 23,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE_WEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SETS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.statistics.PersonalBestFinder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Adds an exercise done by a client to the exercise table(GUI)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class AddExerciseCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final List\u003cPrefix\u003e PREFIXES \u003d List.of(PREFIX_NAME,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            PREFIX_DATE, PREFIX_REPS, PREFIX_EXERCISE_WEIGHT, PREFIX_SETS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-e\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an exercise done by a client to \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \"the displayed Exercise Table. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \"Parameters: \" + PREFIX_NAME + \"EXERCISE_NAME \" + PREFIX_DATE + \"DATE \" + \"[\" + PREFIX_REPS + \"REPS] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \"[\" + PREFIX_EXERCISE_WEIGHT + \"EXERCISE_WEIGHT] \" + \"[\" + PREFIX_SETS + \"SETS]\\n\" + \"Example: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + COMMAND_WORD + \" \" + PREFIX_NAME + \"bench press \" + PREFIX_DATE + \"10-12-2020 \" + PREFIX_REPS + \"12 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + PREFIX_EXERCISE_WEIGHT + \"50 \" + PREFIX_SETS + \"8\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New exercise recorded:\\n%1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in this client. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"Consider incrementing the sets of that existing exercise.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_CLIENT_NOT_IN_VIEW \u003d \"You currently do not have a client in view, \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"use the view-c command to view a client first\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final Exercise toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Creates an AddExerciseCommand to add the specified {@code Exercise}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public AddExerciseCommand(Exercise exercise) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.toAdd \u003d exercise;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!model.hasClientInView()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new CommandException(MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Client clientToEdit \u003d model.getClientInView();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        UniqueExerciseList clientToEditExerciseList \u003d clientToEdit.getExerciseList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (clientToEditExerciseList.contains(toAdd)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client editedClient \u003d model.addExerciseToClient(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        PersonalBestFinder.generateAndSetPersonalBest(editedClient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getForOutput()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof AddExerciseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 toAdd.equals(((AddExerciseCommand) other).toAdd));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 57,
      "ziyingli": 3,
      "AaronCQL": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Clears the FitBiz."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes all data from FitBiz\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"FitBiz has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model.setFitBiz(new FitBiz());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.clearClientInView();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 2,
      "AaronCQL": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.graph.AxisType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final List\u003cExercise\u003e NO_GRAPH_LIST \u003d new ArrayList\u003cExercise\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final boolean openGraph;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final List\u003cExercise\u003e exerciseGraphList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final AxisType axisType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.openGraph \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseGraphList \u003d NO_GRAPH_LIST;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.axisType \u003d AxisType.NA;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public CommandResult(String feedbackToUser, AxisType axisType, List\u003cExercise\u003e exerciseGraphList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.openGraph \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseGraphList \u003d exerciseGraphList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.axisType \u003d axisType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean isOpenGraph() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return openGraph;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public List\u003cExercise\u003e getGraphList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return exerciseGraphList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public AxisType getAxisType() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return axisType;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 41,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Deletes a client identified using it\u0027s displayed index from the FitBiz."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-c\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \": Deletes the client identified by the index number used in the displayed client list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_DELETE_CLIENT_SUCCESS \u003d \"Deleted Client: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 8,
      "AaronCQL": 2,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.statistics.PersonalBestFinder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Deletes an {@code Exercise} identified using it\u0027s displayed index from the exercise table(GUI)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @author @yonggiee"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class DeleteExerciseCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \": Deletes the exercise identified by the index number used in the displayed Exercise Table.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted Exercise:\\n%1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_CLIENT_NOT_IN_VIEW \u003d \"You currently do not have a client in view, \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \"use the view-c command to view a client first\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public DeleteExerciseCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!model.hasClientInView()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new CommandException(MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client clientToEdit \u003d model.getClientInView();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList clientToEditExerciseList \u003d clientToEdit.getExerciseList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d clientToEditExerciseList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise toRemove \u003d clientToEditExerciseList.getExercise(targetIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // mutates the list belonging to the client by adding the exercise"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientToEditExerciseList.remove(toRemove);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        PersonalBestFinder.generateAndSetPersonalBest(clientToEdit);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toRemove.getForOutput()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof DeleteExerciseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 targetIndex.equals(((DeleteExerciseCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 66,
      "ziyingli": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENT_WEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPORT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET_WEIGHT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Birthday;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.CurrentWeight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.PersonalBest;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.TargetWeight;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Edits the details of an existing client in the FitBiz."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-c\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the client identified \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"by the index number used in the displayed client list. \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"[\" + PREFIX_CURRENT_WEIGHT + \"CURRENT_WEIGHT] \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"[\" + PREFIX_TARGET_WEIGHT + \"TARGET_WEIGHT] \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_HEIGHT + \"HEIGHT] \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"[\" + PREFIX_SPORT + \"SPORT]... \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_REMARK + \"REMARK]\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_BIRTHDAY + \"26-01-1980\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_HEIGHT + \"156\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_EDIT_CLIENT_SUCCESS \u003d \"Edited Client: %1$s\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This phone number and/or email already exists in FitBiz.\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"Clients must have different phone numbers and email addresses.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final EditClientDescriptor editClientDescriptor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param index                of the client in the filtered client list to edit"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param editClientDescriptor details to edit the client with"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditCommand(Index index, EditClientDescriptor editClientDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(editClientDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.editClientDescriptor \u003d new EditClientDescriptor(editClientDescriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Creates and returns a {@code Client} with the details of {@code clientToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * edited with {@code editClientDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static Client createEditedClient(Client clientToEdit, EditClientDescriptor editClientDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assert clientToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Name updatedName \u003d editClientDescriptor.getName().orElse(clientToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Gender updatedGender \u003d editClientDescriptor.getGender().orElse(clientToEdit.getGender());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Phone updatedPhone \u003d editClientDescriptor.getPhone().orElse(clientToEdit.getPhone());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Email updatedEmail \u003d editClientDescriptor.getEmail().orElse(clientToEdit.getEmail());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Address updatedAddress \u003d editClientDescriptor.getAddress().orElse(clientToEdit.getAddress());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editClientDescriptor.getTags().orElse(clientToEdit.getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Set\u003cSport\u003e updatedSport \u003d editClientDescriptor.getSports().orElse(clientToEdit.getSports());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Birthday updatedBirthday \u003d editClientDescriptor.getBirthday().orElse(clientToEdit.getBirthday());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Height updatedHeight \u003d editClientDescriptor.getHeight().orElse(clientToEdit.getHeight());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        CurrentWeight updatedCurrentWeight \u003d editClientDescriptor.getCurrentWeight()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .orElse(clientToEdit.getCurrentWeight());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        TargetWeight updatedTargetWeight \u003d editClientDescriptor.getTargetWeight()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .orElse(clientToEdit.getTargetWeight());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Remark updatedRemark \u003d editClientDescriptor.getRemark()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                .orElse(clientToEdit.getRemark());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        UniqueExerciseList exerciseList \u003d clientToEdit.getExerciseList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        PersonalBest personalBest \u003d clientToEdit.getPersonalBest();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ScheduleList scheduleList \u003d clientToEdit.getScheduleList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new Client(updatedName, updatedGender, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                updatedBirthday, updatedCurrentWeight, updatedTargetWeight, updatedHeight, updatedRemark, updatedSport,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                exerciseList, personalBest, scheduleList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedClient \u003d createEditedClient(clientToEdit, editClientDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (!clientToEdit.isSameClient(editedClient) \u0026\u0026 model.hasClient(editedClient)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.updateClientViewIfApplicable(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CLIENT_SUCCESS, editedClient));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editClientDescriptor.equals(e.editClientDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Stores the details to edit the client with. Each non-empty field value will"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * replace the corresponding field value of the client."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static class EditClientDescriptor {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        private Birthday birthday;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        private Height height;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        private CurrentWeight currentWeight;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        private TargetWeight targetWeight;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        private Set\u003cSport\u003e sport;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public EditClientDescriptor() {}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public EditClientDescriptor(EditClientDescriptor toCopy) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            setBirthday(toCopy.birthday);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            setHeight(toCopy.height);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            setCurrentWeight(toCopy.currentWeight);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            setTargetWeight(toCopy.targetWeight);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            setSports(toCopy.sport);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, gender, phone, email, address, tags, birthday,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                    currentWeight, targetWeight, height, sport, remark);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public Optional\u003cBirthday\u003e getBirthday() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return Optional.ofNullable(birthday);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public void setBirthday(Birthday birthday) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        public Optional\u003cHeight\u003e getHeight() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return Optional.ofNullable(height);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        public void setHeight(Height height) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            this.height \u003d height;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public Optional\u003cCurrentWeight\u003e getCurrentWeight() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Optional.ofNullable(currentWeight);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void setCurrentWeight(CurrentWeight currentWeight) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.currentWeight \u003d currentWeight;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public Optional\u003cTargetWeight\u003e getTargetWeight() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Optional.ofNullable(targetWeight);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void setTargetWeight(TargetWeight targetWeight) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.targetWeight \u003d targetWeight;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "         * Returns an unmodifiable sport set, which throws"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "         * {@code UnsupportedOperationException} if modification is attempted. Returns"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "         * {@code Optional#empty()} if {@code sports} is null."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public Optional\u003cSet\u003cSport\u003e\u003e getSports() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            return (sport !\u003d null) ? Optional.of(Collections.unmodifiableSet(sport)) : Optional.empty();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "         * Sets {@code sports} to this object\u0027s {@code sports}. A defensive copy of"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "         * {@code sports} is used internally."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void setSports(Set\u003cSport\u003e sport) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            this.sport \u003d (sport !\u003d null) ? new HashSet\u003c\u003e(sport) : null;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * Returns an unmodifiable tag set, which throws"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * {@code UnsupportedOperationException} if modification is attempted. Returns"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * {@code tags} is used internally."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Dban1"
        },
        "content": "         */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            if (!(other instanceof EditClientDescriptor)) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            EditClientDescriptor e \u003d (EditClientDescriptor) other;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                    \u0026\u0026 getBirthday().equals(e.getBirthday())"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                    \u0026\u0026 getHeight().equals(e.getHeight())"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    \u0026\u0026 getCurrentWeight().equals(e.getCurrentWeight())"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                    \u0026\u0026 getTargetWeight().equals(e.getTargetWeight())"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                    \u0026\u0026 getRemark().equals(e.getRemark())"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    \u0026\u0026 getSports().equals(e.getSports());"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 34,
      "ziyingli": 22,
      "tohkerwei": 20,
      "Dban1": 59,
      "AaronCQL": 48,
      "-": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE_WEIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SETS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.statistics.PersonalBestFinder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseSets;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Edits the details of an existing exercise done by the client in view"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * in the exercise table(GUI)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class EditExerciseCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-e\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the exercise identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"by the target index number used in the displayed Exercise Table. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"There must be a client in view. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_REPS + \"REPS] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_SETS + \"SETS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"[\" + PREFIX_EXERCISE_WEIGHT + \"WEIGHT]\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + PREFIX_NAME + \"pushup \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            + PREFIX_REPS + \"20\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_EDIT_EXERCISE_SUCCESS \u003d \"Edited Exercise:\\n%1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in FitBiz. \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \"Consider incrementing the sets of that existing exercise.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_CLIENT_NOT_IN_VIEW \u003d \"You currently do not have a client in view, \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \"use the view-c command to view a client first\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final EditExerciseDescriptor editExerciseDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param targetIndex               of the exercise in the exercise table to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param editExerciseDescriptor details to edit the exercise with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseCommand(Index targetIndex, EditExerciseDescriptor editExerciseDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(editExerciseDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.editExerciseDescriptor \u003d new EditExerciseDescriptor(editExerciseDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Creates and returns a {@code Exercise} with the details of {@code exerciseToEdit}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * edited with {@code editExerciseDescriptor}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static Exercise createEditedExercise(Exercise exerciseToEdit,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseDescriptor editExerciseDescriptor) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assert exerciseToEdit !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseName updatedName \u003d editExerciseDescriptor.getExerciseName().orElse(exerciseToEdit.getExerciseName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseReps updatedReps \u003d editExerciseDescriptor.getExerciseReps().orElse(exerciseToEdit.getExerciseReps());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseSets updatedSets \u003d editExerciseDescriptor.getExerciseSets().orElse(exerciseToEdit.getExerciseSets());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseWeight updatedWeight \u003d editExerciseDescriptor.getExerciseWeight()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .orElse(exerciseToEdit.getExerciseWeight());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseDate updatedDate \u003d editExerciseDescriptor.getExerciseDate().orElse(exerciseToEdit.getExerciseDate());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new Exercise(updatedName, updatedReps, updatedSets, updatedWeight, updatedDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!model.hasClientInView()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new CommandException(MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client clientInView \u003d model.getClientInView();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList clientToEditExerciseList \u003d clientInView.getExerciseList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d clientToEditExerciseList.size()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise exerciseToEdit \u003d clientToEditExerciseList.getExercise(targetIndex);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise editedExercise \u003d createEditedExercise(exerciseToEdit, editExerciseDescriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!exerciseToEdit.isSameExercise(editedExercise)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u0026\u0026 clientToEditExerciseList.contains(editedExercise)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.editExercise(exerciseToEdit, editedExercise);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        PersonalBestFinder.generateAndSetPersonalBest(clientInView);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise.getForOutput()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseCommand e \u003d (EditExerciseCommand) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return targetIndex.equals(e.targetIndex) \u0026\u0026 editExerciseDescriptor.equals(e.editExerciseDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Stores the details to edit the exercise with. Each non-empty field value will"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * replace the corresponding field value of the client."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static class EditExerciseDescriptor {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        private ExerciseName exerciseName;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        private ExerciseReps exerciseReps;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        private ExerciseSets exerciseSets;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        private ExerciseWeight exerciseWeight;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        private ExerciseDate exerciseDate;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public EditExerciseDescriptor() {}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public EditExerciseDescriptor(EditExerciseDescriptor toCopy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            setExerciseName(toCopy.exerciseName);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            setExerciseReps(toCopy.exerciseReps);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            setExerciseSets(toCopy.exerciseSets);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            setExerciseWeight(toCopy.exerciseWeight);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            setExerciseDate(toCopy.exerciseDate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return CollectionUtil.isAnyNonNull(exerciseName, exerciseReps, exerciseSets, exerciseWeight, exerciseDate);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public Optional\u003cExerciseName\u003e getExerciseName() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return Optional.ofNullable(exerciseName);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void setExerciseName(ExerciseName exerciseName) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            this.exerciseName \u003d exerciseName;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public Optional\u003cExerciseReps\u003e getExerciseReps() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return Optional.ofNullable(exerciseReps);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void setExerciseReps(ExerciseReps exerciseReps) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            this.exerciseReps \u003d exerciseReps;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public Optional\u003cExerciseSets\u003e getExerciseSets() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return Optional.ofNullable(exerciseSets);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void setExerciseSets(ExerciseSets exerciseSets) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            this.exerciseSets \u003d exerciseSets;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public Optional\u003cExerciseWeight\u003e getExerciseWeight() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return Optional.ofNullable(exerciseWeight);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void setExerciseWeight(ExerciseWeight exerciseWeight) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            this.exerciseWeight \u003d exerciseWeight;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public Optional\u003cExerciseDate\u003e getExerciseDate() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return Optional.ofNullable(exerciseDate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void setExerciseDate(ExerciseDate exerciseDate) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            this.exerciseDate \u003d exerciseDate;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            if (!(other instanceof EditExerciseDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            EditExerciseDescriptor e \u003d (EditExerciseDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return getExerciseName().equals(e.getExerciseName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u0026\u0026 getExerciseReps().equals(e.getExerciseReps())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u0026\u0026 getExerciseSets().equals(e.getExerciseSets())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u0026\u0026 getExerciseWeight().equals(e.getExerciseWeight())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u0026\u0026 getExerciseDate().equals(e.getExerciseDate());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 226,
      "ziyingli": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": exits FitBiz\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting FitBiz as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.commons.util.ExportUtil.DEFAULT_EXPORTS_DIRECTORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.commons.util.ExportUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Exports the exercises of the current client in view defined in"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code ClientInView}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String CSV_FILE_EXTENSION \u003d \".csv\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports the exercises of the client in view.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Succesfully exported this client\u0027s exercises to \\\"%s\\\".\\n\" + String"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            .format(\"Please check your /%s folder, which should be located in the same directory as FitBiz.jar.\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    DEFAULT_EXPORTS_DIRECTORY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_FAILED \u003d \"Failed to export this client\u0027s exercises. Please try again.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_CLIENT_NOT_IN_VIEW \u003d \"You currently do not have a client in view, \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \"use the view-c command to view a client first\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_NO_EXERCISES \u003d \"This client currently does not have any exercises to export.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!model.hasClientInView()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new CommandException(MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Client clientInView \u003d model.getClientInView();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        List\u003cExercise\u003e exercises \u003d clientInView.getExerciseList().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (exercises.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new CommandException(MESSAGE_NO_EXERCISES);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String fileName \u003d clientInView.getName().fullName + CSV_FILE_EXTENSION;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            ExportUtil.exportExercisesAsCsv(exercises, fileName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new CommandException(MESSAGE_FAILED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, fileName));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.TagAndSportContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * @author tohkerwei"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Filters and lists all clients in FitBiz whose tag or sports contains argument keywords for the respective parameters."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final List\u003cPrefix\u003e PREFIXES \u003d List.of(PREFIX_TAG, PREFIX_SPORT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter-c\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters and display all clients whose tags or sports \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            + \"contains any of the specified keywords for respective parameter (case-insensitive) \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            + \"Parameters: t/KEYWORD... s/KEYWORD...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_TAG + \"normal\" + \" \" + PREFIX_SPORT + \"hockey\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final TagAndSportContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public FilterCommand(TagAndSportContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        model.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                String.format(Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW, model.getFilteredClientList().size()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 46,
      "AaronCQL": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Finds and lists all clients in FitBiz whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all clients whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                String.format(Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW, model.getFilteredClientList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 4,
      "AaronCQL": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GraphCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AXIS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.Graph;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Displays a graph of exercises done by a client in FitBiz."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class GraphCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final List\u003cPrefix\u003e PREFIXES \u003d List.of(PREFIX_EXERCISE_NAME, PREFIX_AXIS,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            PREFIX_STARTDATE, PREFIX_ENDDATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"graph\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the graph of a specified exercise \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"of the client currently in view. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"Start date cannot be after end date. \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_EXERCISE_NAME + \"EXERCISE_NAME \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_AXIS + \"Y_AXIS \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_STARTDATE + \"START_DATE \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_ENDDATE + \"END_DATE \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_EXERCISE_NAME + \"push up \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_AXIS + \"reps \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_STARTDATE + \"01-01-2020 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + PREFIX_ENDDATE + \"01-04-2020\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showing exercise graph for %1$s\u0027s %2$s from %3$s to %4$s. \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"Note that any new updates to the exercises (via add-e, edit-e, delete-e) will not be reflected \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"on the current graph.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_CLIENT_NOT_IN_VIEW \u003d \"You currently do not have a client in view, \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        + \"use the view-c command to view a client first\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_EXERCISE_NOT_IN_LIST \u003d \"Graph cannot be plotted as no such exercise is\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \" recorded for this client from %1$s to %2$s.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_NO_GRAPH_FOR_AXIS \u003d \"There is no graph to plot for this axis specified. \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"Please choose a different axis or a different exercise.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private final Graph graph;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public GraphCommand(Graph graph) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(graph);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.graph \u003d graph;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static boolean isValidTimeFrame(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return (endDate.compareTo(startDate) \u003e\u003d 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!model.hasClientInView()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new CommandException(MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Client clientInView \u003d model.getClientInView();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        UniqueExerciseList clientInViewExerciseList \u003d clientInView.getExerciseList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!clientInViewExerciseList.containsNameWithinDate(graph.getExerciseName(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                graph.getStartDate(), graph.getEndDate())) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_EXERCISE_NOT_IN_LIST,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                    graph.getStartDate(), graph.getEndDate()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        List\u003cExercise\u003e graphList \u003d graph.generateGraphList(clientInView);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (graphList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new CommandException(MESSAGE_NO_GRAPH_FOR_AXIS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, clientInView.getName().toString(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            graph.getExerciseName().toString(), graph.getStartDate().toString(), graph.getEndDate().toString()),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            graph.getAxis().getAxisType(), graphList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!(other instanceof GraphCommand)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        GraphCommand e \u003d (GraphCommand) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return graph.equals(e.graph);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return graph.getExerciseName().value"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \" \" + graph.getAxis().value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \" \" + graph.getStartDate().toString()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \" \" + graph.getEndDate().toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 2,
      "ziyingli": 115,
      "AaronCQL": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String USER_GUIDE_URL \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            \"https://ay1920s2-cs2103t-f11-2.github.io/main/UserGuide.html#view-help-code-help-code\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Redirects to FitBiz user guide\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"You should have been redirected to the FitBiz user guide\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \" website. If not, please visit the following URL:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + USER_GUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 7,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Lists all clients in FitBiz to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-c\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all clients\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all clients in FitBiz\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 3,
      "AaronCQL": 3,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScheduleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Adds the training schedule of the client in FitBiz."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final List\u003cPrefix\u003e PREFIXES \u003d List.of(PREFIX_SCHEDULE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds the training schedule of the client, identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            + \"by the index number used in the displayed client list. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"The schedule should include the first 3 letters of the day, \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"start and end time in 24 hour format, \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"in 1-minute denominations. Multiple training schedule can be added to a client.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"Parameters: INDEX (a positive integer) sch/DAY-START_TIME-END_TIME\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 sch/MON-1100-1200\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_INVALID_ARG_COUNT \u003d \"Invalid number of arguments found for adding schedules.\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"Please check you have entered the right amount of Day(s), Start Time(s) and End Time(s). You have\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \" entered %1$s Day(s), %2$s Start Time(s), %3$s End Time(s).\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_CONTAINS_DUPLICATES \u003d \"One or more of your input schedules have overlapping\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \" time periods. Please check again.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$.15s\u0027s overall schedule has been changed to: \\n%2$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_CLEARED \u003d \"%1$.15s\u0027s schedule has been cleared.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final ArrayList\u003cSchedule\u003e toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public ScheduleCommand(Index index, ArrayList\u003cSchedule\u003e scheduleList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(scheduleList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.toAdd \u003d scheduleList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ScheduleList newScheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        newScheduleList.setSchedule(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Client editedClient \u003d new Client(clientToEdit.getName(), clientToEdit.getGender(), clientToEdit.getPhone(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                clientToEdit.getEmail(), clientToEdit.getAddress(), clientToEdit.getTags(), clientToEdit.getBirthday(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                clientToEdit.getCurrentWeight(), clientToEdit.getTargetWeight(), clientToEdit.getHeight(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                clientToEdit.getRemark(), clientToEdit.getSports(), clientToEdit.getExerciseList(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                clientToEdit.getPersonalBest(), newScheduleList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // if toAdd is empty, meaning the schedule has been cleared"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (toAdd.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            assert(toAdd.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CLEARED, editedClient.getName().fullName));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedClient.getName().fullName,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                editedClient.getScheduleList().toString()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                || (other instanceof ScheduleCommand // instance of handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ScheduleCommand) other).toAdd)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                \u0026\u0026 index.equals(((ScheduleCommand) other).index));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 1,
      "tohkerwei": 47,
      "Dban1": 41,
      "AaronCQL": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.statistics.PersonalBestFinder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Displays all details of a client from FitBiz, denoted by index in list view."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view-c\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \": View all available information of the client identified by the index number used in \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"the displayed client list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Currently viewing: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public ViewCommand(Index index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Client client \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model.setClientInView(client);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        PersonalBestFinder.generateAndSetPersonalBest(client);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, client.getName().fullName));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!(other instanceof ViewCommand)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ViewCommand e \u003d (ViewCommand) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 55,
      "AaronCQL": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/history/CommandHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.CommandHistoryState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This class contains the logic behind the command history feature and exposes"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * the necessary methods needed for this feature to work."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CommandHistory.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final Path DEFAULT_STORAGE_FILE_PATH \u003d Paths.get(\"data\", \"command.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_FILE_CONTENT \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Path storagePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private CommandHistoryState historyState;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Default constructor for this class which uses the default storage file path"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * for the storage file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this(DEFAULT_STORAGE_FILE_PATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Overloaded constructor for this class which allows the storage file path for"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * the storage file to be set. Provided for ease of JUnit testing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public CommandHistory(Path storagePath) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(storagePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.storagePath \u003d storagePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            FileUtil.createIfMissing(storagePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            String stateString \u003d FileUtil.readFromFile(storagePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            historyState \u003d new CommandHistoryState(storageStringToStateList(stateString));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            logger.info(\"Command History : successfully initialised command history\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            // create the state anyways, in order to still use it even if storage is broken"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            historyState \u003d new CommandHistoryState(List.of(EMPTY_FILE_CONTENT));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            logger.warning(\"Command History : failed to read command history from storage\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            System.out.println(ex.getStackTrace());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Converts the storage text file into a list of strings where each new line in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * the text file represents an element in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public List\u003cString\u003e storageStringToStateList(String lines) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return Arrays.asList(lines.split(\"\\n\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Converts the model list into a string where each item in the list is"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * delimitted by a new line in the joined string."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String stateListToStorageString(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return String.join(\"\\n\", list);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Adds the user input to the history, saving it to both the model via"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code CommandHistoryState} and the storage via {@code FileUtil}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param command user input command to store"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void addToHistory(String command) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            FileUtil.writeToFile(storagePath, stateListToStorageString(historyState.getCurrentState()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            logger.warning(\"Command History : failed to write command history to storage\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            System.out.println(ex.getStackTrace());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the previous (least recent) command while browsing the history."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getPreviousCommand() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return historyState.getPreviousCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the next (most recent) command while browsing the history."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getNextCommand() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return historyState.getNextCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Clears both the model via {@code CommandHistoryState} and the storage file"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * via {@code FileUtil}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void clearHistory() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            FileUtil.writeToFile(storagePath, EMPTY_FILE_CONTENT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            logger.warning(\"Command History : failed to clear command history from storage\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            System.out.println(ex.getStackTrace());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENT_WEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPORT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET_WEIGHT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Birthday;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.CurrentWeight;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.PersonalBest;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.TargetWeight;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String EMPTY_ATTRIBUTE \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                PREFIX_GENDER, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                PREFIX_TAG, PREFIX_BIRTHDAY, PREFIX_CURRENT_WEIGHT, PREFIX_TARGET_WEIGHT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                PREFIX_HEIGHT, PREFIX_REMARK, PREFIX_SPORT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Optional\u003cString\u003e genderString \u003d argMultimap.getValue(PREFIX_GENDER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Gender gender \u003d genderString.isPresent()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ? ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                : new Gender(EMPTY_ATTRIBUTE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // start of optional attributes"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Optional\u003cString\u003e birthdayString \u003d argMultimap.getValue(PREFIX_BIRTHDAY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Birthday birthday \u003d birthdayString.isPresent()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ? ParserUtil.parseBirthday(birthdayString.get())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                : new Birthday(EMPTY_ATTRIBUTE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Optional\u003cString\u003e heightString \u003d argMultimap.getValue(PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Height height \u003d heightString.isPresent()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ? ParserUtil.parseHeight(heightString.get())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                : new Height(EMPTY_ATTRIBUTE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Optional\u003cString\u003e currentWeightString \u003d argMultimap.getValue(PREFIX_CURRENT_WEIGHT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        CurrentWeight currentWeight \u003d currentWeightString.isPresent()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                ? ParserUtil.parseCurrentWeight(currentWeightString.get())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                : new CurrentWeight(EMPTY_ATTRIBUTE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Optional\u003cString\u003e targetWeightString \u003d argMultimap.getValue(PREFIX_TARGET_WEIGHT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        TargetWeight targetWeight \u003d targetWeightString.isPresent()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                ? ParserUtil.parseTargetWeight(targetWeightString.get())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                : new TargetWeight(EMPTY_ATTRIBUTE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Optional\u003cString\u003e remarkString \u003d argMultimap.getValue(PREFIX_REMARK);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Remark remark \u003d remarkString.isPresent()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ? ParserUtil.parseRemark(remarkString.get())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                : new Remark(EMPTY_ATTRIBUTE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Set\u003cSport\u003e sportList \u003d ParserUtil.parseSports(argMultimap.getAllValues(PREFIX_SPORT));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        UniqueExerciseList exerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        PersonalBest personalBest \u003d new PersonalBest();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ScheduleList scheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Client client \u003d new Client(name, gender, phone, email, address, tagList, birthday,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                currentWeight, targetWeight, height, remark, sportList, exerciseList, personalBest,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                scheduleList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new AddCommand(client);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 19,
      "ziyingli": 8,
      "tohkerwei": 5,
      "Dban1": 11,
      "AaronCQL": 25,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddExerciseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE_WEIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SETS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseSets;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Parses input arguments and creates a new AddExerciseCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class AddExerciseCommandParser implements Parser\u003cAddExerciseCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * AddExerciseCommand and returns an AddExerciseCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public AddExerciseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_REPS,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            PREFIX_EXERCISE_WEIGHT, PREFIX_SETS, PREFIX_DATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseName name \u003d ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Optional\u003cString\u003e repsString \u003d argMultimap.getValue(PREFIX_REPS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseReps reps \u003d repsString.isPresent()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            ? ParserUtil.parseExerciseReps(argMultimap.getValue(PREFIX_REPS).get())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            : new ExerciseReps(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Optional\u003cString\u003e exerciseWeightString \u003d argMultimap.getValue(PREFIX_EXERCISE_WEIGHT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseWeight exerciseWeight \u003d exerciseWeightString.isPresent()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            ? ParserUtil.parseExerciseWeight(argMultimap.getValue(PREFIX_EXERCISE_WEIGHT).get())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            : new ExerciseWeight(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Optional\u003cString\u003e setsString \u003d argMultimap.getValue(PREFIX_SETS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseSets sets \u003d setsString.isPresent()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            ? ParserUtil.parseExerciseSets(argMultimap.getValue(PREFIX_SETS).get())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            : new ExerciseSets(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseDate date \u003d ParserUtil.parseExerciseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise exercise \u003d new Exercise(name, reps, sets, exerciseWeight, date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new AddExerciseCommand(exercise);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 66,
      "AaronCQL": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String PREFIX_DELIMITTER \u003d \"/\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d client \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final Prefix PREFIX_HEIGHT \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final Prefix PREFIX_SPORT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final Prefix PREFIX_TARGET_WEIGHT \u003d new Prefix(\"tw/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final Prefix PREFIX_CURRENT_WEIGHT \u003d new Prefix(\"cw/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d exercise \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Prefix PREFIX_REPS \u003d new Prefix(\"reps/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Prefix PREFIX_SETS \u003d new Prefix(\"sets/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Prefix PREFIX_EXERCISE_WEIGHT \u003d new Prefix(\"ew/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Prefix PREFIX_DAY \u003d new Prefix(\"day/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d schedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Prefix PREFIX_SCHEDULE \u003d new Prefix(\"sch/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d graph \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final Prefix PREFIX_EXERCISE_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final Prefix PREFIX_AXIS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final Prefix PREFIX_STARTDATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final Prefix PREFIX_ENDDATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 9,
      "ziyingli": 6,
      "tohkerwei": 3,
      "Dban1": 5,
      "AaronCQL": 4,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteExerciseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Parses input arguments and creates a new DeleteExerciseCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @author @yonggiee"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class DeleteExerciseCommandParser implements Parser\u003cDeleteExerciseCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * DeleteExerciseCommand and returns a DeleteExerciseCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public DeleteExerciseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new DeleteExerciseCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                DeleteExerciseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENT_WEIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPORT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET_WEIGHT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_BIRTHDAY, PREFIX_CURRENT_WEIGHT, PREFIX_TARGET_WEIGHT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                        PREFIX_HEIGHT, PREFIX_REMARK, PREFIX_SPORT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand.EditClientDescriptor editClientDescriptor \u003d new EditClientDescriptor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            editClientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            editClientDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            editClientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            editClientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            editClientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BIRTHDAY).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            editClientDescriptor.setBirthday(ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (argMultimap.getValue(PREFIX_HEIGHT).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            editClientDescriptor.setHeight(ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CURRENT_WEIGHT).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            editClientDescriptor.setCurrentWeight(ParserUtil.parseCurrentWeight(argMultimap"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    .getValue(PREFIX_CURRENT_WEIGHT).get()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TARGET_WEIGHT).isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            editClientDescriptor.setTargetWeight(ParserUtil.parseTargetWeight(argMultimap"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    .getValue(PREFIX_TARGET_WEIGHT).get()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            editClientDescriptor.setRemark(ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editClientDescriptor::setTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        parseSportForEdit(argMultimap.getAllValues(PREFIX_SPORT)).ifPresent(editClientDescriptor::setSports);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (!editClientDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new EditCommand(index, editClientDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e sports} into a {@code Set\u003cSport\u003e} if {@code sports} is non-empty."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * If {@code sports} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * {@code Set\u003cSport\u003e} containing zero sports."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private Optional\u003cSet\u003cSport\u003e\u003e parseSportForEdit(Collection\u003cString\u003e sport) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assert sport !\u003d null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (sport.isEmpty()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Collection\u003cString\u003e sportSet \u003d sport.size() \u003d\u003d 1 \u0026\u0026 sport.contains(\"\") ? Collections.emptySet() : sport;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return Optional.of(ParserUtil.parseSports(sportSet));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 7,
      "ziyingli": 5,
      "tohkerwei": 18,
      "Dban1": 14,
      "AaronCQL": 12,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditExerciseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE_WEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SETS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Parses input arguments and creates a new EditExerciseCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class EditExerciseCommandParser implements Parser\u003cEditExerciseCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * EditExerciseCommand and returns an EditExerciseCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            args, PREFIX_NAME, PREFIX_REPS, PREFIX_SETS, PREFIX_EXERCISE_WEIGHT, PREFIX_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditExerciseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseCommand.EditExerciseDescriptor editExerciseDescriptor \u003d new EditExerciseDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            editExerciseDescriptor.setExerciseName("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REPS).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            editExerciseDescriptor.setExerciseReps("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ParserUtil.parseExerciseReps(argMultimap.getValue(PREFIX_REPS).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SETS).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            editExerciseDescriptor.setExerciseSets("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ParserUtil.parseExerciseSets(argMultimap.getValue(PREFIX_SETS).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EXERCISE_WEIGHT).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            editExerciseDescriptor.setExerciseWeight("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ParserUtil.parseExerciseWeight(argMultimap.getValue(PREFIX_EXERCISE_WEIGHT).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            editExerciseDescriptor.setExerciseDate("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ParserUtil.parseExerciseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!editExerciseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException(EditExerciseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new EditExerciseCommand(index, editExerciseDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.TagAndSportContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @author tohkerwei"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * and returns a FilterCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG, PREFIX_SPORT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        boolean hasTag \u003d argMultimap.getValue(PREFIX_TAG).isPresent();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        boolean hasSport \u003d argMultimap.getValue(PREFIX_SPORT).isPresent();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!hasTag \u0026\u0026 !hasSport) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        List\u003cString\u003e tags \u003d getTagsFromMap(argMultimap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        List\u003cString\u003e sports \u003d getSportsFromMap(argMultimap);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return new FilterCommand(new TagAndSportContainsKeywordsPredicate(tags, sports));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Returns a list of string of tags"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param argMultimap map of input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return List of strings of tags"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws ParseException if there are no tags"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public List\u003cString\u003e getTagsFromMap(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        List\u003cString\u003e tags \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (Tag tag : tagSet) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            tags.add(tag.tagName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Returns a list of strings of sports"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param argMultimap map of input"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return List of strings of sports"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws ParseException if there are no sports"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public List\u003cString\u003e getSportsFromMap(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Set\u003cSport\u003e sportSet \u003d ParserUtil.parseSports(argMultimap.getAllValues(PREFIX_SPORT));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        List\u003cString\u003e sports \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (Sport sport : sportSet) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            String[] sportString \u003d sport.sportName.split(\" \", 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            sports.addAll(Arrays.asList(sportString));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return sports;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FitBizParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.commands.GraphCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class FitBizParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return new ExportCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case AddExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new AddExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case EditExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new EditExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case DeleteExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new DeleteExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        case GraphCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return new GraphCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 12,
      "ziyingli": 8,
      "tohkerwei": 4,
      "Dban1": 4,
      "AaronCQL": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GraphCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AXIS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.commands.GraphCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.Axis;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.EndDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.Graph;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.StartDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Parses input arguments and creates a new GraphCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class GraphCommandParser implements Parser\u003cGraphCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * GraphCommand and returns an GraphCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public GraphCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_EXERCISE_NAME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                PREFIX_AXIS, PREFIX_STARTDATE, PREFIX_ENDDATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EXERCISE_NAME, PREFIX_AXIS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                PREFIX_STARTDATE, PREFIX_ENDDATE)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GraphCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ExerciseName exerciseName \u003d ParserUtil.parseExerciseName(argMultimap.getValue(PREFIX_EXERCISE_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Axis axis \u003d ParserUtil.parseAxis(argMultimap.getValue(PREFIX_AXIS).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        StartDate startDate \u003d ParserUtil.parseStartDate(argMultimap.getValue(PREFIX_STARTDATE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        EndDate endDate \u003d ParserUtil.parseEndDate(argMultimap.getValue(PREFIX_ENDDATE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!GraphCommand.isValidTimeFrame(startDate.value, endDate.value)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GraphCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Graph graph \u003d new Graph(exerciseName, axis, startDate, endDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return new GraphCommand(graph);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Birthday;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.CurrentWeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.TargetWeight;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseSets;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.Axis;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.EndDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.StartDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Day;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.EndTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.StartTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String EMPTY_ATTRIBUTE \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final int DAY_INDEX \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final int START_INDEX \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final int END_INDEX \u003d 2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses a {@code String remark} into an {@code Remark}. Leading and trailing"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the given {@code remark} is invalid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static Remark parseRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses a {@code String gender} into an {@code Gender}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String trimmedGenderInLowercase \u003d trimmedGender.toLowerCase();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        switch (trimmedGenderInLowercase) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case \"male\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case \"m\":"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new Gender(\"Male\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case \"female\":"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case \"f\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new Gender(\"Female\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case \"others\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case \"o\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new Gender(\"Others\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return new Gender(EMPTY_ATTRIBUTE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (tagName.equals(EMPTY_ATTRIBUTE)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Parses a {@code String birthday} into a {@code Birthday}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Only birth dates earlier than the current date are allowed."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static Birthday parseBirthday(String birthday) throws ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(birthday);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String trimmedBirthday \u003d birthday.trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!Birthday.isValidBirthday(trimmedBirthday)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new ParseException(Birthday.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new Birthday(trimmedBirthday);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Parses a {@code String height} into an {@code Height}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @throws ParseException if the given {@code height} is invalid."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static Height parseHeight(String height) throws ParseException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String trimmedHeight \u003d height.trim();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!Height.isValidHeight(trimmedHeight)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new ParseException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return new Height(trimmedHeight);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Parses a {@code String current weight} into a {@code CurrentWeight}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static CurrentWeight parseCurrentWeight(String currentWeight) throws ParseException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(currentWeight);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String trimmedCurrentWeight \u003d currentWeight.trim();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!CurrentWeight.isValidWeight(trimmedCurrentWeight)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new ParseException(CurrentWeight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new CurrentWeight(trimmedCurrentWeight);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Parses a {@code String target weight} into a {@code TargetWeight}."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static TargetWeight parseTargetWeight(String targetWeight) throws ParseException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(targetWeight);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String trimmedTargetWeight \u003d targetWeight.trim();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!TargetWeight.isValidWeight(trimmedTargetWeight)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new ParseException(TargetWeight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new TargetWeight(trimmedTargetWeight);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Parses a {@code String sport} into a {@code Sport}."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws ParseException if the given {@code sport} is invalid."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static Sport parseSport(String sport) throws ParseException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(sport);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String trimmedSport \u003d sport.trim();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!Sport.isValidSport(trimmedSport)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            throw new ParseException(Sport.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return new Sport(trimmedSport);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e sports} into a {@code Set\u003cSport\u003e}."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static Set\u003cSport\u003e parseSports(Collection\u003cString\u003e sports) throws ParseException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(sports);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        final Set\u003cSport\u003e sportSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (String sportName : sports) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (sportName.equals(EMPTY_ATTRIBUTE)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            sportSet.add(parseSport(sportName));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return sportSet;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses a {@code String exercise name} into an {@code ExerciseName}. Leading"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the given {@code exercise name} is invalid."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static ExerciseName parseExerciseName(String exerciseName) throws ParseException {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exerciseName);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String trimmedExerciseName \u003d exerciseName.trim();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!ExerciseName.isValidExerciseName(trimmedExerciseName)) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException(ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new ExerciseName(trimmedExerciseName);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses a {@code String reps} into an {@code ExerciseReps}. Leading and"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the given {@code reps} is invalid."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static ExerciseReps parseExerciseReps(String reps) throws ParseException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(reps);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String trimmedReps \u003d reps.trim();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!ExerciseReps.isValidExerciseReps(trimmedReps)) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException(ExerciseReps.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new ExerciseReps(trimmedReps);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses a {@code String sets} into an {@code ExerciseSets}. Leading and"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the given {@code sets} is invalid."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static ExerciseSets parseExerciseSets(String sets) throws ParseException {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(sets);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String trimmedSets \u003d sets.trim();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!ExerciseSets.isValidExerciseSets(trimmedSets)) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException(ExerciseSets.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new ExerciseSets(trimmedSets);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses a {@code String exercise weight} into an {@code ExerciseWeight}."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the given {@code exercise weight} is invalid."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static ExerciseWeight parseExerciseWeight(String exerciseWeight) throws ParseException {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exerciseWeight);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String trimmedExerciseWeight \u003d exerciseWeight.trim();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!ExerciseWeight.isValidExerciseWeight(trimmedExerciseWeight)) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ParseException(ExerciseWeight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new ExerciseWeight(trimmedExerciseWeight);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Parses a {@code String date} into an {@code ExerciseDate}. Leading and"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static ExerciseDate parseExerciseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!ExerciseDate.isValidExerciseDate(trimmedDate)) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new ParseException(ExerciseDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new ExerciseDate(date);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Parses a {@code List\u003cString\u003e days} into a {@code ArrayList\u003cDay\u003e dayList}."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Only correct day of the week is allowed"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static ArrayList\u003cDay\u003e parseDay(List\u003cString\u003e days) throws ParseException {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(days);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArrayList\u003cDay\u003e dayList \u003d new ArrayList\u003cDay\u003e();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            String trimmedDay \u003d day.trim();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            if (!Day.isValidDay(trimmedDay)) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                throw new ParseException(Schedule.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            dayList.add(new Day(trimmedDay));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return dayList;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Parses a {@code List\u003cString\u003e time} into a {@code ArrayList\u003cStartTime\u003e startTimeList}."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Only time in 24 hour format is allowed."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static ArrayList\u003cStartTime\u003e parseStartTime(List\u003cString\u003e time) throws ParseException {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArrayList\u003cStartTime\u003e startTimeList \u003d new ArrayList\u003cStartTime\u003e();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (String startTime : time) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            String trimmedTime \u003d startTime.trim();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            if (!StartTime.isValidTimingFormat(trimmedTime)) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                throw new ParseException(Schedule.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            startTimeList.add(new StartTime(trimmedTime));"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return startTimeList;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Parses a {@code List\u003cString\u003e time} into a {@code ArrayList\u003cEndTime\u003e endTimeList}."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Only time in 24 hour format is allowed."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static ArrayList\u003cEndTime\u003e parseEndTime(List\u003cString\u003e time) throws ParseException {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArrayList\u003cEndTime\u003e endTimeList \u003d new ArrayList\u003cEndTime\u003e();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (String endTime : time) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            String trimmedTime \u003d endTime.trim();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            if (!StartTime.isValidTimingFormat(trimmedTime)) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                throw new ParseException(Schedule.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            endTimeList.add(new EndTime(trimmedTime));"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return endTimeList;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * takes in the raw input string entered into the CLI from the user and processes it into an ArrayList"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * of String arrays for further parsing by the day, start and end time parsers respectively."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static ArrayList\u003cHashMap\u003cString, String\u003e\u003e parseRawScheduleInput(List\u003cString\u003e input) throws ParseException {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cHashMap\u003cString, String\u003e\u003e returnList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // short-circuit if empty input"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (input.get(0).length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return returnList;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            for (String s : input) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                HashMap\u003cString, String\u003e inputHash \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                String[] tripleData \u003d s.split(\"-\");"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                inputHash.put(\"day\", tripleData[DAY_INDEX]);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                inputHash.put(\"start\", tripleData[START_INDEX]);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                inputHash.put(\"end\", tripleData[END_INDEX]);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                returnList.add(inputHash);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return returnList;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new ParseException(Schedule.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Parses a {@code String axis} into an {@code Axis}. Leading and"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @throws ParseException if the given {@code axis} is invalid."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static Axis parseAxis(String axis) throws ParseException {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(axis);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String trimmedAxis \u003d axis.trim();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!Axis.isValidAxis(trimmedAxis)) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new ParseException(Axis.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return new Axis(trimmedAxis);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Parses a {@code String startDate} into an {@code StartDate}. Leading and"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @throws ParseException if the given {@code startDate} is invalid."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static StartDate parseStartDate(String startDate) throws ParseException {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String trimmedStartDate \u003d startDate.trim();"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!StartDate.isValidStartDate(trimmedStartDate)) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new ParseException(StartDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return new StartDate(trimmedStartDate);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Parses a {@code String endDate} into an {@code EndDate}. Leading and"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @throws ParseException if the given {@code endDate} is invalid."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static EndDate parseEndDate(String endDate) throws ParseException {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(endDate);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String trimmedEndDate \u003d endDate.trim();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!EndDate.isValidEndDate(trimmedEndDate)) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new ParseException(EndDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return new EndDate(trimmedEndDate);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 119,
      "ziyingli": 66,
      "tohkerwei": 83,
      "Dban1": 59,
      "AaronCQL": 43,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ScheduleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.EndTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.StartTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Parses input arguments and creates a new ScheduleCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Checks for any overlaps in given schedule with all existing schedules in input set."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static boolean checkIfOverlaps(Schedule schedule, TreeSet\u003cSchedule\u003e set) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (set.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            set.add(schedule);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return set.add(schedule);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScheduleCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * and returns a ScheduleCommand object for execution."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public ScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SCHEDULE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                || !argMultimap.getValue(PREFIX_SCHEDULE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Creates an ArrayList of HashMap, each HashMap contains 3 input attributes day, start time, end time."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cHashMap\u003cString, String\u003e\u003e processedInput \u003d ParserUtil.parseRawScheduleInput("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                argMultimap.getAllValues(PREFIX_SCHEDULE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Process the input attributes into their respective ArrayList\u003cString\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cString\u003e dayStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cString\u003e startListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cString\u003e endListString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        for (HashMap\u003cString, String\u003e h: processedInput) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            dayStringList.add(h.get(\"day\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            startListString.add(h.get(\"start\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            endListString.add(h.get(\"end\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Passes in the respective ArrayList\u003cString\u003e for the input attributes to their parser functions to obtain"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // their respective ArrayLists."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cDay\u003e dayList \u003d ParserUtil.parseDay(dayStringList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cStartTime\u003e startTimeList \u003d ParserUtil.parseStartTime(startListString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cEndTime\u003e endTimeList \u003d ParserUtil.parseEndTime(endListString);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArrayList\u003cSchedule\u003e scheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Checks if there are the same number of arguments for Day, StartTime and EndTime."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (dayList.size() !\u003d startTimeList.size() || dayList.size() !\u003d endTimeList.size()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            String invalidCountMsg \u003d String.format(ScheduleCommand.MESSAGE_INVALID_ARG_COUNT, dayList.size(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    startTimeList.size(), endTimeList.size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, invalidCountMsg));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Checks for overlapping schedules."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        TreeSet\u003cSchedule\u003e scheduleSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (int i \u003d 0; i \u003c dayList.size(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            Day day \u003d dayList.get(i);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            StartTime startTime \u003d startTimeList.get(i);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            EndTime endTime \u003d endTimeList.get(i);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            Schedule schedule;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                schedule \u003d new Schedule(day, startTime, endTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                throw new ParseException(Schedule.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            if (!checkIfOverlaps(schedule, scheduleSet)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                        ScheduleCommand.MESSAGE_CONTAINS_DUPLICATES));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            scheduleList.add(schedule);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return new ScheduleCommand(index, scheduleList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 43,
      "Dban1": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Parses input arguments and creates a new {@code ViewCommand} object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ViewCommand}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * and returns a {@code ViewCommand} object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return new ViewCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/statistics/PersonalBestFinder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.PersonalBest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Finds the personal best of every exercise with valid weight or reps in exercise list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class PersonalBestFinder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Generates and sets personal bests when view-c, add-e or delete-e is called."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @param clientInView The client currently in view"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static void generateAndSetPersonalBest(Client clientInView) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        UniqueExerciseList exerciseList \u003d clientInView.getExerciseList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        PersonalBest personalBest \u003d clientInView.getPersonalBest();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        HashMap\u003cExerciseName, Exercise\u003e pbTable \u003d new HashMap\u003cExerciseName, Exercise\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        for (Exercise ex : exerciseList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            ExerciseName name \u003d ex.getExerciseName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            int weight \u003d ex.getExerciseWeight().convertToInt();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            int reps \u003d ex.getExerciseReps().convertToInt();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            if (pbTable.containsKey(name)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                int pbWeight \u003d pbTable.get(name).getExerciseWeight().convertToInt();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                int pbReps \u003d pbTable.get(name).getExerciseReps().convertToInt();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                if (pbWeight \u003c weight) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                    pbTable.put(name, ex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                } else if (pbWeight \u003d\u003d weight) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                    if (pbReps \u003c reps) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                        pbTable.put(name, ex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            } else if (hasWeightOrReps(ex)) { // has one or both"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                pbTable.put(name, ex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        personalBest.setPersonalBest(pbTable.values());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Checks if exercise has either one of weight or reps or both."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @param ex The exercise to be checked"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @return True if the exercise has either weight or reps or both."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private static boolean hasWeightOrReps(Exercise ex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        boolean hasWeight \u003d !ex.getExerciseWeight().toString().equals(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        boolean hasReps \u003d !ex.getExerciseReps().toString().equals(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return hasWeight || hasReps;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ClientInView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This represents the model of the client currently in view."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class ClientInView {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Client client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Client getClient() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setClient(Client client) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean hasClientInView() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return client !\u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!(obj instanceof ClientInView)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return (((ClientInView) obj).client \u003d\u003d null \u0026\u0026 client \u003d\u003d null)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            || ((ClientInView) obj).client.equals(client);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 17,
      "AaronCQL": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CommandHistoryState.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This represents the model of the command history and contains the underlying"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * data structure to be used by {@code CommandHistory}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class CommandHistoryState {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int START_INDEX \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int MAX_HISTORY_SIZE \u003d 100;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private ArrayList\u003cString\u003e history;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Default constructor for this class; initialises the state {@code history} and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * the {@code index}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public CommandHistoryState(List\u003cString\u003e initialState) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        history \u003d new ArrayList\u003cString\u003e(initialState);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        index \u003d initialState.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private boolean isAtStart() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return index \u003d\u003d START_INDEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private boolean isAtEnd() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return index \u003d\u003d history.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private boolean hasNoHistory() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return history.isEmpty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the last item added to {@code history}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private String getMostRecentCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return history.get(history.size() - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private boolean isEmptyString(String toTest) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return toTest.equals(EMPTY_STRING);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true iff the parameter {@code toTest} is different from the most"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * recent command, or if {@code history} is currently empty."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param toTest parameter to test."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return true iff {@code toTest} is different from the most recent command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private boolean isSimilarToMostRecentCommand(String toTest) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (hasNoHistory()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return false; // no history means toTest is unique"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return getMostRecentCommand().equals(toTest);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private boolean isAtMaxCapacity() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return history.size() \u003e\u003d MAX_HISTORY_SIZE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Adds the user input {@code command} String to this model and to the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code commandHistoryStorage}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param command the user input command"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void add(String command) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (isEmptyString(command)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            index \u003d history.size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (isSimilarToMostRecentCommand(command)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            index \u003d history.size();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (isAtMaxCapacity()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            history.remove(START_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        history.add(command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        index \u003d history.size();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the previous command string in the {@code history}. If"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code history} is empty, the empty string is returned."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return the previous command string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getPreviousCommand() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (isAtStart()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return hasNoHistory() ? EMPTY_STRING : history.get(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        index--;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return history.get(index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the next command string in the {@code history}. If the end of the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code history} is reached, the empty string is returned."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return the next command string"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getNextCommand() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (isAtEnd()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return EMPTY_STRING;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        index++;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return isAtEnd() ? EMPTY_STRING : history.get(index);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns a copy of the {@code history}. Any modifications done to this"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * returned list will not affect the internal list stored in this class."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ArrayList\u003cString\u003e getCurrentState() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new ArrayList\u003cString\u003e(history);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Clears and resets the state of the {@code history} and the {@code index}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void clearState() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        history.clear();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        index \u003d START_INDEX;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/FitBiz.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.UniqueClientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Duplicates are not allowed (by .isSameClient comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class FitBiz implements ReadOnlyFitBiz {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final UniqueClientList clients;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clients \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public FitBiz() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Creates an FitBiz using the Clients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public FitBiz(ReadOnlyFitBiz toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Replaces the contents of the client list with {@code clients}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * {@code clients} must not contain duplicate clients."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClients(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.clients.setClients(clients);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Resets the existing data of this {@code FitBiz} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void resetData(ReadOnlyFitBiz newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        setClients(newData.getClientList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    //// client-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true if a client with the same identity as {@code client} exists in the FitBiz."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return clients.contains(client);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Adds a client to the FitBiz."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * The client must not already exist in the FitBiz."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void addClient(Client p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clients.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Replaces the given client {@code target} in the list with {@code editedClient}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code target} must exist in the FitBiz."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * The client identity of {@code editedClient} must not be the same as another existing client in the FitBiz."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(editedClient);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clients.setClient(target, editedClient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Removes {@code key} from this {@code FitBiz}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code key} must exist in the FitBiz."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void removeClient(Client key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clients.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return clients.asUnmodifiableObservableList().size() + \" clients\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ObservableList\u003cClient\u003e getClientList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return clients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof FitBiz // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u0026\u0026 clients.equals(((FitBiz) other).clients));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return clients.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6,
      "Dban1": 26,
      "AaronCQL": 9,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleDay;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_CLIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns the user prefs\u0027 FitBiz file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    Path getFitBizFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the user prefs\u0027 FitBiz file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    void setFitBizFilePath(Path fitBizFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns the FitBiz"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    ReadOnlyFitBiz getFitBiz();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Replaces FitBiz data with the data in {@code fitBiz}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    void setFitBiz(ReadOnlyFitBiz fitBiz);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true if a client with the same identity as {@code client} exists in the FitBiz."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    boolean hasClient(Client client);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Deletes the given client."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * The client must exist in the FitBiz."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void deleteClient(Client target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Adds the given client."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code client} must not already exist in the FitBiz."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void addClient(Client client);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Replaces the given client {@code target} with {@code editedClient}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code target} must exist in the FitBiz."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * The client identity of {@code editedClient} must not be the same as another existing client in the FitBiz."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void setClient(Client target, Client editedClient);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns an unmodifiable view of the filtered client list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    ObservableList\u003cClient\u003e getFilteredClientList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Updates the filter of the filtered client list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void updateFilteredClientList(Predicate\u003cClient\u003e predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns the client in {@code clientInView}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggie"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    Client getClientInView();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Updates the client in {@code clientInView}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggie"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    void setClientInView(Client client);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Clears the client in {@code clientInView}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggie"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    void clearClientInView();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if a client with the same identity as {@code client} exists in"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * the FitBiz."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggie"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    boolean hasClientInView();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Updates client in ClientInView in the case of an EditCommand. Before updating, checks if"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * {@code editedClient} is the same client as client in ClientInView."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggiee"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    void updateClientViewIfApplicable(Client clientToEdit, Client editedClient);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns a view of the schedule list from across all clients."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    ObservableList\u003cScheduleDay\u003e getScheduleDayList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Adds the given exercise to the clientInView exercise list. There must be"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * client in clientInView."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    Client addExerciseToClient(Exercise exercise);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Replaces the {@code target} in clientInView exercise list with {@code editedExercise}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * There must be client in clientInView."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    void editExercise (Exercise target, Exercise editedExercise);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Deletes the given exercise in clientInView exercise list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * There must be client in clientInView."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    void deleteExercise(Exercise exercise);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 50,
      "tohkerwei": 2,
      "Dban1": 31,
      "AaronCQL": 16,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleDay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents the in-memory model of the FitBiz data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final FitBiz fitBiz;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final FilteredList\u003cClient\u003e filteredClients;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final ClientInView clientInView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Initializes a ModelManager with the given fitBiz and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ModelManager(ReadOnlyFitBiz fitBiz, ReadOnlyUserPrefs userPrefs, ClientInView clientInView) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireAllNonNull(fitBiz, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        logger.fine(\"Initializing with FitBiz: \" + fitBiz + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.fitBiz \u003d new FitBiz(fitBiz);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.clientInView \u003d clientInView;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        filteredClients \u003d new FilteredList\u003c\u003e(this.fitBiz.getClientList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this(new FitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Path getFitBizFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return userPrefs.getFitBizFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setFitBizFilePath(Path fitBizFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(fitBizFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        userPrefs.setFitBizFilePath(fitBizFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FitBiz \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setFitBiz(ReadOnlyFitBiz fitBiz) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.fitBiz.resetData(fitBiz);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ReadOnlyFitBiz getFitBiz() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return fitBiz;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return fitBiz.hasClient(client);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void deleteClient(Client target) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (target \u003d\u003d getClientInView()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            clearClientInView();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBiz.removeClient(target);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void addClient(Client client) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBiz.addClient(client);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireAllNonNull(target, editedClient);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (hasClientInView() \u0026\u0026 getClientInView().equals(target)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            clientInView.setClient(editedClient);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBiz.setClient(target, editedClient);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Client List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Client} backed by the internal list of"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code versionedFitBiz}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return filteredClients;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        filteredClients.setPredicate(predicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ClientInView \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Client getClientInView() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return clientInView.getClient();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setClientInView(Client client) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        clientInView.setClient(client);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void clearClientInView() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        setClientInView(null);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean hasClientInView() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return clientInView.hasClientInView();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void updateClientViewIfApplicable(Client clientToEdit, Client editedClient) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireAllNonNull(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!clientInView.hasClientInView()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client currentClientInView \u003d clientInView.getClient();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (currentClientInView.equals(clientToEdit)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            clientInView.setClient(editedClient);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ScheduleList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ObservableList\u003cScheduleDay\u003e getScheduleDayList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cScheduleList\u003e fullScheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        for (Client c: filteredClients) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            for (Schedule s: c.getScheduleList().getArrayList()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                s.assignClientName(c.getName().fullName);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            fullScheduleList.add(c.getScheduleList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return ScheduleDay.weeklySchedule(fullScheduleList);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    };"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Exercise \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Creates a new {@code Client} with the new exercise list. Other attributes remain the"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * same."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Client buildClientWithNewExerciseList(Client clientToEdit,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList clientToEditExerciseList) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client editedClient \u003d new Client(clientToEdit.getName(), clientToEdit.getGender(), clientToEdit.getPhone(),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            clientToEdit.getEmail(), clientToEdit.getAddress(), clientToEdit.getTags(), clientToEdit.getBirthday(),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            clientToEdit.getCurrentWeight(), clientToEdit.getTargetWeight(), clientToEdit.getHeight(),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            clientToEdit.getRemark(), clientToEdit.getSports(), clientToEditExerciseList,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            clientToEdit.getPersonalBest(), clientToEdit.getScheduleList());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return editedClient;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Client addExerciseToClient(Exercise exercise) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client clientToEdit \u003d getClientInView();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList clientToEditExerciseList \u003d clientToEdit.getExerciseList();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientToEditExerciseList.addToSorted(exercise);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client editedClient \u003d buildClientWithNewExerciseList(clientToEdit, clientToEditExerciseList);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return editedClient;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void editExercise (Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client clientToEdit \u003d getClientInView();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList clientToEditExerciseList \u003d clientToEdit.getExerciseList();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientToEditExerciseList.setExercise(target, editedExercise);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void deleteExercise (Exercise exercise) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client clientToEdit \u003d getClientInView();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList clientToEditExerciseList \u003d clientToEdit.getExerciseList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // mutates the list belonging to the client by removing the exercise"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientToEditExerciseList.remove(exercise);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client editedClient \u003d buildClientWithNewExerciseList(clientToEdit, clientToEditExerciseList);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        setClient(clientToEdit, editedClient);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return fitBiz.equals(other.fitBiz)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u0026\u0026 filteredClients.equals(other.filteredClients)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u0026\u0026 clientInView.equals(other.clientInView);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 81,
      "Dban1": 32,
      "AaronCQL": 42,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyFitBiz.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Unmodifiable view of FitBiz."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public interface ReadOnlyFitBiz {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns an unmodifiable view of the clients list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * This list will not contain any duplicate clients."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    ObservableList\u003cClient\u003e getClientList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 4,
      "AaronCQL": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    Path getFitBizFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Path fitBizFilePath \u003d Paths.get(\"data\" , \"fitbiz.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        setFitBizFilePath(newUserPrefs.getFitBizFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Path getFitBizFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return fitBizFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setFitBizFilePath(Path fitBizFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(fitBizFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.fitBizFilePath \u003d fitBizFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                \u0026\u0026 fitBizFilePath.equals(o.fitBizFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return Objects.hash(guiSettings, fitBizFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + fitBizFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client\u0027s address in FitBiz."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "AaronCQL": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Birthday.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client\u0027s birthday in FitBiz."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBirthday(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class Birthday {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String EARLIEST_BIRTHDAY \u003d LocalDate.now().minusYears(120)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            \"Birthdays should be in the format DD-MM-YYYY (eg. 02-03-1999), and cannot exceed the current date.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \" Birthday should also not be earlier than \" + EARLIEST_BIRTHDAY + \".\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public final String displayValue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Constructs a {@code Birthday}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param birthday A valid birth date in the form DD-MM-YYYY."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Birthday(String birthday) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(birthday);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        checkArgument(isValidBirthday(birthday), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.value \u003d birthday.isEmpty() ? null : LocalDate.parse(birthday, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.displayValue \u003d birthday; //assuming birthday string is valid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns true if a given string is a valid birthday."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static boolean isValidBirthday(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        LocalDate testBirthday;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (test.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            testBirthday \u003d LocalDate.parse(test, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            LocalDate dateNowMinusHundredTwentyYear \u003d dateNow.minusYears(120);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            if (dateNow.compareTo(testBirthday) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            } else if (dateNowMinusHundredTwentyYear.isAfter(testBirthday)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (this.value \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this.value.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                || (other instanceof Birthday // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                \u0026\u0026 value.equals(((Birthday) other).value)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return value \u003d\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public String getAge() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (this.value \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        long age \u003d DAYS.between(this.value, LocalDate.now()) / 365;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return Long.toString(age);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 74,
      "AaronCQL": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Client.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client in FitBiz. Guarantees: details are present and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class Client {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FORMAT_ONLY_ONE_PRESENT \u003d \"(%s)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FORMAT_BOTH_PRESENT \u003d \"(%s, %s)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Start of new/optional data fields"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Birthday birthday;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final CurrentWeight currentWeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final TargetWeight targetWeight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Height height;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final Set\u003cSport\u003e sports \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final UniqueExerciseList exerciseList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final PersonalBest personalBest;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final ScheduleList scheduleList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Client(Name name, Gender gender, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Birthday birthday,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            CurrentWeight currentWeight, TargetWeight targetWeight, Height height, Remark remark, Set\u003cSport\u003e sports,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            UniqueExerciseList exerciseList, PersonalBest personalBest, ScheduleList scheduleList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireAllNonNull(name, gender, phone, email, address, tags, birthday, currentWeight, targetWeight, height,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                remark, sports, exerciseList, personalBest, scheduleList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.currentWeight \u003d currentWeight;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.targetWeight \u003d targetWeight;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.sports.addAll(sports);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.exerciseList \u003d exerciseList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.personalBest \u003d personalBest;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.scheduleList \u003d scheduleList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public Birthday getBirthday() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return birthday;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getBirthdayString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return birthday.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public CurrentWeight getCurrentWeight() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return currentWeight;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public TargetWeight getTargetWeight() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return targetWeight;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public Height getHeight() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public ScheduleList getScheduleList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return scheduleList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns an immutable tag set, which throws"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code UnsupportedOperationException} if modification is attempted."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns an immutable sport set, which throws"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code UnsupportedOperationException} if modification is attempted."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public Set\u003cSport\u003e getSports() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return Collections.unmodifiableSet(sports);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getSportsString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return getSports().stream().map(sport -\u003e sport.getSportName()).collect(Collectors.joining(\", \"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public UniqueExerciseList getExerciseList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return exerciseList;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public PersonalBest getPersonalBest() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return personalBest;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Formats and returns a string representing the client\u0027s age and gender."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String buildBirthdayAndGender() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (birthday.isEmpty() \u0026\u0026 gender.isEmpty()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            // if both are empty"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return EMPTY_STRING;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (gender.isEmpty()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            // if only gender is empty"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return String.format(FORMAT_ONLY_ONE_PRESENT, birthday.getAge());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (birthday.isEmpty()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            // if only birthday is empty"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return String.format(FORMAT_ONLY_ONE_PRESENT, gender.getOneLetterFormat());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return String.format(FORMAT_BOTH_PRESENT, birthday.getAge(), gender.getOneLetterFormat());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true if both clients have the same phone numbers OR both clients have"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * the same email addresses. Thus, for clients to have the same name, both phone"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * and email must be different."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public boolean isSameClient(Client otherClient) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (otherClient \u003d\u003d null) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (otherClient \u003d\u003d this) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (otherClient.getPhone().equals(getPhone())) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (otherClient.getEmail().equals(getEmail())) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // if all checks fail, just return false"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true if both clients have the same identity and data fields. This"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * defines a stronger notion of equality between two clients."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (!(other instanceof Client)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client otherClient \u003d (Client) other;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // TODO: add checks for new/optional attributes"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return otherClient.getName().equals(getName()) \u0026\u0026 otherClient.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                \u0026\u0026 otherClient.getEmail().equals(getEmail()) \u0026\u0026 otherClient.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                \u0026\u0026 otherClient.getTags().equals(getTags());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return Objects.hash(name, gender, phone, email, address, tags, birthday, currentWeight, targetWeight, height,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                remark, sports);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        builder.append(getName()).append(\" Gender: \").append(getGender()).append(\" Phone: \").append(getPhone())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .append(\" Email: \").append(getEmail()).append(\" Address: \").append(getAddress()).append(\" Birthday: \")"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .append(getBirthday()).append(\" Current Weight: \").append(getCurrentWeight()).append(\" Target Weight: \")"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .append(getTargetWeight()).append(\" Height: \").append(getHeight()).append(\" Remark: \")"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .append(getRemark()).append(\" Tags: \");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        builder.append(\" Sports: \");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        getSports().forEach(builder::append);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 16,
      "ziyingli": 11,
      "tohkerwei": 16,
      "Dban1": 21,
      "AaronCQL": 96,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/CurrentWeight.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents current weight (in kg) of a client in FitBiz. Guarantees:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * immutable; is valid as declared in {@link #isValidWeight(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class CurrentWeight {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Weights must either be a whole or decimal number\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \" (eg. 65 or 86.22). Make sure that you only have a maximum of 3 digits before and\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \" 2 digits after the decimal place.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]{1,3}(\\\\.[0-9]{0,2})?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FORMAT_TWO_DECIMAL_PLACES \u003d \"%1$.2f\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Constructs a {@code CurrentWeight}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param weight A valid weight."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public CurrentWeight(String weight) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        checkArgument(isValidWeight(weight), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String formattedWeight \u003d formatWeight(weight);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        value \u003d formattedWeight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static boolean isEmptyString(String toTest) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return toTest.equals(EMPTY_STRING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Formats the given {@code weight} using {@code BigDecimal} to two decimal"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * places."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param weight weight to format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return formatted weight to 2 decimal places"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static String formatWeight(String weight) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (isEmptyString(weight)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return EMPTY_STRING;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        BigDecimal bigDecimal \u003d new BigDecimal(weight);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return String.format(FORMAT_TWO_DECIMAL_PLACES, bigDecimal);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true if a given string is a valid weight."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static boolean isValidWeight(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return isEmptyString(test) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                || (other instanceof CurrentWeight // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                        \u0026\u0026 value.equals(((CurrentWeight) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client\u0027s email in FitBiz."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "AaronCQL": 1,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Gender.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client\u0027s gender in FitBiz. Guarantees: immutable; is"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Gender is case insensitive and can only be\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        + \" \u0027male\u0027 (or \u0027m\u0027), \u0027female\u0027 (or \u0027f\u0027), or \u0027others\u0027 (or \u0027o\u0027).\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs an {@code Gender}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param gender Male / Female / Others."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        value \u003d gender;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(test);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String testInLowerCase \u003d test.trim().toLowerCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return test.equals(EMPTY_STRING)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            || testInLowerCase.equals(\"male\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            || testInLowerCase.equals(\"m\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            || testInLowerCase.equals(\"female\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            || testInLowerCase.equals(\"f\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            || testInLowerCase.equals(\"others\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            || testInLowerCase.equals(\"o\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return value.equals(EMPTY_STRING);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String getOneLetterFormat() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return value.substring(0, 1).toUpperCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 firstCharEquals(value, ((Gender) other).value)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if the first character of two strings are the same."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static boolean firstCharEquals(String string1, String string2) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (string1.length() \u003d\u003d 0 || string2.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return string1.toLowerCase().charAt(0) \u003d\u003d string2.toLowerCase().charAt(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 67,
      "AaronCQL": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Height.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Represents current height (in cm) of a client in FitBiz. Guarantees:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * immutable; is valid as declared in {@link #isValidHeight(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class Height {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Heights must either be a whole or decimal number\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \" (eg. 165 or 186.22). Make sure that you only have a maximum of 3 digits before and\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \" 2 digits after the decimal place.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]{1,3}(\\\\.[0-9]{0,2})?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FORMAT_TWO_DECIMAL_PLACES \u003d \"%1$.2f\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Constructs a {@code Height}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @param height A valid height."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public Height(String height) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        checkArgument(isValidHeight(height), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String formattedHeight \u003d formatHeight(height);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        value \u003d formattedHeight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private static boolean isEmptyString(String toTest) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return toTest.equals(EMPTY_STRING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Formats the given {@code height} using {@code BigDecimal} to two decimal"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * places."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @param height height to format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @return formatted height to 2 decimal places"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private static String formatHeight(String height) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (isEmptyString(height)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return EMPTY_STRING;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        BigDecimal bigDecimal \u003d new BigDecimal(height);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return String.format(FORMAT_TWO_DECIMAL_PLACES, bigDecimal);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static boolean isValidHeight(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return isEmptyString(test) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                || (other instanceof Height // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                        \u0026\u0026 value.equals(((Height) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 69,
      "AaronCQL": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client\u0027s name in FitBiz."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \"Names should only contain alphanumeric characters, spaces and commas, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} \\\\,]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                \u0026\u0026 fullName.equalsIgnoreCase(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 2,
      "Dban1": 1,
      "AaronCQL": 2,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Tests that a {@code Client}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cClient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public boolean test(Client client) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(client.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/PersonalBest.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Represents the personal bests of a client\u0027s exercises in FitBiz."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class PersonalBest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private ObservableList\u003cExercise\u003e personalBestList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void setPersonalBest(Collection\u003cExercise\u003e values) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.personalBestList \u003d FXCollections.observableArrayList(values);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public ObservableList\u003cExercise\u003e getPersonalBest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return this.personalBestList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String toPrint \u003d \"Personal Best \\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        for (Exercise e : personalBestList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            toPrint +\u003d e.toString() + \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return toPrint;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client\u0027s phone number in FitBiz."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "AaronCQL": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Remark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client\u0027s remark in FitBiz."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs an {@code Remark}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param remark A comment to record on the client."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 38,
      "AaronCQL": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/Sport.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Client\u0027s sport in FitBiz."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSport(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class Sport {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Sport should only contain alphanumeric characters and spaces\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public final String sportName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Constructs an {@code Sport}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param sport A valid Sport."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public Sport(String sport) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(sport);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        checkArgument(isValidSport(sport), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        sportName \u003d sport;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Returns true if a given string is a valid sport."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static boolean isValidSport(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return test.equals(EMPTY_STRING) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getSportName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return sportName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return \"[\" + sportName + \"]\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                || (other instanceof Sport // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                \u0026\u0026 sportName.equals(((Sport) other).sportName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return sportName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 4,
      "ziyingli": 2,
      "tohkerwei": 46,
      "AaronCQL": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/TagAndSportContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * @author tohkerwei"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Tests that a {@code Client}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class TagAndSportContainsKeywordsPredicate implements Predicate\u003cClient\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final List\u003cString\u003e tagKeywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final List\u003cString\u003e sportKeywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public TagAndSportContainsKeywordsPredicate(List\u003cString\u003e tagKeywords, List\u003cString\u003e sportKeywords) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.tagKeywords \u003d tagKeywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.sportKeywords \u003d sportKeywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public boolean test(Client client) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        boolean hasAllTags \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        boolean hasAllSports \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!tagKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            for (String tag : tagKeywords) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                boolean hasTag \u003d StringUtil.containsWordIgnoreCase(setTagToString(client.getTags()), tag);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                hasAllTags \u003d hasAllTags \u0026\u0026 hasTag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!sportKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            for (String sport : sportKeywords) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                boolean hasSport \u003d StringUtil.containsWordIgnoreCase(setSportToString(client.getSports()), sport);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                hasAllSports \u003d hasAllSports \u0026\u0026 hasSport;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return hasAllTags \u0026\u0026 hasAllSports;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Converts the tags of a client into a string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param tagsSet set of tags of a client"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return string containing tags of a client"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String setTagToString(Set\u003cTag\u003e tagsSet) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArrayList\u003cString\u003e tagArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (Tag tag : tagsSet) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            tagArray.add(tag.tagName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (int i \u003d 0; i \u003c tagsSet.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            sb.append(tagArray.get(i));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Converts the sports of a client into a string"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param sportSet set of sports of a client"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return string containing sports of a client"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String setSportToString(Set\u003cSport\u003e sportSet) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArrayList\u003cString\u003e sportArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (Sport sport : sportSet) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            sportArray.add(sport.sportName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (int i \u003d 0; i \u003c sportSet.size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            sb.append(sportArray.get(i));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                || (other instanceof TagAndSportContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                \u0026\u0026 tagKeywords.equals(((TagAndSportContainsKeywordsPredicate) other).tagKeywords)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                || sportKeywords.equals(((TagAndSportContainsKeywordsPredicate) other).sportKeywords)); // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/TargetWeight.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents current weight (in kg) of a client in FitBiz. Guarantees:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * immutable; is valid as declared in {@link #isValidWeight(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class TargetWeight {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Input weight must either be a whole or decimal number\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \" (eg. 65 or 86.22). Make sure that you only have a maximum of 3 digits before and\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            + \" 2 digits after the decimal place.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]{1,3}(\\\\.[0-9]{0,2})?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FORMAT_TWO_DECIMAL_PLACES \u003d \"%1$.2f\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Constructs a {@code TargetWeight}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param weight A valid weight."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public TargetWeight(String weight) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        checkArgument(isValidWeight(weight), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String formattedWeight \u003d formatWeight(weight);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        value \u003d formattedWeight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static boolean isEmptyString(String toTest) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return toTest.equals(EMPTY_STRING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Formats the given {@code weight} using {@code BigDecimal} to two decimal"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * places."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @param weight weight to format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @return formatted weight to 2 decimal places"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private String formatWeight(String weight) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (isEmptyString(weight)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return EMPTY_STRING;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        BigDecimal bigDecimal \u003d new BigDecimal(weight);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return String.format(FORMAT_TWO_DECIMAL_PLACES, bigDecimal);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true if a given string is a valid weight."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static boolean isValidWeight(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return isEmptyString(test) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                || (other instanceof TargetWeight // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                        \u0026\u0026 value.equals(((TargetWeight) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/UniqueClientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.exceptions.ClientNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.exceptions.DuplicateClientException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * A list of clients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * A client is considered unique by comparing using {@code Client#isSameClient(Client)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * clients uses Client#isSameClient(Client) for equality so as to ensure that the client being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * unique in terms of identity in the UniqueClientList. However, the removal of a client uses Client#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * as to ensure that the client with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * @see Client#isSameClient(Client)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class UniqueClientList implements Iterable\u003cClient\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final ObservableList\u003cClient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final ObservableList\u003cClient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns true if the list contains an equivalent client as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public boolean contains(Client toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameClient);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Adds a client to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * The client must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void add(Client toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new DuplicateClientException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Replaces the client {@code target} in the list with {@code editedClient}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * The client identity of {@code editedClient} must not be the same as another existing client in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireAllNonNull(target, editedClient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new ClientNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (!target.isSameClient(editedClient) \u0026\u0026 contains(editedClient)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new DuplicateClientException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        internalList.set(index, editedClient);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Removes the equivalent client from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * The client must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void remove(Client toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new ClientNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClients(UniqueClientList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Replaces the contents of this list with {@code clients}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * {@code clients} must not contain duplicate clients."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClients(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireAllNonNull(clients);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (!clientsAreUnique(clients)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new DuplicateClientException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        internalList.setAll(clients);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ObservableList\u003cClient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public Iterator\u003cClient\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                || (other instanceof UniqueClientList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueClientList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns true if {@code clients} contains only unique clients."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private boolean clientsAreUnique(List\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        for (int i \u003d 0; i \u003c clients.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            for (int j \u003d i + 1; j \u003c clients.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                if (clients.get(i).isSameClient(clients.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/exceptions/ClientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Signals that the operation is unable to find the specified client."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class ClientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/client/exceptions/DuplicateClientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Signals that the operation will result in duplicate Clients (Clients are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class DuplicateClientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public DuplicateClientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        super(\"Operation would result in duplicate clients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Exercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Represents an exercise done by a client. Guarantees: details are present and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final ExerciseName exerciseName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final ExerciseReps exerciseReps;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final ExerciseSets exerciseSets;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final ExerciseWeight exerciseWeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final ExerciseDate exerciseDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Exercise(ExerciseName exerciseName, ExerciseReps exerciseReps, ExerciseSets exerciseSets,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseWeight exerciseWeight, ExerciseDate exerciseDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireAllNonNull(exerciseName, exerciseDate, exerciseReps, exerciseSets, exerciseWeight);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseName \u003d exerciseName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseReps \u003d exerciseReps;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseSets \u003d exerciseSets;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseWeight \u003d exerciseWeight;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseDate \u003d exerciseDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseName getExerciseName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return exerciseName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseReps getExerciseReps() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return exerciseReps;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseSets getExerciseSets() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return exerciseSets;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseWeight getExerciseWeight() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return exerciseWeight;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseDate getExerciseDate() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return exerciseDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns a string of describing {@code Exercise} to be shown in {@code ResultDisplay}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getForOutput() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        builder.append(\"Exercise name: \").append(getExerciseName())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .append(\"\\nDate: \").append(getExerciseDate())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .append(\"\\nReps: \").append(getExerciseReps())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .append(\"\\nWeight: \").append(getExerciseWeight())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .append(\"\\nSets: \").append(getExerciseSets());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if both exercises of the same name, date, reps and weight."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * This defines a weaker notion of equality between two exercises."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean isSameExercise(Exercise otherExercise) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (otherExercise \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return otherExercise !\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u0026\u0026 otherExercise.getExerciseName().equals(getExerciseName())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u0026\u0026 otherExercise.getExerciseReps().equals(getExerciseReps())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            \u0026\u0026 otherExercise.getExerciseWeight().equals(getExerciseWeight())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u0026\u0026 otherExercise.getExerciseDate().equals(getExerciseDate());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if both exercise have the attribute values."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!(other instanceof Exercise)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise otherExercise \u003d (Exercise) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return otherExercise.getExerciseName().equals(getExerciseName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u0026\u0026 otherExercise.getExerciseReps().equals(getExerciseReps())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u0026\u0026 otherExercise.getExerciseSets().equals(getExerciseSets())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u0026\u0026 otherExercise.getExerciseWeight().equals(getExerciseWeight())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u0026\u0026 otherExercise.getExerciseDate().equals(getExerciseDate());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return Objects.hash(exerciseName, exerciseReps, exerciseSets, exerciseWeight, exerciseDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        builder.append(\"Exercise name: \").append(getExerciseName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .append(\" Date: \").append(getExerciseDate())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .append(\" Sets: \").append(getExerciseSets())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .append(\" Reps: \").append(getExerciseReps())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .append(\" Weight: \").append(getExerciseWeight());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 115,
      "AaronCQL": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/ExerciseDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Represents the date of an exercise done by client. Guarantees: immutable; is"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * valid as declared in {@link #isValidExerciseDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String EARLIEST_DATE \u003d LocalDate.now().minusYears(1)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            \"Exercise date should be in the format DD-MM-YYYY (eg. 02-03-1999), and cannot exceed the current date.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    + \" Exercise date should also not be earlier than \" + EARLIEST_DATE + \".\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final String displayValue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param date A valid date in the form DD-MM-YYYY."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseDate(String date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        checkArgument(isValidExerciseDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.value \u003d LocalDate.parse(date, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.displayValue \u003d date; // assuming birthday string is valid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static boolean isValidExerciseDate(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            LocalDate testDate \u003d LocalDate.parse(test, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            LocalDate dateNowMinusOneYear \u003d dateNow.minusYears(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            if (dateNow.isBefore(testDate)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            } else if (dateNowMinusOneYear.isAfter(testDate)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public long forPlot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value.toEpochDay();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public LocalDate getValue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this.value.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof ExerciseDate // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 value.equals(((ExerciseDate) other).value)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 79,
      "Dban1": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/ExerciseName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Represents the name of an exercise from a list of exercises. Guarantees:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * immutable; is valid as declared in {@link #isValidExerciseName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \"Exercise names should only contain alphanumeric characters and spaces, and it should not be blank. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        + \"There can only be maximum of 30 characters. \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[\\\\p{Alnum}][\\\\p{Alnum} ]{0,29}$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs a {@code ExerciseName}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param exerciseName A valid exercise name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseName(String exerciseName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exerciseName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        checkArgument(isValidExerciseName(exerciseName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        value \u003d exerciseName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if a given string is a valid exercise name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static boolean isValidExerciseName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof ExerciseName // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 value.equals(((ExerciseName) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/ExerciseReps.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Represents the number of Reps a client does for an exercise. Guarantees:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * immutable; is valid as declared in {@link #isValidExerciseReps(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseReps {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \"Input Reps must be a whole number from 1 to 9999 (eg. 65)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([1-9][0-9]{0,3})$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs a {@code ExerciseReps}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param exerciseReps A positive whole number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseReps(String exerciseReps) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exerciseReps);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        checkArgument(isValidExerciseReps(exerciseReps), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        value \u003d exerciseReps;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if a given string is a valid exercise reps."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static boolean isValidExerciseReps(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return test.equals(EMPTY_STRING) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Converts the string value of exercise reps to integer."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public int convertToInt() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (value.equals(EMPTY_STRING)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return Integer.parseInt(value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof ExerciseReps // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 value.equals(((ExerciseReps) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 58,
      "ziyingli": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/ExerciseSets.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Represents the number of Sets a client does for an exercise. Guarantees:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * immutable; is valid as declared in {@link #isValidExerciseSets(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseSets {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \"Input Sets must be a whole number from 1 to 9999 (eg. 5)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([1-9][0-9]{0,3})$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs a {@code ExerciseSets}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param exerciseSets A whole number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseSets(String xerciseSets) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(xerciseSets);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        checkArgument(isValidExerciseSets(xerciseSets), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        value \u003d xerciseSets;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if a given string is a valid exercise sets."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static boolean isValidExerciseSets(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return test.equals(EMPTY_STRING) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof ExerciseSets // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 value.equals(((ExerciseSets) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/ExerciseWeight.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Represents the weight (in kg) of an exercise done by a client in FitBiz. Guarantees:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * immutable; is valid as declared in {@link #isValidExerciseWeight(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseWeight {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \"Input Weight must be a whole number from 1 to 9999 (eg. 65)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([1-9][0-9]{0,3})$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs a {@code ExerciseWeight}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param exerciseWeight A valid exerise weight."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseWeight(String exerciseWeight) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exerciseWeight);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        checkArgument(isValidExerciseWeight(exerciseWeight), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        value \u003d exerciseWeight;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if a given string is a valid exerise weight."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static boolean isValidExerciseWeight(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return test.equals(EMPTY_STRING) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Converts the string value of exercise weight to integer."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public int convertToInt() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (value.equals(EMPTY_STRING)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return Integer.parseInt(value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof ExerciseWeight // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 value.equals(((ExerciseWeight) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 58,
      "ziyingli": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/UniqueExerciseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.EndDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.StartDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * A list of exercises that enforces uniqueness between its elements and does"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * not allow nulls. A exercise is considered unique by comparing using"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code Exercise#isSameexercise(Exercise)}. As such, adding and updating of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * exercises uses Exercise#isSameexercise(Exercise) for equality so as to ensure"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * that the exercise being added or updated is unique in terms of identity in"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * the UniqueexerciseList. However, the removal of a exercise uses"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Exercise#equals(Object) so as to ensure that the exercise with exactly the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * same fields will be removed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @see Exercise#isSameexercise(Exercise)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class UniqueExerciseList implements Iterable\u003cExercise\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalUnmodifiableList \u003d FXCollections"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns true if the list contains an equivalent exercise as the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean contains(Exercise toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExercise);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Returns true if the list contains an exercise with the name equivalent as the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * argument."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public boolean containsNameWithinDate(ExerciseName toCheck, StartDate startDate, EndDate endDate) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                .filter(exercise -\u003e (exercise.getExerciseDate().getValue().compareTo(startDate.value) \u003e\u003d 0))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                .filter(exercise -\u003e (exercise.getExerciseDate().getValue().compareTo(endDate.value) \u003c\u003d 0))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                .anyMatch(exercise -\u003e exercise.getExerciseName().getValue().equals(toCheck.getValue()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns {@code Exercise} specified by the {@code Index}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Exercise getExercise(Index index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Adds an exercise to the list without ensuring any order. The exercise must"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * not already exist in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void add(Exercise toAdd) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Inserts an exercise to the list while ensuring list is sorted by the exercise"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * date in descending order and by exercise name in ascending order."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * The exercise must not already exist in the list. This basically does"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * insertion sort based on the fact that the list must already be sorted in the"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * first place. Do not use this method to add many exercises at once as it is"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * inefficient."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void addToSorted(Exercise toAdd) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        int idx \u003d 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        LocalDate toAddDate \u003d toAdd.getExerciseDate().getValue();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String toAddName \u003d toAdd.getExerciseName().getValue().toLowerCase();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        for (Exercise curr : internalList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            LocalDate currDate \u003d curr.getExerciseDate().getValue();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            String currName \u003d curr.getExerciseName().getValue().toLowerCase();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            int dateComparision \u003d toAddDate.compareTo(currDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            if (dateComparision \u003e 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                // already at correct position"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            } else if (dateComparision \u003d\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                // sort by name"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                if (toAddName.compareTo(currName) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    idx++;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                // toAddDate is later than currDate"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                idx++;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        internalList.add(idx, toAdd);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Replaces the exercise {@code target} in the list with {@code editedExercise}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * {@code target} must exist in the list. The exercise identity of"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code editedExercise} must not be the same as another existing exercise in"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * the list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        remove(target);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!target.isSameExercise(editedExercise) \u0026\u0026 contains(editedExercise)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        addToSorted(editedExercise);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sorts the list by the exercise date in descending order, and if the dates"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * are equal, then by the exercise name in ascending order."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void sortByExerciseDateAndName() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Comparator\u003cExercise\u003e byExerciseDate \u003d (Exercise e1, Exercise e2) -\u003e {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            LocalDate e1Date \u003d e1.getExerciseDate().getValue();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            LocalDate e2Date \u003d e2.getExerciseDate().getValue();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            String e1Name \u003d e1.getExerciseName().getValue().toUpperCase();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            String e2Name \u003d e2.getExerciseName().getValue().toUpperCase();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (e2Date.compareTo(e1Date) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                return e1Name.compareTo(e2Name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return e2Date.compareTo(e1Date);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        };"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FXCollections.sort(internalList, byExerciseDate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Removes the equivalent exercise from the list. The exercise must exist in the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void remove(Exercise toRemove) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercises(UniqueExerciseList replacement) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Replaces the contents of this list with {@code exercises}. {@code exercises}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * must not contain duplicate exercises."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercises(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireAllNonNull(exercises);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!exercisesAreUnique(exercises)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        internalList.setAll(exercises);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ObservableList\u003cExercise\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Iterator\u003cExercise\u003e iterator() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Return size of the exercise list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                || (other instanceof UniqueExerciseList // instanceof handles nulls"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueExerciseList) other).internalList));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if {@code exercises} contains only unique exercises."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private boolean exercisesAreUnique(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        for (int i \u003d 0; i \u003c exercises.size() - 1; i++) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            for (int j \u003d i + 1; j \u003c exercises.size(); j++) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                if (exercises.get(i).isSameExercise(exercises.get(j))) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String toReturn \u003d \"\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (Exercise ex : internalList) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            toReturn +\u003d ex.toString() + \"\\n\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return toReturn.trim();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 160,
      "ziyingli": 11,
      "AaronCQL": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/exceptions/DuplicateExerciseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Signals that the operation will result in duplicate Exercises"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * (Exercises are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class DuplicateExerciseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public DuplicateExerciseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        super(\"Operation would result in duplicate exercises\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/exceptions/ExerciseNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Signals that the operation is unable to find the specified exercise."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/graph/Axis.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Represents the y-axis of the graph of exercises."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class Axis {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        \"The y-axis can only be \\\"reps\\\" or \\\"weight\\\" (case insensitive) and it should not be blank. \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public final AxisType value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public Axis(String axis) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(axis);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        checkArgument(isValidAxis(axis), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        value \u003d AxisType.getAxisType(axis.toLowerCase());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public AxisType getAxisType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static boolean isValidAxis(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return test.equalsIgnoreCase(\"reps\") || test.equalsIgnoreCase(\"weight\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                || (other instanceof Axis // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                        \u0026\u0026 value.equals(((Axis) other).value)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 5,
      "ziyingli": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/graph/AxisType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * The type of axis that user can plot"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public enum AxisType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    REPS, WEIGHT, NA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static AxisType getAxisType (String value) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        switch (value) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case \"reps\":"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return REPS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case \"weight\":"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return WEIGHT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        switch(this) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case REPS:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return \"reps\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case WEIGHT:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return \"weight\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/graph/EndDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Represents the end date of the graph of exercises. Guarantees: immutable; is"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * valid as declared in {@link #isValidEndDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class EndDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \"End date input should be in the form DD-MM-YYYY and should not be before start date or blank. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"It should only be from within one year before to the current date. eg. 18-12-2019. \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public final String displayValue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public EndDate(String date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        checkArgument(isValidEndDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.value \u003d LocalDate.parse(date, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.displayValue \u003d date; // assuming date string is valid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Tests if endDate is a valid date, within a year prior to current date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @param test String to be tested."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @return Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static Boolean isValidEndDate(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            LocalDate testDate \u003d LocalDate.parse(test, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            LocalDate dateNowMinusOneYear \u003d dateNow.minusYears(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            if (dateNow.isBefore(testDate)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            } else if (dateNowMinusOneYear.isAfter(testDate)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return this.value.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                || (other instanceof EndDate // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                        \u0026\u0026 value.equals(((EndDate) other).value)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/graph/Graph.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Represents a graph of an exercise done by a client. Guarantees: details are"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class Graph {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private final ExerciseName exerciseName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private final Axis axis;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private final StartDate startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private final EndDate endDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public Graph(ExerciseName exerciseName, Axis axis, StartDate startDate, EndDate endDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireAllNonNull(exerciseName, axis, startDate, endDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.exerciseName \u003d exerciseName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.axis \u003d axis;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public ExerciseName getExerciseName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return exerciseName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public Axis getAxis() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return axis;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public StartDate getStartDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public EndDate getEndDate() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Generates a list of exercises to be displayed in the graph."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @param client The client in view"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @return The list of filtered exercises"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public List\u003cExercise\u003e generateGraphList(Client client) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        List\u003cExercise\u003e exerciseList \u003d client.getExerciseList().asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Comparator\u003cExercise\u003e exerciseComparator \u003d (e1, e2)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            -\u003e e1.getExerciseDate().value.compareTo(e2.getExerciseDate().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Stream\u003cExercise\u003e graphList \u003d exerciseList.stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                .filter(exercise -\u003e exercise.getExerciseName().equals(exerciseName))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                .filter(exercise -\u003e (exercise.getExerciseDate().value.compareTo(startDate.value) \u003e\u003d 0))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                .filter(exercise -\u003e (exercise.getExerciseDate().value.compareTo(endDate.value) \u003c\u003d 0))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                .sorted(exerciseComparator);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        switch (axis.getAxisType()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case REPS:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            graphList \u003d graphList.filter(exercise -\u003e !exercise.getExerciseReps().value.isEmpty());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case WEIGHT:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            graphList \u003d graphList.filter(exercise -\u003e !exercise.getExerciseWeight().value.isEmpty());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return graphList.collect(Collectors.toList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Returns true if both graph of the same name, axis, startDate and endDate."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!(other instanceof Graph)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Graph otherGraph \u003d (Graph) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return otherGraph !\u003d null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                \u0026\u0026 otherGraph.getExerciseName().equals(getExerciseName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                \u0026\u0026 otherGraph.getAxis().equals(getAxis())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                \u0026\u0026 otherGraph.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                \u0026\u0026 otherGraph.getEndDate().equals(getEndDate());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6,
      "ziyingli": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/graph/StartDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Represents the start date of the graph of exercises. Guarantees: immutable; is"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * valid as declared in {@link #isValidStartDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class StartDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \"Start date input should be in the form DD-MM-YYYY and should not be after end date or blank. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + \"The accepted range of dates is today to one year before today. eg. 18-07-2019.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public final String displayValue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public StartDate(String date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        checkArgument(isValidStartDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.value \u003d LocalDate.parse(date, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.displayValue \u003d date; // assuming date string is valid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * Tests if startDate is a valid date, within a year prior to current date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @param test String to be tested."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     * @return Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static Boolean isValidStartDate(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            LocalDate testDate \u003d LocalDate.parse(test, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            LocalDate dateNowMinusOneYear \u003d dateNow.minusYears(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            if (dateNow.isBefore(testDate)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            } else if (dateNowMinusOneYear.isAfter(testDate)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return this.value.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                || (other instanceof StartDate // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                        \u0026\u0026 value.equals(((StartDate) other).value)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/Day.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.DayEnum.Weekday;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Represents the Day of a schedule. Guarantees: immutable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * is valid as declared in {@link #isValidDay(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            \"Day should be the first 3 letters of the day, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[[a-zA-Z]]{3}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public final Weekday value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Constructs a {@code Day}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param day A valid day with first 3 letters of the day."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public Day(String day) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        checkArgument(isValidDay(day), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.value \u003d assignDay(day);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Private constructor for cloning Day using the Weekday enum."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private Day(Weekday day) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.value \u003d day;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public Day clone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new Day(this.value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Checks if input String is a valid three-lettered day."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return true if is valid day"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static boolean isValidDay(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String lowerCaseTest \u003d test.toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        switch (lowerCaseTest) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"sun\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"mon\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"tue\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"wed\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"thu\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"fri\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"sat\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Assigns a weekday based on the day input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return day of the week"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private Weekday assignDay(String day) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String lowerCaseDay \u003d day.toLowerCase();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        switch (lowerCaseDay) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"sun\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Weekday.SUN;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"mon\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Weekday.MON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"tue\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Weekday.TUE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"wed\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Weekday.WED;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"thu\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Weekday.THU;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"fri\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Weekday.FRI;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        case \"sat\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Weekday.SAT;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public Weekday getDayEnum() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                || (other instanceof Day // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                \u0026\u0026 value.equals(((Day) other).value)); // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 84,
      "Dban1": 18,
      "AaronCQL": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/DayEnum.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Wrapper class for WeekDay enum."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class DayEnum {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Enumerates the seven days of the week."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public enum Weekday { SUN, MON, TUE, WED, THU, FRI, SAT }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 2,
      "Dban1": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/EndTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Represents the end time of a schedule of a client. Guarantees: immutable; is"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * valid as declared in {@link #isValidTimingFormat(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class EndTime extends Time {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public final int directTimeInt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Constructs a {@code EndTime}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param time A valid end time in the form HHMM"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public EndTime(String time) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        super(time);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.value \u003d formatTime(time);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.directTimeInt \u003d Integer.parseInt(time);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EndTime clone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String rawTime \u003d this.value.substring(0, 2) + this.value.substring(3);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new EndTime(rawTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 23,
      "Dban1": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/Schedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Represents a Schedule in the Client."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class Schedule implements Comparable\u003cSchedule\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Schedule day should be the first 3 letters of the day. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"Timings should be given in 24 hour format and in HHmm format. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"Start time cannot be later than end time.\\nMaximum range is 0000-2359.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \" Example usage: schedule 1 sch/MON-1100-1200\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final Day day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final StartTime startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final EndTime endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private String clientName \u003d \"unnamed\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public Schedule(Day day, StartTime startTime, EndTime endTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        requireAllNonNull(day, startTime, endTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        checkArgument(isValidTimeFrame(startTime.toString(), endTime.toString()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param startTime"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param endTime"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return Checks if end time is later than start time, assuming they are of valid format \"hhmm\". End time"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * and start time cannot be simultaneously 0000. If end time is 0000, it is assumed as the next day."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static boolean isValidTimeFrame(String startTime, String endTime) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // End time cannot be 0000"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (endTime.equals(\"00:00\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Start time cannot equal End time"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (startTime.equals(endTime)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Check if End time is later than Start time"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return (LocalTime.parse(endTime).compareTo(LocalTime.parse(startTime)) \u003e 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns a schedule with a client name tagged to it."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void assignClientName(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.clientName \u003d s;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @author tohkerwei"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param scheduleString a schedule in string format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return a schedule object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static Schedule stringToSchedule(String scheduleString) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String[] tokens \u003d scheduleString.split(\" \", 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Day day \u003d new Day(tokens[0]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        StartTime startTime \u003d new StartTime(tokens[2].substring(0, 2) + tokens[2].substring(3, 5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        EndTime endTime \u003d new EndTime(tokens[4].substring(0, 2) + tokens[4].substring(3, 5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return new Schedule(day, startTime, endTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return this.day;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public StartTime getStartTime() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public EndTime getEndTime() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return this.endTime;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public double getHours() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        LocalTime start \u003d LocalTime.parse(this.startTime.getTime());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        LocalTime end \u003d LocalTime.parse(this.endTime.getTime());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return (double) ChronoUnit.HOURS.between(start, end);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns a clone of Schedule."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public Schedule clone() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Day clonedDay \u003d this.day.clone();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        StartTime clonedStartTime \u003d this.startTime.clone();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EndTime clonedEndTime \u003d this.endTime.clone();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String clonedClientName \u003d this.clientName;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Schedule clonedSchedule \u003d new Schedule(clonedDay, clonedStartTime, clonedEndTime);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clonedSchedule.assignClientName(clonedClientName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return clonedSchedule;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Returns true if both schedule have the same attribute values"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!(other instanceof Schedule)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Schedule otherSchedule \u003d (Schedule) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int otherSt \u003d otherSchedule.getStartTime().getDirectTimeInt();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int otherEt \u003d otherSchedule.getEndTime().getDirectTimeInt();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int thisSt \u003d this.getStartTime().getDirectTimeInt();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int thisEt \u003d this.getEndTime().getDirectTimeInt();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Checks if there are overlaps between 2 schedules."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return otherSchedule.getDay().equals(getDay())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                \u0026\u0026 (thisSt \u003d\u003d otherSt)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                \u0026\u0026 (thisEt \u003d\u003d otherEt);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return Objects.hash(day, startTime, endTime);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        builder.append(getDay())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                .append(getStartTime())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                .append(\" - \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                .append(getEndTime());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public String getTimeFrame() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String timeFrame \u003d getStartTime().toString() + \" - \" + getEndTime().toString();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return timeFrame;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public int compareTo(Schedule other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Schedule otherSchedule \u003d other;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int otherSt \u003d other.getStartTime().getDirectTimeInt();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int otherEt \u003d other.getEndTime().getDirectTimeInt();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int thisSt \u003d this.getStartTime().getDirectTimeInt();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        int thisEt \u003d this.getEndTime().getDirectTimeInt();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Checks if there are overlaps between 2 schedules."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (otherSchedule.getDay().equals(getDay())) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            if (((otherSt \u003c thisSt) \u0026\u0026 (otherEt \u003c thisSt)) || (otherSt \u003e thisEt)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                return otherSt - thisSt;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            DayEnum.Weekday otherWeekday \u003d otherSchedule.getDay().getDayEnum();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            DayEnum.Weekday thisWeekday \u003d this.getDay().getDayEnum();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return otherWeekday.compareTo(thisWeekday);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public String getClientName() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this.clientName;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 61,
      "Dban1": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/ScheduleDay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Contains a sorted list of Schedule for the day."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * @author @Dban1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class ScheduleDay {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final ArrayList\u003cSchedule\u003e scheduleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final String dayName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleDay(ArrayList\u003cSchedule\u003e scheduleList, String dayName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.scheduleList \u003d scheduleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.scheduleList.sort(Comparator.comparingInt(o -\u003e o.getStartTime().getDirectTimeInt()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.dayName \u003d dayName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns a list of weekly schedule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param allClientScheduleList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static ObservableList\u003cScheduleDay\u003e weeklySchedule(ArrayList\u003cScheduleList\u003e allClientScheduleList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ObservableList\u003cScheduleDay\u003e scheduleDayList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e mondaySchedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e tuesdaySchedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e wednesdaySchedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e thursdaySchedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e fridaySchedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e saturdaySchedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e sundaySchedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        for (ScheduleList sl : allClientScheduleList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            for (Schedule s : sl.getArrayList()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                switch (s.getDay().getDayEnum()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                case MON:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    mondaySchedule.add(s);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                case TUE:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    tuesdaySchedule.add(s);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                case WED:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    wednesdaySchedule.add(s);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                case THU:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    thursdaySchedule.add(s);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                case FRI:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    fridaySchedule.add(s);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                case SAT:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    saturdaySchedule.add(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                case SUN:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    sundaySchedule.add(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleDayList.add(new ScheduleDay(sundaySchedule, \"SUN\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleDayList.add(new ScheduleDay(mondaySchedule, \"MON\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleDayList.add(new ScheduleDay(tuesdaySchedule, \"TUE\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleDayList.add(new ScheduleDay(wednesdaySchedule, \"WED\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleDayList.add(new ScheduleDay(thursdaySchedule, \"THU\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleDayList.add(new ScheduleDay(fridaySchedule, \"FRI\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleDayList.add(new ScheduleDay(saturdaySchedule, \"SAT\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return scheduleDayList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public String getDayName() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this.dayName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public String getDayScheduleString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        final StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        for (Schedule s : scheduleList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            sb.append(s.getTimeFrame() + \" \" + s.getClientName() + \"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public int getNumberOfSchedules() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this.scheduleList.size();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/ScheduleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class ScheduleList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private ArrayList\u003cSchedule\u003e scheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.scheduleList \u003d new ArrayList\u003cSchedule\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleList(ArrayList\u003cSchedule\u003e scheduleList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.scheduleList \u003d scheduleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Sets schedule using an ArrayList of Schedule."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void setSchedule(ArrayList\u003cSchedule\u003e newScheduleList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireAllNonNull(newScheduleList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        scheduleList \u003d newScheduleList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns a deep copy of this ScheduleList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleList duplicate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ScheduleList copiedList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        copiedList.setSchedule(this.scheduleList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return new ScheduleList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void add(Schedule schedule) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        scheduleList.add(schedule);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public ArrayList\u003cSchedule\u003e getArrayList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return scheduleList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return scheduleList.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String toReturn \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        for (Schedule schedule : scheduleList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            toReturn +\u003d schedule.toString() + \"\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return toReturn.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 39,
      "Dban1": 19,
      "AaronCQL": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/StartTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Represents the start time of a schedule of a client. Guarantees: immutable; is"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * valid as declared in {@link #isValidTimingFormat(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class StartTime extends Time {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public final int directTimeInt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Constructs a {@code StartTime}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param time A valid start time in the form HHMM"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public StartTime(String time) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        super(time);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.value \u003d formatTime(time);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.directTimeInt \u003d Integer.parseInt(time);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public StartTime clone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String rawTime \u003d this.value.substring(0, 2) + this.value.substring(3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new StartTime(rawTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 23,
      "Dban1": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Abstract Time class that contains the basic implementations for Time management."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public abstract class Time {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            \"Time input should be in the format HHMM and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public final int directTimeInt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param time A valid end time in the form HHMM"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public Time(String time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        checkArgument(isValidTimingFormat(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.value \u003d formatTime(time);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.directTimeInt \u003d Integer.parseInt(time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Checks if the input timing is of valid \"HHMM\" format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * * @param time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return true if time is of correct format of \"HHMM\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static boolean isValidTimingFormat(String time) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            if (time.length() !\u003d 4) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            String formattedTime \u003d time.substring(0, 2) + \":\" + time.substring(2, 4);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            LocalTime.parse(formattedTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Formats a HHMM time to HH:MM"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @param time time in string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @return formatted time in HH:MM"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static String formatTime(String time) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String formattedEndTime \u003d time.substring(0, 2) + \":\" + time.substring(2, 4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return formattedEndTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String time \u003d value.substring(0, 2) + value.substring(3, 5);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                \u0026\u0026 value.equals(((Time) other).value)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public int getDirectTimeInt() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return this.directTimeInt;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 79,
      "Dban1": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Represents a Tag in FitBiz."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return test.equals(EMPTY_STRING) || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 3,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Birthday;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.CurrentWeight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.PersonalBest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.TargetWeight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseSets;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.schedule.Day;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.schedule.EndTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.schedule.StartTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Contains utility methods for populating {@code FitBiz} with sample data."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static Client[] getSampleClients() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ScheduleList alexScheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexScheduleList.add(new Schedule(new Day(\"mon\"), new StartTime(\"1100\"), new EndTime(\"1230\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexScheduleList.add(new Schedule(new Day(\"tue\"), new StartTime(\"1700\"), new EndTime(\"1900\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        UniqueExerciseList alexExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Bench Press\"), new ExerciseReps(\"8\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"3\"), new ExerciseWeight(\"82\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(1).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Bench Press\"), new ExerciseReps(\"6\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"2\"), new ExerciseWeight(\"85\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(5).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Bench Press\"), new ExerciseReps(\"7\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"3\"), new ExerciseWeight(\"80\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(12).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Barbell Squat\"), new ExerciseReps(\"5\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"4\"), new ExerciseWeight(\"125\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(1).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Barbell Squat\"), new ExerciseReps(\"3\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"4\"), new ExerciseWeight(\"145\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(5).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Barbell Squat\"), new ExerciseReps(\"2\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"3\"), new ExerciseWeight(\"150\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(12).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Sumo Deadlift\"), new ExerciseReps(\"5\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"2\"), new ExerciseWeight(\"165\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(1).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Sumo Deadlift\"), new ExerciseReps(\"3\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"2\"), new ExerciseWeight(\"185\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(5).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        alexExerciseList.addToSorted(new Exercise(new ExerciseName(\"Sumo Deadlift\"), new ExerciseReps(\"4\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseSets(\"3\"), new ExerciseWeight(\"180\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ExerciseDate(LocalDate.now().minusDays(12).format(DATE_TIME_FORMATTER))));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ScheduleList berniceScheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        berniceScheduleList.add(new Schedule(new Day(\"mon\"), new StartTime(\"1100\"), new EndTime(\"1230\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        berniceScheduleList.add(new Schedule(new Day(\"fri\"), new StartTime(\"1700\"), new EndTime(\"1900\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ScheduleList irfanScheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        irfanScheduleList.add(new Schedule(new Day(\"sat\"), new StartTime(\"1200\"), new EndTime(\"1400\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        irfanScheduleList.add(new Schedule(new Day(\"tue\"), new StartTime(\"1200\"), new EndTime(\"1400\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ScheduleList royScheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        royScheduleList.add(new Schedule(new Day(\"sat\"), new StartTime(\"0900\"), new EndTime(\"1100\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ScheduleList amyScheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        amyScheduleList.add(new Schedule(new Day(\"thu\"), new StartTime(\"1945\"), new EndTime(\"2115\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        amyScheduleList.add(new Schedule(new Day(\"sat\"), new StartTime(\"1945\"), new EndTime(\"2115\")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new Client[] {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            new Client(new Name(\"Alex Yeoh\"), new Gender(\"Male\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    new Email(\"alexyeoh@example.com\"), new Address(\"Blk 69 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getTagSet(\"Paleo\"), new Birthday(\"25-12-1997\"), new CurrentWeight(\"70\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                    new TargetWeight(\"75\"), new Height(\"170\"), new Remark(\"Diet may not be good\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getSportSet(\"Sumo Wrestling\"), alexExerciseList, new PersonalBest(), alexScheduleList),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            new Client(new Name(\"Bernice Yu\"), new Gender(\"Female\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    new Email(\"berniceyu@example.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getTagSet(\"Normal\"), new Birthday(\"29-02-2000\"), new CurrentWeight(\"55.8\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    new TargetWeight(\"50\"), new Height(\"160\"), new Remark(\"\"), getSportSet(\"Hockey\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    new UniqueExerciseList(), new PersonalBest(), berniceScheduleList),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            new Client(new Name(\"Irfan Ibrahim\"), new Gender(\"Male\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    new Email(\"irfan@example.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getTagSet(\"Halal\"), new Birthday(\"12-08-1975\"), new CurrentWeight(\"70\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                    new TargetWeight(\"75\"), new Height(\"180\"), new Remark(\"Requires protein\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getSportSet(\"Soccer\"), new UniqueExerciseList(), new PersonalBest(), irfanScheduleList),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            new Client(new Name(\"Roy Balakrishnan\"), new Gender(\"Male\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    new Email(\"royb@example.com\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getTagSet(\"Vegan\"), new Birthday(\"05-12-1990\"), new CurrentWeight(\"67.4\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                    new TargetWeight(\"75\"), new Height(\"174\"), new Remark(\"History of past injuries\"),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getSportSet(\"Belly Dance\"), new UniqueExerciseList(), new PersonalBest(), royScheduleList),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            new Client(new Name(\"Amy Ang\"), new Gender(\"Female\"), new Phone(\"97227128\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    new Email(\"amyyyy@example.com\"), new Address(\"Blk 90 Sunset Way, #20-18\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getTagSet(\"Normal\"), new Birthday(\"12-05-1970\"), new CurrentWeight(\"61.2\"),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                    new TargetWeight(\"60\"), new Height(\"165\"), new Remark(\"History of past injuries\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    getSportSet(\"Fencing\"), new UniqueExerciseList(), new PersonalBest(), amyScheduleList) };"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static ReadOnlyFitBiz getSampleFitBiz() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        FitBiz sampleAb \u003d new FitBiz();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        for (Client sampleClient : getSampleClients()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            sampleAb.addClient(sampleClient);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return Arrays.stream(strings).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Returns a sport set containing the list of strings given."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static Set\u003cSport\u003e getSportSet(String... strings) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                .map(Sport::new)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 8,
      "ziyingli": 1,
      "tohkerwei": 21,
      "Dban1": 4,
      "AaronCQL": 83,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/FitBizStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Represents a storage for {@link FitBiz}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public interface FitBizStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    Path getFitBizFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns FitBiz data as a {@link ReadOnlyFitBiz}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    Optional\u003cReadOnlyFitBiz\u003e readFitBiz() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @see #getFitBizFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    Optional\u003cReadOnlyFitBiz\u003e readFitBiz(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Saves the given {@link ReadOnlyFitBiz} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param fitBiz cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    void saveFitBiz(ReadOnlyFitBiz fitBiz) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @see #saveFitBiz(ReadOnlyFitBiz)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    void saveFitBiz(ReadOnlyFitBiz fitBiz, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6,
      "AaronCQL": 8,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedClient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Birthday;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.CurrentWeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.PersonalBest;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.TargetWeight;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Jackson-friendly version of {@link Client}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "class JsonAdaptedClient {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Client\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String birthday;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private final String height;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String targetWeight;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String currentWeight;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final List\u003cJsonAdaptedSport\u003e sports \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final List\u003cJsonAdaptedExercise\u003e exerciseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final List\u003cJsonAdaptedSchedule\u003e scheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Constructs a {@code JsonAdaptedClient} with the given client details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public JsonAdaptedClient(@JsonProperty(\"name\") String name, @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            @JsonProperty(\"address\") String address, @JsonProperty(\"birthday\") String birthday,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"currentWeight\") String currentWeight,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            @JsonProperty(\"targetWeight\") String targetWeight, @JsonProperty(\"height\") String height,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            @JsonProperty(\"remark\") String remark, @JsonProperty(\"sports\") List\u003cJsonAdaptedSport\u003e sports,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            @JsonProperty(\"exerciseList\") List\u003cJsonAdaptedExercise\u003e exerciseList,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            @JsonProperty(\"scheduleList\") List\u003cJsonAdaptedSchedule\u003e scheduleList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.currentWeight \u003d currentWeight;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.targetWeight \u003d targetWeight;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (sports !\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            this.sports.addAll(sports);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (exerciseList !\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            this.exerciseList.addAll(exerciseList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (scheduleList !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            this.scheduleList.addAll(scheduleList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Converts a given {@code Client} into this class for Jackson use."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public JsonAdaptedClient(Client source) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        gender \u003d source.getGender().value;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        birthday \u003d source.getBirthday().displayValue;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        height \u003d source.getHeight().value;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        currentWeight \u003d source.getCurrentWeight().value;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        targetWeight \u003d source.getTargetWeight().value;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        sports.addAll(source.getSports().stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                .map(JsonAdaptedSport::new)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        exerciseList.addAll(source.getExerciseList()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .map(JsonAdaptedExercise::new)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        scheduleList.addAll(source.getScheduleList().getArrayList().stream()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    .map(JsonAdaptedSchedule::new)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Converts this Jackson-friendly adapted client object into the model\u0027s"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code Client} object."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *                               the adapted client."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public Client toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        final List\u003cTag\u003e clientTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            clientTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(clientTags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final List\u003cSport\u003e clientSports \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (JsonAdaptedSport sport : sports) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            clientSports.add(sport.toModelType());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final Set\u003cSport\u003e modelSport \u003d new HashSet\u003c\u003e(clientSports);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final UniqueExerciseList modelExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (JsonAdaptedExercise ex : exerciseList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            modelExerciseList.add(ex.toModelType());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        modelExerciseList.sortByExerciseDateAndName(); // do a sanity presort to ensure initial list is sorted"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        final PersonalBest modelPersonalBest \u003d new PersonalBest();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final ScheduleList modelScheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        for (JsonAdaptedSchedule schedule : scheduleList) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            modelScheduleList.add(schedule.toModelType());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (birthday \u003d\u003d null) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Birthday.class.getSimpleName()));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!Birthday.isValidBirthday(birthday)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(Birthday.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final Birthday modelBirthday \u003d new Birthday(birthday);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (height \u003d\u003d null) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Height.class.getSimpleName()));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        if (!Height.isValidHeight(height)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(Height.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        final Height modelHeight \u003d new Height(height);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (currentWeight \u003d\u003d null) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, CurrentWeight.class.getSimpleName()));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!CurrentWeight.isValidWeight(currentWeight)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(CurrentWeight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final CurrentWeight modelCurrentWeight \u003d new CurrentWeight(currentWeight);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (targetWeight \u003d\u003d null) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, TargetWeight.class.getSimpleName()));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!TargetWeight.isValidWeight(targetWeight)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(TargetWeight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final TargetWeight modelTargetWeight \u003d new TargetWeight(targetWeight);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new Client(modelName, modelGender, modelPhone, modelEmail, modelAddress, modelTags, modelBirthday,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                modelCurrentWeight, modelTargetWeight, modelHeight, modelRemark, modelSport, modelExerciseList,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                modelPersonalBest, modelScheduleList);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 19,
      "ziyingli": 15,
      "tohkerwei": 16,
      "Dban1": 15,
      "AaronCQL": 83,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseSets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Jackson-friendly version of {@link Exercise}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "class JsonAdaptedExercise {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Exercise %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String exerciseName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String exerciseReps;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String exerciseSets;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String exerciseWeight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final String exerciseDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Constructs a {@code JsonAdaptedExercise} with the given {@code Exercise}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public JsonAdaptedExercise(@JsonProperty(\"exerciseName\") String exerciseName,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            @JsonProperty(\"exerciseReps\") String exerciseReps, @JsonProperty(\"exerciseSets\") String exerciseSets,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            @JsonProperty(\"exerciseWeight\") String exerciseWeight, @JsonProperty(\"exerciseDate\") String exerciseDate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.exerciseName \u003d exerciseName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.exerciseReps \u003d exerciseReps;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.exerciseSets \u003d exerciseSets;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.exerciseWeight \u003d exerciseWeight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.exerciseDate \u003d exerciseDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Converts a given {@code Exercise} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public JsonAdaptedExercise(Exercise source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        exerciseName \u003d source.getExerciseName().value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseReps \u003d source.getExerciseReps().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseSets \u003d source.getExerciseSets().value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        exerciseWeight \u003d source.getExerciseWeight().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseDate \u003d source.getExerciseDate().displayValue;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Converts this Jackson-friendly adapted exercise object into the model\u0027s"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code Exercise} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     *                               the adapted exercise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Exercise toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (exerciseName \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ExerciseName.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!ExerciseName.isValidExerciseName(exerciseName)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final ExerciseName modelExerciseName \u003d new ExerciseName(exerciseName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (exerciseReps \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ExerciseReps.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!ExerciseReps.isValidExerciseReps(exerciseReps)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(ExerciseReps.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final ExerciseReps modelExerciseReps \u003d new ExerciseReps(exerciseReps);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (exerciseSets \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ExerciseSets.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!ExerciseSets.isValidExerciseSets(exerciseSets)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(ExerciseSets.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final ExerciseSets modelExerciseSets \u003d new ExerciseSets(exerciseSets);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (exerciseWeight \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ExerciseWeight.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!ExerciseWeight.isValidExerciseWeight(exerciseWeight)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(ExerciseWeight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final ExerciseWeight modelExerciseWeight \u003d new ExerciseWeight(exerciseWeight);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (exerciseDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ExerciseDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!ExerciseDate.isValidExerciseDate(exerciseDate)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(ExerciseDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        final ExerciseDate modelExerciseDate \u003d new ExerciseDate(exerciseDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new Exercise(modelExerciseName, modelExerciseReps, modelExerciseSets, modelExerciseWeight,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                modelExerciseDate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 3,
      "AaronCQL": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Day;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.EndTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.StartTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Jackson-friendly version of {@link Schedule}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "class JsonAdaptedSchedule {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Schedule %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final String clientName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Constructs a {@code JsonAdaptedSchedule} with the given {@code Schedule}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public JsonAdaptedSchedule(@JsonProperty(\"day\") String day, @JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            @JsonProperty(\"endTime\") String endTime, @JsonProperty(\"clientName\") String clientName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.clientName \u003d clientName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Converts a given {@code Schedule} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public JsonAdaptedSchedule(Schedule source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        day \u003d source.getDay().value.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        startTime \u003d source.getStartTime().getTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        endTime \u003d source.getEndTime().getTime();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clientName \u003d source.getClientName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Converts this Jackson-friendly adapted schedule object into the model\u0027s"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * {@code Schedule} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *                               the adapted schedule."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public Schedule toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (day \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!Day.isValidDay(day)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        final Day modelDay \u003d new Day(day);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, StartTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!StartTime.isValidTimingFormat(startTime)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            throw new IllegalValueException(StartTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        final StartTime modelStartTime \u003d new StartTime(startTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, EndTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!EndTime.isValidTimingFormat(endTime)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            throw new IllegalValueException(EndTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        final EndTime modelEndTime \u003d new EndTime(endTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (clientName \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        final String modelClientName \u003d clientName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Schedule schedule \u003d new Schedule(modelDay, modelStartTime, modelEndTime);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        schedule.assignClientName(modelClientName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 74,
      "Dban1": 13,
      "AaronCQL": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSport.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Jackson-friendly version of {@link Sport}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "class JsonAdaptedSport {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private final String sportName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Constructs a {@code JsonAdaptedSport} with the given {@code sportName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public JsonAdaptedSport(String sportName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        this.sportName \u003d sportName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Converts a given {@code Sport} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public JsonAdaptedSport(Sport source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        sportName \u003d source.sportName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public String getSportName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return sportName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Converts this Jackson-friendly adapted sport object into the model\u0027s {@code Sport} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted sport."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public Sport toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!Sport.isValidSport(sportName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            throw new IllegalValueException(Sport.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return new Sport(sportName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonFitBizStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * A class to access FitBiz data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class JsonFitBizStorage implements FitBizStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFitBizStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public JsonFitBizStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Path getFitBizFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Optional\u003cReadOnlyFitBiz\u003e readFitBiz() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return readFitBiz(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Similar to {@link #readFitBiz()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Optional\u003cReadOnlyFitBiz\u003e readFitBiz(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Optional\u003cJsonSerializableFitBizStorage\u003e jsonFitBiz \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                filePath, JsonSerializableFitBizStorage.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (!jsonFitBiz.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            return Optional.of(jsonFitBiz.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void saveFitBiz(ReadOnlyFitBiz fitBiz) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        saveFitBiz(fitBiz, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Similar to {@link #saveFitBiz(ReadOnlyFitBiz)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void saveFitBiz(ReadOnlyFitBiz fitBiz, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(fitBiz);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFitBizStorage(fitBiz), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 12,
      "AaronCQL": 8,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableFitBizStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * An Immutable FitBiz that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "@JsonRootName(value \u003d \"fitbiz\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "class JsonSerializableFitBizStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"Clients list contains duplicate client(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final List\u003cJsonAdaptedClient\u003e clients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Constructs a {@code JsonSerializableFitBizStorage} with the given clients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public JsonSerializableFitBizStorage(@JsonProperty(\"clients\") List\u003cJsonAdaptedClient\u003e clients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.clients.addAll(clients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Converts a given {@code ReadOnlyFitBiz} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFitBizStorage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public JsonSerializableFitBizStorage(ReadOnlyFitBiz source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clients.addAll(source.getClientList().stream().map(JsonAdaptedClient::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Converts this FitBiz into the model\u0027s {@code FitBiz} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public FitBiz toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        FitBiz fitBiz \u003d new FitBiz();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        for (JsonAdaptedClient jsonAdaptedClient : clients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            Client client \u003d jsonAdaptedClient.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            if (fitBiz.hasClient(client)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            fitBiz.addClient(client);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return fitBiz;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 12,
      "Dban1": 8,
      "AaronCQL": 4,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public interface Storage extends FitBizStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    Path getFitBizFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    Optional\u003cReadOnlyFitBiz\u003e readFitBiz() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    void saveFitBiz(ReadOnlyFitBiz fitBiz) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 2,
      "AaronCQL": 3,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Manages storage of FitBiz data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private FitBizStorage fitBizStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public StorageManager(FitBizStorage fitBizStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.fitBizStorage \u003d fitBizStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FitBiz methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Path getFitBizFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return fitBizStorage.getFitBizFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Optional\u003cReadOnlyFitBiz\u003e readFitBiz() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return readFitBiz(fitBizStorage.getFitBizFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Optional\u003cReadOnlyFitBiz\u003e readFitBiz(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return fitBizStorage.readFitBiz(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void saveFitBiz(ReadOnlyFitBiz fitBiz) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        saveFitBiz(fitBiz, fitBizStorage.getFitBizFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void saveFitBiz(ReadOnlyFitBiz fitBiz, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        fitBizStorage.saveFitBiz(fitBiz, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 11,
      "AaronCQL": 5,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * An UI component that displays information of a {@code Client}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class ClientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final String FXML \u003d \"ClientListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public final Client client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label sports;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientCard(Client client, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        name.setText(client.getName().fullName + \" \" + client.buildBirthdayAndGender());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String phoneLabel \u003d \"Phone: \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String phoneAttributeForDisplay \u003d getAttributeForDisplay(client.getPhone().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String fullPhoneForDisplay \u003d phoneLabel + phoneAttributeForDisplay;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        phone.setText(fullPhoneForDisplay);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String emailLabel \u003d \"Email: \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String emailAttributeForDisplay \u003d getAttributeForDisplay(client.getEmail().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String fullEmailForDisplay \u003d emailLabel + emailAttributeForDisplay;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        email.setText(fullEmailForDisplay);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String addressLabel \u003d \"Address: \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String addressAttributeForDisplay \u003d getAttributeForDisplay(client.getAddress().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String fullAddressForDisplay \u003d addressLabel + addressAttributeForDisplay;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        address.setText(fullAddressForDisplay);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String sportsLabel \u003d \"Sports: \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String sportsAttributeForDisplay \u003d getAttributeForDisplay(client.getSportsString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String fullSportsForDisplay \u003d sportsLabel + sportsAttributeForDisplay;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        sports.setText(fullSportsForDisplay);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        client.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        if (!(other instanceof ClientCard)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ClientCard card \u003d (ClientCard) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                \u0026\u0026 client.equals(card.client);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private String getAttributeForDisplay(String string) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String emptyString \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return !string.equals(emptyString) ? string : \"-\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 17,
      "Dban1": 11,
      "AaronCQL": 11,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * Panel containing the list of clients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class ClientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final String FXML \u003d \"ClientListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ClientListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private ListView\u003cClient\u003e clientListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientListPanel(ObservableList\u003cClient\u003e clientList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clientListView.setItems(clientList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clientListView.setCellFactory(listView -\u003e new ClientListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Client} using a {@code ClientCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    class ClientListViewCell extends ListCell\u003cClient\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        protected void updateItem(Client client, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            super.updateItem(client, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            if (empty || client \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                setGraphic(new ClientCard(client, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * An UI component that displays detailed information of a {@code Client}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * For e.g. personal bests and age."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ClientView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String FXML \u003d \"ClientView.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * keywords in JavaFX. As a consequence, UI elements\u0027 variable names cannot be"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * set to such keywords or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *      issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Client client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label birthday;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label currentWeight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label targetWeight;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label height;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private FlowPane sports;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ClientView(Client client) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.client \u003d client;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        name.setText(client.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String genderLabel \u003d \"Gender: \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String genderAttributeForDisplay \u003d getAttributeForDisplay(client.getGender().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String fullGenderForDisplay \u003d genderLabel + genderAttributeForDisplay;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        gender.setText(fullGenderForDisplay);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String birthdayLabel \u003d \"Birthday: \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String birthdayAttributeForDisplay \u003d getAttributeForDisplay(client.getBirthdayString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String fullBirthdayForDisplay \u003d birthdayLabel + birthdayAttributeForDisplay;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        birthday.setText(fullBirthdayForDisplay);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String heightLabel \u003d \"Height: \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String heightAttributeForDisplay \u003d getAttributeForDisplay(client.getHeight().value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String fullHeightForDisplay \u003d heightLabel + heightAttributeForDisplay;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        height.setText(fullHeightForDisplay);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String currentWeightLabel \u003d \"Current Weight: \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String currentWeightAttributeForDisplay \u003d getAttributeForDisplay(client.getCurrentWeight().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String fullCurrentWeightForDisplay \u003d currentWeightLabel + currentWeightAttributeForDisplay;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        currentWeight.setText(fullCurrentWeightForDisplay);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String targetWeightLabel \u003d \"Target Weight: \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String targetWeightAttributeForDisplay \u003d getAttributeForDisplay(client.getTargetWeight().value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String fullTargetWeightForDisplay \u003d targetWeightLabel + targetWeightAttributeForDisplay;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        targetWeight.setText(fullTargetWeightForDisplay);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String remarkLabel \u003d \"Remark: \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String remarkAttributeForDisplay \u003d getAttributeForDisplay(client.getRemark().value);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String fullRemarkForDisplay \u003d remarkLabel + remarkAttributeForDisplay;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        remark.setText(fullRemarkForDisplay);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getClientInViewName() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return client.getName().fullName;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!(other instanceof ClientView)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ClientView card \u003d (ClientView) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return client.equals(card.client);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private String getAttributeForDisplay(String string) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String emptyString \u003d \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return !string.equals(emptyString) ? string : \"-\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ClientViewDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * An UI class which wraps {@code ClientView} and {@code ExerciseListTable}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * It is updated when the clientInView updates or changes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @author @yonggiee"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ClientViewDisplay {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ClientView clientView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ExerciseListTable exerciseListTable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private PersonalBestTable personalBestTable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ClientView getClientView() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return clientView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseListTable getExerciseListTable() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return exerciseListTable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public PersonalBestTable getPersonalBestTable() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return personalBestTable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public String getClientInViewName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return clientView.getClientInViewName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Updates the client in {@code ClientView}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void updateClientView(Client client) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(client);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.clientView \u003d new ClientView(client);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Updates the exercise list in {@code ExerciseListTable}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void updateExerciseListTable(ObservableList\u003cExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exerciseList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseListTable \u003d new ExerciseListTable(exerciseList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Updates the personal bests of client in {@code PersonalBestTable}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void updatePersonalBestTable(ObservableList\u003cExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        requireNonNull(exerciseList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.personalBestTable \u003d new PersonalBestTable(exerciseList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Updates the client to be shown on {@code ClientViewDisplay}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void update(Client client) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        updateClientView(client);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        updateExerciseListTable(client.getExerciseList().asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        updatePersonalBestTable(client.getPersonalBest().getPersonalBest());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.autocomplete.Autocomplete;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.autocomplete.AutocompleteResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.history.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error-text-field\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String SUCCESS_STYLE_CLASS \u003d \"success-text-field\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final CommandHistory commandHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final Autocomplete autoComplete;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Event handler for the \"up\" and \"down\" arrow key. Used for the command history"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * feature."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final EventHandler\u003cKeyEvent\u003e eventHandlerUpDownKeys \u003d new EventHandler\u003c\u003e() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void handle(KeyEvent ke) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (ke.getCode() \u003d\u003d KeyCode.UP) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                String prevCommand \u003d commandHistory.getPreviousCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                commandTextField.setText(prevCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                commandTextField.positionCaret(prevCommand.length());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else if (ke.getCode() \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                String nextCommand \u003d commandHistory.getNextCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                commandTextField.setText(nextCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                commandTextField.positionCaret(nextCommand.length());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Event handler the \"tab\" key. Used for the command autocomplete feature."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final EventHandler\u003cKeyEvent\u003e eventHandlerTabKey \u003d new EventHandler\u003c\u003e() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void handle(KeyEvent ke) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (ke.getCode() \u003d\u003d KeyCode.TAB) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                ke.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                AutocompleteResult result \u003d autoComplete.execute(commandTextField.getText(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                        commandTextField.getCaretPosition());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                String textToSet \u003d result.getTextToSet();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                String textToFeedback \u003d result.getTextToFeedback();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                Integer caretPositionToSet \u003d result.getCaretPositionToSet();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                if (textToSet !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    commandTextField.setText(textToSet);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                if (textToFeedback !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    resultDisplay.setFeedbackToUser(textToFeedback);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                if (caretPositionToSet !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    commandTextField.positionCaret(caretPositionToSet);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    };"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, ResultDisplay resultDisplay, CommandHistory commandHistory,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            Autocomplete autoComplete) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.resultDisplay \u003d resultDisplay;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.commandHistory \u003d commandHistory;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.autoComplete \u003d autoComplete;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // handles the up and down arrow keys for command history"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandTextField.setOnKeyPressed(eventHandlerUpDownKeys);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // handles the tab key for command autocomplete"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandTextField.addEventFilter(KeyEvent.KEY_PRESSED, eventHandlerTabKey);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String enteredCommand \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandHistory.addToHistory(enteredCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            commandExecutor.execute(enteredCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            setStyleToIndicateCommandStatus(SUCCESS_STYLE_CLASS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            setStyleToIndicateCommandStatus(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (styleClass.contains(SUCCESS_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            commandTextField.getStyleClass().remove(SUCCESS_STYLE_CLASS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the command box to {@code style} to indicate command status."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void setStyleToIndicateCommandStatus(String style) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        setStyleToDefault(); // clear all status styles first"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (styleClass.contains(style)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        styleClass.add(style);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 82,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExerciseListTable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * A UI component that displays exercises of a {@code Client} in a TableView."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseListTable extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String FXML \u003d \"ExerciseListTable.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * keywords in JavaFX. As a consequence, UI elements\u0027 variable names cannot be"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * set to such keywords or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *      issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableView\u003cExercise\u003e tableView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseSets;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseReps;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseWeight;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseListTable(ObservableList\u003cExercise\u003e e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        id.setCellValueFactory(data -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            Exercise exercise \u003d data.getValue();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            int index \u003d e.indexOf(exercise) + 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new SimpleStringProperty(Integer.toString(index));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseName.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseName\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseDate.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseDate\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseSets.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseSets\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseReps.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseReps\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseWeight.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseWeight\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        tableView.setItems(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GraphWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.util.StringConverter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.graph.AxisType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Controller for a graph page"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @author yonggiee"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class GraphWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(GraphWindow.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String FXML \u003d \"GraphWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final List\u003cExercise\u003e graphList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final AxisType axisType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final String clientName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private XYChart.Series\u003cNumber, Number\u003e series;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private LineChart\u003cNumber, Number\u003e exerciseGraph;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private NumberAxis xAxis;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Creates a new GraphWindow."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private GraphWindow(Stage stage, List\u003cExercise\u003e graphList, AxisType axisType, String clientName) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        super(FXML, stage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.stage \u003d stage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.graphList \u003d graphList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.axisType \u003d axisType;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.clientName \u003d clientName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        fillSeries();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        setGraphName();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        formatDateLabels();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        addToGraph();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Creates a {@GraphWindow} with a list of exercises."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * The xAxis will always be date and the yAxis depends on the value"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * specified by {@AxisType}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static GraphWindow createNewGraph(List\u003cExercise\u003e graphList, AxisType axisType, String clientName) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new GraphWindow(stage, graphList, axisType, clientName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Adds data values depending on the {@code AxisType}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void fillSeries() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        switch (axisType) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case REPS:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            fillRepsSeries();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            yAxis.setLabel(\"Reps\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        case WEIGHT:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            fillWeightSeries();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            yAxis.setLabel(\"Weight\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Adds data values with Reps as yAxis to the series."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void fillRepsSeries() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        series \u003d new XYChart.Series\u003cNumber, Number\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        for (Exercise exercise : graphList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            Number plotDate \u003d getDateInNumberFormat(exercise);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            Number plotReps \u003d getRepsInNumberFormat(exercise);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            series.getData().add(new XYChart.Data\u003cNumber, Number\u003e(plotDate, plotReps));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Adds data values with Weight as yAxis to the series."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void fillWeightSeries() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        series \u003d new XYChart.Series\u003cNumber, Number\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        for (Exercise exercise : graphList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            Number plotDate \u003d getDateInNumberFormat(exercise);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            Number plotWeight \u003d getWeightInNumberFormat(exercise);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            series.getData().add(new XYChart.Data\u003cNumber, Number\u003e(plotDate, plotWeight));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Changes the xAxis labels from numbers to dates(dd-MM-yyyy)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void formatDateLabels() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        StringConverter\u003cNumber\u003e converter \u003d new NumberAxis.DefaultFormatter(xAxis) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            public String toString(Number object) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                LocalDate date \u003d LocalDate.ofEpochDay(object.longValue());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                String formattedDate \u003d date.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                return formattedDate;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            public Number fromString(String string) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        };"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        xAxis.setTickLabelFormatter(converter);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void addToGraph() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseGraph.getData().add(series);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void setGraphName() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        series.setName(clientName + \" (\" + getExerciseName() + \")\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        stage.setTitle(clientName + \" (\" + getExerciseName() + \")\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private String getExerciseName() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise exercise \u003d graphList.get(0);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return exercise.getExerciseName().toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Shows the graph window."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cul\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cli\u003eif this method is called on a thread other"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               than the JavaFX Application Thread.\u003c/li\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cli\u003eif this method is called during animation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               or layout processing.\u003c/li\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cli\u003eif this method is called on the primary"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               stage.\u003c/li\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cli\u003eif {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        logger.fine(\"Showing graph.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns true if the graph window is currently being shown."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Hides the graph window."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Focuses on the graph window."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static Number getRepsInNumberFormat(Exercise exercise) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseReps reps \u003d exercise.getExerciseReps();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Number plotReps \u003d reps.convertToInt();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return plotReps;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static Number getWeightInNumberFormat(Exercise exercise) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseWeight weight \u003d exercise.getExerciseWeight();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Number plotWeight \u003d weight.convertToInt();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return plotWeight;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static Number getDateInNumberFormat(Exercise exercise) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseDate date \u003d exercise.getExerciseDate();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Number plotDate \u003d date.forPlot();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return plotDate;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 210
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://github.com/\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            + \"AY1920S2-CS2103T-F11-2/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cul\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cli\u003eif this method is called on a thread other"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               than the JavaFX Application Thread.\u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cli\u003eif this method is called during animation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               or layout processing.\u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cli\u003eif this method is called on the primary"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               stage.\u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *                               \u003cli\u003eif {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 8,
      "Dban1": 2,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.USER_GUIDE_URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String GOOGLE_FONT_URL \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            \"https://fonts.googleapis.com/css2?family\u003dOpen+Sans:\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        + \"wght@300;400;600;700;800\u0026family\u003dUbuntu+Mono\u0026display\u003dswap\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private ClientListPanel clientListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ClientViewDisplay clientViewDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private SchedulePanel schedulePanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private StackPane clientListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private StackPane clientViewPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private StackPane personalBestTablePlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private StackPane exerciseListTablePlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private StackPane schedulePanelPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // set the font"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        setFont(primaryStage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void setFont(Stage stage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Scene scene \u003d primaryStage.getScene();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        scene.getStylesheets().add(GOOGLE_FONT_URL);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666 is fixed in later version of"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * SDK."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will not"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * work when the focus is in them because the key event is consumed by the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * TextInputControl(s)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * help window purposely so to support accelerators even when focus is in"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clientListPanel \u003d new ClientListPanel(logic.getFilteredClientList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        clientListPanelPlaceholder.getChildren().add(clientListPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientViewDisplay \u003d new ClientViewDisplay();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        schedulePanel \u003d new SchedulePanel(logic.getScheduleDayList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        schedulePanelPlaceholder.getChildren().add(schedulePanel.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFitBizFilePath());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, resultDisplay,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                logic.getCommandHistory(), logic.getAutocomplete());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Opens FitBiz user guide in the user\u0027s default web browser."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        logic.openUrlInDefaultWebBrowser(USER_GUIDE_URL);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        resultDisplay.setFeedbackToUser(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Opens a graph with the requested information from {@code CommandResult}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void handleGraph(CommandResult commandResult) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String clientName \u003d clientViewDisplay.getClientInViewName();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        GraphWindow graphWindow \u003d GraphWindow.createNewGraph(commandResult.getGraphList(),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            commandResult.getAxisType(), clientName);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        graphWindow.show();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Removes UI elements from panels regarding {@code ClientInView}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggiee"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void clearClientInViewDisplay() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientViewPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseListTablePlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        personalBestTablePlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Adds UI elements to panels regarding {@code ClientInView}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggiee"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void addClientInViewDisplay() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ClientView clientView \u003d clientViewDisplay.getClientView();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientViewPanelPlaceholder.getChildren().add(clientView.getRoot());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ExerciseListTable exerciseListTable \u003d clientViewDisplay.getExerciseListTable();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseListTablePlaceholder.getChildren().add(exerciseListTable.getRoot());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        PersonalBestTable personalBestTable \u003d clientViewDisplay.getPersonalBestTable();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        personalBestTablePlaceholder.getChildren().add(personalBestTable.getRoot());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Updates {@code clientInView}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @author @yonggiee"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private void refreshClientInViewDisplay() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clearClientInViewDisplay();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (logic.hasClientInView()) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            clientViewDisplay.update(logic.getClientInView());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            addClientInViewDisplay();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Updates the SchedulePanel."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @author @Dban1"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private void refreshSchedulePanel() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        schedulePanel \u003d new SchedulePanel(logic.getScheduleDayList());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        schedulePanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        schedulePanelPlaceholder.getChildren().add(schedulePanel.getRoot());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            refreshClientInViewDisplay();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            if (commandResult.isOpenGraph()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                handleGraph(commandResult);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            refreshSchedulePanel();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 79,
      "Dban1": 21,
      "AaronCQL": 19,
      "-": 172
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonalBestTable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * A UI component that displays personal bests of each exercise of a {@code Client} in a TableView."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class PersonalBestTable extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String FXML \u003d \"PersonalBestTable.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * keywords in JavaFX. As a consequence, UI elements\u0027 variable names cannot be"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * set to such keywords or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *      issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableView\u003cExercise\u003e tableView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseWeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TableColumn\u003cExercise, String\u003e exerciseReps;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public PersonalBestTable(ObservableList\u003cExercise\u003e e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseName.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseName\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseDate.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseDate\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseWeight.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseWeight\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseReps.setCellValueFactory(new PropertyValueFactory\u003cExercise, String\u003e(\"exerciseReps\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        tableView.setItems(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ScheduleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleDay;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * An UI component that displays detailed information of a {@code Client}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ScheduleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String FXML \u003d \"ScheduleCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * keywords in JavaFX. As a consequence, UI elements\u0027 variable names cannot be"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * set to such keywords or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     *      issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public final ScheduleDay scheduleDay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private Label scheduleList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleCard(ScheduleDay scheduleDay) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.scheduleDay \u003d scheduleDay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        name.setText(scheduleDay.getDayName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleList.setText(scheduleDay.getDayScheduleString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleList.setPrefWidth(200);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleList.setPrefHeight(20 + scheduleDay.getNumberOfSchedules() * 20);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        cardPane.setPrefHeight(45 + scheduleDay.getNumberOfSchedules() * 20);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        if (!(other instanceof ScheduleCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ScheduleCard card \u003d (ScheduleCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return scheduleDay.equals(card.scheduleDay);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 49,
      "Dban1": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SchedulePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleDay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Panel containing the schedule panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class SchedulePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String FXML \u003d \"SchedulePanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SchedulePanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private ListView\u003cScheduleDay\u003e schedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public SchedulePanel(ObservableList\u003cScheduleDay\u003e scheduleDayList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        schedule.setItems(scheduleDayList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        schedule.setCellFactory(listView -\u003e new ScheduleCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Client} using"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * a {@code ClientCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    class ScheduleCell extends ListCell\u003cScheduleDay\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        protected void updateItem(ScheduleDay scheduleDay, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            super.updateItem(scheduleDay, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            if (empty || scheduleDay \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                setGraphic(new ScheduleCard(scheduleDay).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 38,
      "Dban1": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/logo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/ClientListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"list-name-label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"list-name-label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"list-attributes-label\" text\u003d\"\\$phone\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"list-attributes-label\" text\u003d\"\\$email\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"list-attributes-label\" text\u003d\"\\$address\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      \u003cLabel fx:id\u003d\"sports\" styleClass\u003d\"list-attributes-label\" text\u003d\"\\$sports\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6,
      "AaronCQL": 7,
      "-": 28
    }
  },
  {
    "path": "src/main/resources/view/ClientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "  \u003cListView fx:id\u003d\"clientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "AaronCQL": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/ClientView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" ?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.geometry.Insets ?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.control.Label ?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane ?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints ?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane ?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane ?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox ?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints ?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox ?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cScrollPane id\u003d\"clientView\" fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "      \u003cGridPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"view-name-label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"view-attributes-label\" text\u003d\"\\$gender\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cLabel fx:id\u003d\"birthday\" styleClass\u003d\"view-attributes-label\" text\u003d\"\\$birthday\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cLabel fx:id\u003d\"height\" styleClass\u003d\"view-attributes-label\" text\u003d\"\\$height\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cLabel fx:id\u003d\"currentWeight\" styleClass\u003d\"view-attributes-label\" text\u003d\"\\$currentWeight\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cLabel fx:id\u003d\"targetWeight\" styleClass\u003d\"view-attributes-label\" text\u003d\"\\$targetWeight\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"view-attributes-label\" text\u003d\"\\$remark\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cFlowPane fx:id\u003d\"sports\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 46,
      "Dban1": 1,
      "AaronCQL": 1
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/ExerciseListTable.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cTableView fx:id\u003d\"tableView\" prefHeight\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003ccolumns\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"id\" editable\u003d\"false\" maxWidth\u003d\"30.0\" minWidth\u003d\"30.0\" prefWidth\u003d\"30.0\" reorderable\u003d\"false\" resizable\u003d\"false\" text\u003d\"#\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseDate\" editable\u003d\"false\" maxWidth\u003d\"100.0\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" reorderable\u003d\"false\" resizable\u003d\"false\" text\u003d\"Date\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseName\" editable\u003d\"false\" minWidth\u003d\"100.0\" prefWidth\u003d\"200.0\" reorderable\u003d\"false\" text\u003d\"Exercise\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseReps\" editable\u003d\"false\" maxWidth\u003d\"75.0\" minWidth\u003d\"75.0\" prefWidth\u003d\"75.0\" reorderable\u003d\"false\" resizable\u003d\"false\" text\u003d\"Reps\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseWeight\" editable\u003d\"false\" maxWidth\u003d\"75.0\" minWidth\u003d\"75.0\" prefWidth\u003d\"75.0\" reorderable\u003d\"false\" resizable\u003d\"false\" text\u003d\"Weight\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseSets\" editable\u003d\"false\" maxWidth\u003d\"75.0\" minWidth\u003d\"75.0\" prefWidth\u003d\"75.0\" reorderable\u003d\"false\" resizable\u003d\"false\" text\u003d\"Sets\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003c/columns\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "   \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "      \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "   \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c/TableView\u003e"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 17,
      "AaronCQL": 1
    }
  },
  {
    "path": "src/main/resources/view/GraphWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cfx:root minHeight\u003d\"200.0\" minWidth\u003d\"200.0\" resizable\u003d\"True\" title\u003d\"Graph\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "      \u003cAnchorPane prefHeight\u003d\"508.0\" prefWidth\u003d\"593.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "          \u003cLineChart fx:id\u003d\"exerciseGraph\" layoutX\u003d\"39.0\" layoutY\u003d\"48.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"511.0\" styleClass\u003d\"chart-series-line\" stylesheets\u003d\"@DarkTheme.css\" AnchorPane.bottomAnchor\u003d\"50.0\" AnchorPane.leftAnchor\u003d\"50.0\" AnchorPane.rightAnchor\u003d\"50.0\" AnchorPane.topAnchor\u003d\"50.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cxAxis\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003cNumberAxis forceZeroInRange\u003d\"false\" label\u003d\"Date\" fx:id\u003d\"xAxis\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cyAxis\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003cNumberAxis fx:id\u003d\"yAxis\" side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "          \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 27,
      "AaronCQL": 5
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cfx:root minHeight\u003d\"800\" minWidth\u003d\"1000.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"FitBiz\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    \u003cImage url\u003d\"@/images/logo.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "      \u003cVBox prefHeight\u003d\"600.0\" prefWidth\u003d\"950.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" prefWidth\u003d\"310.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \u003cHBox prefHeight\u003d\"557.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            \u003cVBox fx:id\u003d\"clientList\" maxWidth\u003d\"400.0\" minWidth\u003d\"250.0\" prefHeight\u003d\"455.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u003cStackPane fx:id\u003d\"clientListPanelPlaceholder\" prefHeight\u003d\"433.0\" prefWidth\u003d\"335.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            \u003cVBox maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"500.0\" prefHeight\u003d\"455.0\" prefWidth\u003d\"650.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                \u003cHBox spacing\u003d\"10\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"clientViewPanelPlaceholder\" minHeight\u003d\"200.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"personalBestTablePlaceholder\" minHeight\u003d\"200.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u003cStackPane fx:id\u003d\"exerciseListTablePlaceholder\" layoutX\u003d\"21.0\" layoutY\u003d\"21.0\" minHeight\u003d\"300.0\" styleClass\u003d\"pane-with-no-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003cVBox fx:id\u003d\"schedule\" layoutX\u003d\"560.0\" layoutY\u003d\"10.0\" maxWidth\u003d\"300.0\" minWidth\u003d\"240.0\" prefWidth\u003d\"240.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                \u003cStackPane fx:id\u003d\"schedulePanelPlaceholder\" minWidth\u003d\"220.0\" prefWidth\u003d\"220.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" prefWidth\u003d\"608.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 38,
      "AaronCQL": 9,
      "-": 46
    }
  },
  {
    "path": "src/main/resources/view/PersonalBestTable.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" ?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn ?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.control.TableView ?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cTableView fx:id\u003d\"tableView\" prefHeight\u003d\"200.0\" prefWidth\u003d\"250.0\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003ccolumns\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseName\" editable\u003d\"false\" minWidth\u003d\"200.0\" prefWidth\u003d\"200.0\" reorderable\u003d\"false\" text\u003d\"Personal Best Exercise\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseDate\" editable\u003d\"false\" maxWidth\u003d\"150.0\" minWidth\u003d\"85.0\" prefWidth\u003d\"85.0\" reorderable\u003d\"false\" resizable\u003d\"false\" text\u003d\"Date\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseReps\" editable\u003d\"false\" maxWidth\u003d\"100.0\" minWidth\u003d\"65.0\" prefWidth\u003d\"65.0\" reorderable\u003d\"false\" resizable\u003d\"false\" text\u003d\"Reps\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"exerciseWeight\" editable\u003d\"false\" maxWidth\u003d\"100.0\" minWidth\u003d\"65.0\" prefWidth\u003d\"65.0\" reorderable\u003d\"false\" resizable\u003d\"false\" text\u003d\"Weight\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003c/columns\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c/TableView\u003e"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 15,
      "AaronCQL": 3
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "  xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ScheduleCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003c?import javafx.scene.effect.Glow?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"107.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "   xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "   xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "   \u003cAnchorPane prefHeight\u003d\"85.0\" prefWidth\u003d\"140.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "         \u003cLabel fx:id\u003d\"name\" maxHeight\u003d\"30.0\" prefHeight\u003d\"20.0\" prefWidth\u003d\"64.0\" styleClass\u003d\"list-name-label\" text\u003d\"\\$first\" AnchorPane.leftAnchor\u003d\"3.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "         \u003cLabel fx:id\u003d\"scheduleList\" alignment\u003d\"TOP_LEFT\" maxHeight\u003d\"999.0\" maxWidth\u003d\"180.0\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"20.0\" prefWidth\u003d\"180.0\" styleClass\u003d\"list-attributes-label\" text\u003d\"\\$scheduleList\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "   \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6,
      "Dban1": 7,
      "AaronCQL": 5
    }
  },
  {
    "path": "src/main/resources/view/SchedulePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "  \u003cListView fx:id\u003d\"schedule\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 7,
      "AaronCQL": 1
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        final Index fifthClientIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(fifthClientIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(fifthClientIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(fifthClientIndex.equals(fifthClientIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(fifthClientIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(fifthClientIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(fifthClientIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/trie/NodeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.commons.trie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class NodeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final char VALID_CHAR_1 \u003d \u0027a\u0027;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final char VALID_CHAR_2 \u003d \u0027b\u0027;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor_nullParent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Node(VALID_CHAR_1, null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void isRoot_rootNode_returnsTrue() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node root \u003d new Node();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(true, root.isRoot());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void isRoot_childNode_returnsFalse() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node root \u003d new Node();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node child \u003d new Node(VALID_CHAR_1, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(false, child.isRoot());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasSingleChild_oneChild_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node root \u003d new Node();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node child \u003d new Node(VALID_CHAR_1, root);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        root.addChild(child);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(true, root.hasSingleChild());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasSingleChild_multipleChilds_returnsFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node root \u003d new Node();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node child1 \u003d new Node(VALID_CHAR_1, root);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node child2 \u003d new Node(VALID_CHAR_2, child1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        root.addChild(child1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        root.addChild(child2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(false, root.hasSingleChild());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getSingleChild_oneChild_returnsCorrectChild() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node root \u003d new Node();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node child1 \u003d new Node(VALID_CHAR_1, root);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        root.addChild(child1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(child1, root.getSingleChild());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getSingleChild_multipleChilds_throwsAssertionError() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node root \u003d new Node();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node child1 \u003d new Node(VALID_CHAR_1, root);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Node child2 \u003d new Node(VALID_CHAR_2, child1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        root.addChild(child1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        root.addChild(child2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e root.getSingleChild());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/trie/SimilarWordsResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.commons.trie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class SimilarWordsResultTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String EMPTY_WORD \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final ArrayList\u003cString\u003e EMPTY_WORD_LIST \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final SimilarWordsResult EMPTY_WORD_RESULT \u003d new SimilarWordsResult(EMPTY_WORD, EMPTY_WORD_LIST);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String SINGLE_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final ArrayList\u003cString\u003e SINGLE_WORD_LIST \u003d new ArrayList\u003c\u003e(List.of(SINGLE_WORD));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final SimilarWordsResult SINGLE_WORD_RESULT \u003d new SimilarWordsResult(SINGLE_WORD, SINGLE_WORD_LIST);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String WORD_1 \u003d \"exit\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String WORD_2 \u003d \"edit-e\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String WORD_3 \u003d \"edit-c\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String LONGEST_COMMON_PREFIX \u003d \"e\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final ArrayList\u003cString\u003e MULTIPLE_WORD_LIST \u003d new ArrayList\u003c\u003e(List.of(WORD_1, WORD_2, WORD_3));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final SimilarWordsResult MULTIPLE_WORD_RESULT \u003d new SimilarWordsResult(LONGEST_COMMON_PREFIX,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            MULTIPLE_WORD_LIST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String nullString \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ArrayList\u003cString\u003e nullList \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String validString \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ArrayList\u003cString\u003e validList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SimilarWordsResult(nullString, validList));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SimilarWordsResult(validString, nullList));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertDoesNotThrow(() -\u003e new SimilarWordsResult(validString, validList));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasNoResult_onEmptyResult_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(EMPTY_WORD_RESULT.hasNoResult());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasNoResult_onNonEmptyResult_returnsFalse() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(SINGLE_WORD_RESULT.hasNoResult());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(MULTIPLE_WORD_RESULT.hasNoResult());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasOnlyOneWord_onSingleWordResult_returnsTrue() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(SINGLE_WORD_RESULT.hasOnlyOneWord());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasOnlyOneWord_onNonSingleWordResult_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(EMPTY_WORD_RESULT.hasOnlyOneWord());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(MULTIPLE_WORD_RESULT.hasOnlyOneWord());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getSingleWord_onSingleWordResult_returnsCorrectString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(SINGLE_WORD_RESULT.getSingleWord(), SINGLE_WORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getSingleWord_onNonSingleWordResult_throwsAssertionError() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e EMPTY_WORD_RESULT.getSingleWord());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e MULTIPLE_WORD_RESULT.getSingleWord());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/trie/TrieTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.commons.trie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class TrieTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String SEARCH_STRING \u003d \"he\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_WORD_1 \u003d \"hello\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_WORD_2 \u003d \"help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_WORD_3 \u003d \"helm\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String LONGEST_PREFIX_1_AND_2 \u003d \"hel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Trie trie \u003d new Trie();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertNotNull(trie);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void insert_nonNullString_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Trie trie \u003d new Trie();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertDoesNotThrow(() -\u003e trie.insert(VALID_WORD_1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertDoesNotThrow(() -\u003e trie.insert(VALID_WORD_2));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertDoesNotThrow(() -\u003e trie.insert(VALID_WORD_3));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void insert_nullString_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Trie trie \u003d new Trie();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e trie.insert(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void listAllSimilarWords_oneWordTrie_returnsCorrectLongestPrefix() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Trie trie \u003d new Trie();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(VALID_WORD_1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        SimilarWordsResult result \u003d trie.listAllSimilarWords(SEARCH_STRING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(VALID_WORD_1, result.longestPrefixString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void listAllSimilarWords_multipleWordsTrie_returnsCorrectLongestPrefix() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Trie trie \u003d new Trie();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(VALID_WORD_1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(VALID_WORD_2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        trie.insert(VALID_WORD_3);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        SimilarWordsResult result \u003d trie.listAllSimilarWords(SEARCH_STRING);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(LONGEST_PREFIX_1_AND_2, result.longestPrefixString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void listAllSimilarWords_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Trie trie \u003d new Trie();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e trie.listAllSimilarWords(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/logo.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.storage.JsonFitBizStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonFitBizStorage fitBizStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new JsonFitBizStorage(temporaryFolder.resolve(\"fitbiz.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        StorageManager storage \u003d new StorageManager(fitBizStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String deleteCommand \u003d \"delete-c 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // Setup LogicManager with JsonFitBizIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonFitBizStorage fitBizStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new JsonFitBizIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionFitBiz.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        StorageManager storage \u003d new StorageManager(fitBizStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.addClient(expectedClient);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredClientList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static class JsonFitBizIoExceptionThrowingStub extends JsonFitBizStorage {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        private JsonFitBizIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void saveFitBiz(ReadOnlyFitBiz fitBiz, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 4,
      "Dban1": 9,
      "AaronCQL": 11,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/autocomplete/AutocompleteResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class AutocompleteResultTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor_nullValues_doesNotThrow() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // since null is used to indicate whether the member is present or not, this should not throw any errors"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertDoesNotThrow(() -\u003e new AutocompleteResult(null, null, null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/autocomplete/AutocompleteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.GraphCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class AutocompleteTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"add-c\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String ADD_COMMAND \u003d \"add-c\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int ADD_CURRENT_CARET_POSITION \u003d 5;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int ADD_CARET_POSITION_TO_SET \u003d 8; // index right after the \"/\" in \"n/\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String ADD_FEEDBACK_TO_SET \u003d AddCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String ADD_COMMAND_TO_SET \u003d \"add-c n/ p/ e/ a/ g/ b/ cw/ tw/ h/ r/ s/ t/\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"add-e\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String ADD_EXERCISE_COMMAND \u003d \"add-e\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int ADD_EXERCISE_CURRENT_CARET_POSITION \u003d 5;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int ADD_EXERCISE_CARET_POSITION_TO_SET \u003d 8; // index right after the \"/\" in \"n/\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String ADD_EXERCISE_FEEDBACK_TO_SET \u003d AddExerciseCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String ADD_EXERCISE_COMMAND_TO_SET \u003d \"add-e n/ d/ reps/ ew/ sets/\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"clear\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String CLEAR_COMMAND \u003d \"clear\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int CLEAR_CURRENT_CARET_POSITION \u003d 5;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int CLEAR_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String CLEAR_FEEDBACK_TO_SET \u003d ClearCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String CLEAR_COMMAND_TO_SET \u003d \"clear\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"delete-c\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String DELETE_COMMAND \u003d \"delete-c\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int DELETE_CURRENT_CARET_POSITION \u003d 8;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int DELETE_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String DELETE_FEEDBACK_TO_SET \u003d DeleteCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String DELETE_COMMAND_TO_SET \u003d \"delete-c \"; // extra preamble white space"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"delete-e\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String DELETE_EXERCISE_COMMAND \u003d \"delete-e\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int DELETE_EXERCISE_CURRENT_CARET_POSITION \u003d 8;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int DELETE_EXERCISE_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String DELETE_EXERCISE_FEEDBACK_TO_SET \u003d DeleteExerciseCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String DELETE_EXERCISE_COMMAND_TO_SET \u003d \"delete-e \"; // extra preamble white space"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"edit-c\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EDIT_COMMAND \u003d \"edit-c\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int EDIT_CURRENT_CARET_POSITION \u003d 6;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int EDIT_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EDIT_FEEDBACK_TO_SET \u003d EditCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EDIT_COMMAND_TO_SET \u003d \"edit-c \"; // extra preamble white space"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"edit-e\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EDIT_EXERCISE_COMMAND \u003d \"edit-e\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int EDIT_EXERCISE_CURRENT_CARET_POSITION \u003d 6;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int EDIT_EXERCISE_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EDIT_EXERCISE_FEEDBACK_TO_SET \u003d EditExerciseCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EDIT_EXERCISE_COMMAND_TO_SET \u003d \"edit-e \"; // extra preamble white space"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"exit\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EXIT_COMMAND \u003d \"exi\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int EXIT_CURRENT_CARET_POSITION \u003d 3;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int EXIT_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EXIT_FEEDBACK_TO_SET \u003d ExitCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EXIT_COMMAND_TO_SET \u003d \"exit\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"export\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EXPORT_COMMAND \u003d \"exp\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int EXPORT_CURRENT_CARET_POSITION \u003d 3;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int EXPORT_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EXPORT_FEEDBACK_TO_SET \u003d ExportCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EXPORT_COMMAND_TO_SET \u003d \"export\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"filter-c\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FILTER_COMMAND \u003d \"filt\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int FILTER_CURRENT_CARET_POSITION \u003d 4;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int FILTER_CARET_POSITION_TO_SET \u003d 11; // index right after the \"/\" in \"t/\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FILTER_FEEDBACK_TO_SET \u003d FilterCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FILTER_COMMAND_TO_SET \u003d \"filter-c t/ s/\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"find-c\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FIND_COMMAND \u003d \"fin\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int FIND_CURRENT_CARET_POSITION \u003d 3;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int FIND_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FIND_FEEDBACK_TO_SET \u003d FindCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String FIND_COMMAND_TO_SET \u003d \"find-c \"; // extra preamble white space"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"graph\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String GRAPH_COMMAND \u003d \"gra\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int GRAPH_CURRENT_CARET_POSITION \u003d 3;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int GRAPH_CARET_POSITION_TO_SET \u003d 8; // index right after the \"/\" in \"n/\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String GRAPH_FEEDBACK_TO_SET \u003d GraphCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String GRAPH_COMMAND_TO_SET \u003d \"graph n/ a/ sd/ ed/\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"help\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String HELP_COMMAND \u003d \"hel\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int HELP_CURRENT_CARET_POSITION \u003d 3;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int HELP_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String HELP_FEEDBACK_TO_SET \u003d HelpCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String HELP_COMMAND_TO_SET \u003d \"help\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"list-c\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String LIST_COMMAND \u003d \"lis\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int LIST_CURRENT_CARET_POSITION \u003d 3;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int LIST_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String LIST_FEEDBACK_TO_SET \u003d ListCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String LIST_COMMAND_TO_SET \u003d \"list-c\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"schedule\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String SCHEDULE_COMMAND \u003d \"sch\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int SCHEDULE_CURRENT_CARET_POSITION \u003d 3;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int SCHEDULE_CARET_POSITION_TO_SET \u003d 9; // index just after first white space"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String SCHEDULE_FEEDBACK_TO_SET \u003d ScheduleCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String SCHEDULE_COMMAND_TO_SET \u003d \"schedule  sch/\"; // extra preamble white space"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Unambiguous command: \"view-c\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VIEW_COMMAND \u003d \"vie\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int VIEW_CURRENT_CARET_POSITION \u003d 3;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int VIEW_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE; // index just after first white space"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VIEW_FEEDBACK_TO_SET \u003d ViewCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VIEW_COMMAND_TO_SET \u003d \"view-c \"; // extra preamble white space"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Ambiguous commands"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String AC_COMMAND \u003d \"a\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int AC_CURRENT_CARET_POSITION \u003d 1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int AC_CARET_POSITION_TO_SET \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String AC_FEEDBACK_TO_SET \u003d Autocomplete.FEEDBACK_MULTIPLE_COMMANDS + \"[add-e, add-c]\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String AC_COMMAND_TO_SET \u003d \"add-\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Invalid commands"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String IC_COMMAND \u003d \"FitBiz!!\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int IC_CURRENT_CARET_POSITION \u003d 8;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final Integer IC_CARET_POSITION_TO_SET \u003d null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String IC_FEEDBACK_TO_SET \u003d Autocomplete.FEEDBACK_NO_COMMANDS;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String IC_COMMAND_TO_SET \u003d null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Using tab while command is completed to go to next prefix for \"graph\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int GRAPH_FIRST_PREFIX_INDEX \u003d 8;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int GRAPH_SECOND_PREFIX_INDEX \u003d 11;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int GRAPH_THIRD_PREFIX_INDEX \u003d 15;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int GRAPH_LAST_PREFIX_INDEX \u003d 19;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // Using tab when command has white spaces and no \"/\" prefixes"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String WHITE_SPACES_WITHOUT_PREFIX \u003d \"export random things\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int WHITE_SPACES_WITHOUT_PREFIX_INDEX \u003d 20;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Autocomplete autoComplete \u003d new Autocomplete();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d START OF FITBIZ COMMAND TESTS"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_addCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(ADD_COMMAND, ADD_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(ADD_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(ADD_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(ADD_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_addExerciseCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(ADD_EXERCISE_COMMAND, ADD_EXERCISE_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(ADD_EXERCISE_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(ADD_EXERCISE_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(ADD_EXERCISE_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_clearCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(CLEAR_COMMAND, CLEAR_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(CLEAR_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(CLEAR_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(CLEAR_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_deleteCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(DELETE_COMMAND, DELETE_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(DELETE_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(DELETE_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(DELETE_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_deleteExerciseCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(DELETE_EXERCISE_COMMAND,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                DELETE_EXERCISE_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(DELETE_EXERCISE_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(DELETE_EXERCISE_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(DELETE_EXERCISE_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_editCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(EDIT_COMMAND, EDIT_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EDIT_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EDIT_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EDIT_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_editExerciseCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(EDIT_EXERCISE_COMMAND, EDIT_EXERCISE_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EDIT_EXERCISE_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EDIT_EXERCISE_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EDIT_EXERCISE_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_exitCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(EXIT_COMMAND, EXIT_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EXIT_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EXIT_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EXIT_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_exportCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(EXPORT_COMMAND, EXPORT_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EXPORT_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EXPORT_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(EXPORT_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_filterCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(FILTER_COMMAND, FILTER_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(FILTER_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(FILTER_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(FILTER_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_findCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(FIND_COMMAND, FIND_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(FIND_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(FIND_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(FIND_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_graphCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(GRAPH_COMMAND, GRAPH_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(GRAPH_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(GRAPH_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(GRAPH_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_helpCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(HELP_COMMAND, HELP_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(HELP_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(HELP_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(HELP_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_listCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(LIST_COMMAND, LIST_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(LIST_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(LIST_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(LIST_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_scheduleCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(SCHEDULE_COMMAND, SCHEDULE_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(SCHEDULE_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(SCHEDULE_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(SCHEDULE_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_viewCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(VIEW_COMMAND, VIEW_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(VIEW_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(VIEW_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(VIEW_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d END OF FITBIZ COMMAND TESTS"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_ambiguousCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(AC_COMMAND, AC_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(AC_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(AC_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(AC_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_invalidCommand_returnsCorrectAutocompleteResult() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(IC_COMMAND, IC_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(IC_COMMAND_TO_SET, result.getTextToSet());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(IC_CARET_POSITION_TO_SET, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(IC_FEEDBACK_TO_SET, result.getTextToFeedback());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_graphCommandAlreadyCompleted_returnsCorrectCaretPositions() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult firstResult \u003d autoComplete.execute(GRAPH_COMMAND, GRAPH_CURRENT_CARET_POSITION);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(GRAPH_FIRST_PREFIX_INDEX, firstResult.getCaretPositionToSet());"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult secondResult \u003d autoComplete.execute(GRAPH_COMMAND_TO_SET, GRAPH_FIRST_PREFIX_INDEX);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(GRAPH_SECOND_PREFIX_INDEX, secondResult.getCaretPositionToSet());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult thirdResult \u003d autoComplete.execute(GRAPH_COMMAND_TO_SET, GRAPH_SECOND_PREFIX_INDEX);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(GRAPH_THIRD_PREFIX_INDEX, thirdResult.getCaretPositionToSet());"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult lastResult \u003d autoComplete.execute(GRAPH_COMMAND_TO_SET, GRAPH_THIRD_PREFIX_INDEX);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(GRAPH_LAST_PREFIX_INDEX, lastResult.getCaretPositionToSet());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult wrapAroundResult \u003d autoComplete.execute(GRAPH_COMMAND_TO_SET, GRAPH_LAST_PREFIX_INDEX);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(GRAPH_FIRST_PREFIX_INDEX, wrapAroundResult.getCaretPositionToSet());"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_exportCommandAlreadyCompleted_returnsAllNullResults() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AutocompleteResult result \u003d autoComplete.execute(WHITE_SPACES_WITHOUT_PREFIX,"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                WHITE_SPACES_WITHOUT_PREFIX_INDEX);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(null, result.getTextToSet());"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(null, result.getCaretPositionToSet());"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(null, result.getTextToFeedback());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 359
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_newClient_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.addClient(validClient);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandSuccess(new AddCommand(validClient), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validClient), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_duplicateClient_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Client clientInList \u003d model.getFitBiz().getClientList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandFailure(new AddCommand(clientInList), model, AddCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 9,
      "AaronCQL": 5,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleDay;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void constructor_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_clientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ModelStubAcceptingClientAdded modelStub \u003d new ModelStubAcceptingClientAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validClient).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validClient), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(Arrays.asList(validClient), modelStub.clientsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_duplicateClient_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client validClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validClient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithClient(validClient);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_CLIENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client alice \u003d new ClientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client bob \u003d new ClientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public Path getFitBizFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void setFitBizFilePath(Path fitBizFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public void addClient(Client client) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public ReadOnlyFitBiz getFitBiz() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void setFitBiz(ReadOnlyFitBiz newData) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public void deleteClient(Client target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public void setClient(Client target, Client editedClient) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public ObservableList\u003cClient\u003e getFilteredClientList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public ObservableList\u003cScheduleDay\u003e getScheduleDayList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public Client getClientInView() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public void setClientInView(Client client) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void clearClientInView() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public boolean hasClientInView() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void updateClientViewIfApplicable(Client clientToEdit, Client editedClient) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void editExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public Client addExerciseToClient(Exercise exercise) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        public void deleteExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * A Model stub that contains a single client."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private class ModelStubWithClient extends ModelStub {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        private final Client client;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ModelStubWithClient(Client client) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            this.client \u003d client;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return this.client.isSameClient(client);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * A Model stub that always accept the client being added."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private class ModelStubAcceptingClientAdded extends ModelStub {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        final ArrayList\u003cClient\u003e clientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public boolean hasClient(Client client) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return clientsAdded.stream().anyMatch(client::isSameClient);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public void addClient(Client client) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            requireNonNull(client);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            clientsAdded.add(client);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        public ReadOnlyFitBiz getFitBiz() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            return new FitBiz();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 10,
      "Dban1": 47,
      "AaronCQL": 9,
      "-": 175
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddExerciseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code AddExerciseCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class AddExerciseCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Client clientInView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientInView \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddExerciseCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_exerciseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.setClientInView(clientInView);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Exercise newExercise \u003d new ExerciseBuilder().withExerciseName(\"Changed\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        CommandResult commandResult \u003d new AddExerciseCommand(newExercise).execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(String.format(AddExerciseCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            newExercise.getForOutput()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_noClientInView_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise exerciseToAdd \u003d clientInView.getExerciseList().getExercise(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AddExerciseCommand addExerciseCommand \u003d new AddExerciseCommand(exerciseToAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertCommandFailure(addExerciseCommand, model, AddExerciseCommand.MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_duplicateExercise_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model.setClientInView(clientInView);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Exercise exerciseToAdd \u003d clientInView.getExerciseList().getExercise(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AddExerciseCommand addExerciseCommand \u003d new AddExerciseCommand(exerciseToAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertCommandFailure(addExerciseCommand, model, AddExerciseCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Exercise exercise1 \u003d new ExerciseBuilder().withExerciseName(\"exercise1\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Exercise exercise2 \u003d new ExerciseBuilder().withExerciseName(\"exercise2\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AddExerciseCommand addCommand1 \u003d new AddExerciseCommand(exercise1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AddExerciseCommand addCommand2 \u003d new AddExerciseCommand(exercise2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(addCommand1.equals(addCommand1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        AddExerciseCommand copyAddCommand1 \u003d new AddExerciseCommand(exercise1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(addCommand1.equals(copyAddCommand1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(addCommand1.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(addCommand1.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(addCommand1.equals(addCommand2));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6,
      "AaronCQL": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_emptyFitBiz_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_nonEmptyFitBiz_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        expectedModel.setFitBiz(new FitBiz());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 1,
      "AaronCQL": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.Day;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.EndTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.StartTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String VALID_DAY_MON \u003d \"mon\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String VALID_TIME_START \u003d \"1200\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String VALID_TIME_END \u003d \"1400\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String DAY_DESC_MON \u003d \" \" + PREFIX_DAY + VALID_DAY_MON;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String TIME_DESC_START \u003d \" \" + PREFIX_START_TIME + VALID_TIME_START;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String TIME_DESC_END \u003d \" \" + PREFIX_END_TIME + VALID_TIME_END;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String SCHEDULE_DESC_MON \u003d \" \" + PREFIX_SCHEDULE + VALID_DAY_MON + \"-\" + VALID_TIME_START"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                            + \"-\" + VALID_TIME_END;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String INVALID_DAY_DESC \u003d \" \" + PREFIX_DAY + \"wrong123\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String INVALID_STARTTIME_DESC \u003d \" \" + PREFIX_START_TIME + \"asd123\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String INVALID_ENDTIME_DESC \u003d \" \" + PREFIX_START_TIME + \"bobobooooo\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Schedule VALID_SCHEDULE_ONE \u003d new Schedule(new Day(VALID_DAY_MON),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            new StartTime(VALID_TIME_START), new EndTime(VALID_TIME_END));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final EditCommand.EditClientDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final EditCommand.EditClientDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DESC_AMY \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DESC_BOB \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Convenience wrapper to"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * {@link #assertCommandSuccess(Command, Model, CommandResult, Model)} that"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * - the FitBiz, filtered client list and selected client in"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBiz expectedFitBiz \u003d new FitBiz(actualModel.getFitBiz());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        List\u003cClient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredClientList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(expectedFitBiz, actualModel.getFitBiz());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredClientList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the client at the given"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code targetIndex} in the {@code model}\u0027s FitBiz."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static void showClientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client client \u003d model.getFilteredClientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        final String[] splitName \u003d client.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.updateFilteredClientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(1, model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 14,
      "tohkerwei": 16,
      "Dban1": 22,
      "AaronCQL": 5,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.deleteClient(clientToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        showNoClient(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of FitBiz list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFitBiz().getClientList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_CLIENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private void showNoClient(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.updateFilteredClientList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(model.getFilteredClientList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 26,
      "AaronCQL": 7,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteExerciseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE_DELETED_EXERCISE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteExerciseCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @author @yonggiee"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class DeleteExerciseCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Client clientInView;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientInView \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void execute_noClientInView_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DeleteExerciseCommand deleteExerciseCommand \u003d new DeleteExerciseCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertCommandFailure(deleteExerciseCommand, model, DeleteExerciseCommand.MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.setClientInView(clientInView);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise exerciseToDelete \u003d clientInView.getExerciseList().getExercise(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DeleteExerciseCommand deleteExerciseCommand \u003d new DeleteExerciseCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteExerciseCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            exerciseToDelete.getForOutput());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client alice \u003d expectedModel.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedModel.setClient(alice, ALICE_DELETED_EXERCISE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedModel.setClientInView(ALICE_DELETED_EXERCISE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // ALICE_DELETED_EXERCISE have UniqueExerciseList with the exercise deleted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertCommandSuccess(deleteExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.setClientInView(clientInView);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(clientInView.getExerciseList().size() + 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DeleteExerciseCommand deleteExerciseCommand \u003d new DeleteExerciseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertCommandFailure(deleteExerciseCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DeleteExerciseCommand deleteFirstCommand \u003d new DeleteExerciseCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DeleteExerciseCommand deleteSecondCommand \u003d new DeleteExerciseCommand(INDEX_SECOND_EXERCISE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DeleteExerciseCommand deleteFirstCommandCopy \u003d new DeleteExerciseCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 97,
      "AaronCQL": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditClientDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class EditClientDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditClientDescriptor descriptorWithSameValues \u003d new EditClientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditClientDescriptor editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 9,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedClient \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(editedClient).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FitBiz(model.getFitBiz()), new UserPrefs(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ClientInView());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.setClient(model.getFilteredClientList().get(0), editedClient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index indexLastClient \u003d Index.fromOneBased(model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client lastClient \u003d model.getFilteredClientList().get(indexLastClient.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ClientBuilder clientInList \u003d new ClientBuilder(lastClient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedClient \u003d clientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastClient, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FitBiz(model.getFitBiz()), new UserPrefs(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ClientInView());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.setClient(lastClient, editedClient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, new EditCommand.EditClientDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedClient \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FitBiz(model.getFitBiz()), new UserPrefs(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ClientInView());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedClient \u003d new ClientBuilder(clientInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FitBiz(model.getFitBiz()), new UserPrefs(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new ClientInView());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.setClient(model.getFilteredClientList().get(0), editedClient);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_duplicateClientUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client firstClient \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(firstClient).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_CLIENT, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_duplicateClientFilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // edit client in filtered list into a duplicate in FitBiz"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Client clientInList \u003d model.getFitBiz().getClientList().get(INDEX_SECOND_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                new EditClientDescriptorBuilder(clientInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CLIENT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_invalidClientIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list, but"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * smaller than size of FitBiz"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_invalidClientIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of FitBiz list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFitBiz().getClientList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, DESC_AMY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand.EditClientDescriptor copyDescriptor \u003d new EditClientDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_CLIENT, copyDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_CLIENT, DESC_AMY)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_CLIENT, DESC_BOB)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 1,
      "Dban1": 52,
      "AaronCQL": 22,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditExerciseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.DESC_BENCH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.DESC_PUSHUP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * {@code EditExerciseCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @author @yonggiee"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class EditExerciseCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Client clientInView;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        clientInView \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void execute_noClientInView_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise editedExercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseCommand.EditExerciseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            new EditExerciseDescriptorBuilder(editedExercise).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseCommand editExerciseCommand \u003d new EditExerciseCommand(INDEX_FIRST_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertCommandFailure(editExerciseCommand, model, EditExerciseCommand.MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void execute_duplicateExerciseUnfilteredList_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.setClientInView(clientInView);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise firstExercise \u003d clientInView.getExerciseList().getExercise(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder(firstExercise).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseCommand editExerciseCommand \u003d new EditExerciseCommand(INDEX_SECOND_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertCommandFailure(editExerciseCommand, model, EditExerciseCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.setClientInView(clientInView);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise firstExercise \u003d clientInView.getExerciseList().getExercise(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d (new EditExerciseDescriptorBuilder(firstExercise))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseReps(\"20\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise editedExercise \u003d new ExerciseBuilder(firstExercise).withExerciseReps(\"20\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseCommand editExerciseCommand \u003d new EditExerciseCommand(INDEX_FIRST_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String expectedMessage \u003d String.format(EditExerciseCommand.MESSAGE_EDIT_EXERCISE_SUCCESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            editedExercise.getForOutput());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Client clientInViewExpected \u003d expectedModel.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedModel.setClientInView(clientInViewExpected);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise firstExerciseExpected \u003d clientInViewExpected.getExerciseList().getExercise(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedModel.editExercise(firstExerciseExpected, editedExercise);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertCommandSuccess(editExerciseCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        model.setClientInView(clientInView);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(clientInView.getExerciseList().size() + 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder(DESC_PUSHUP).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        EditExerciseCommand editExerciseCommand \u003d new EditExerciseCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertCommandFailure(editExerciseCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        final EditExerciseCommand standardCommand \u003d new EditExerciseCommand(INDEX_FIRST_EXERCISE, DESC_PUSHUP);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(standardCommand.equals(new EditExerciseCommand(INDEX_SECOND_EXERCISE, DESC_BENCH)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(standardCommand.equals(new EditExerciseCommand(INDEX_FIRST_EXERCISE, DESC_BENCH)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExerciseCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE_WEIGHT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REPS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SETS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * Contains helper methods for testing exerise commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseCommandTestUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_NAME_PUSHUP \u003d \"pushup\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_NAME_BENCH \u003d \"Bench Press\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_REPS_PUSHUP \u003d \"30\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_REPS_BENCH \u003d \"12\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_SETS_PUSHUP \u003d \"5\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_SETS_BENCH \u003d \"4\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_WEIGHT_PUSHUP \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_WEIGHT_BENCH \u003d \"100\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_DATE_PUSHUP \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        LocalDate.now().minusMonths(4).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String VALID_EXERCISE_DATE_BENCH \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        LocalDate.now().minusDays(1).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_NAME_DESC_PUSHUP \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_NAME + VALID_EXERCISE_NAME_PUSHUP;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_NAME_DESC_BENCH \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_NAME + VALID_EXERCISE_NAME_BENCH;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_REPS_DESC_PUSHUP \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_REPS + VALID_EXERCISE_REPS_PUSHUP;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_REPS_DESC_BENCH \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_REPS + VALID_EXERCISE_REPS_BENCH;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_SETS_DESC_PUSHUP \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_SETS + VALID_EXERCISE_SETS_PUSHUP;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_SETS_DESC_BENCH \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_SETS + VALID_EXERCISE_SETS_BENCH;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_WEIGHT_DESC_PUSHUP \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_EXERCISE_WEIGHT + VALID_EXERCISE_WEIGHT_PUSHUP;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_WEIGHT_DESC_BENCH \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_EXERCISE_WEIGHT + VALID_EXERCISE_WEIGHT_BENCH;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_DATE_DESC_PUSHUP \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_DATE + VALID_EXERCISE_DATE_PUSHUP;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String EXERCISE_DATE_DESC_BENCH \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_DATE + VALID_EXERCISE_DATE_BENCH;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String INVALID_EXERCISE_NAME_DESC \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_NAME + \"Pushup\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String INVALID_EXERCISE_REPS_DESC \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_REPS + \"91a\"; // \u0027a\u0027 not allowed in reps"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String INVALID_EXERCISE_SETS_DESC \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_SETS + \"21a9\"; // \u0027a\u0027 not allowed in sets"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String INVALID_EXERCISE_WEIGHT_DESC \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        \" \" + PREFIX_EXERCISE_WEIGHT + \"1o21\"; // \u0027o\u0027 not allowed in weight"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String INVALID_EXERCISE_DATE_DESC \u003d \" \" + PREFIX_DATE + \"\"; // empty string not allowed for date"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final EditExerciseCommand.EditExerciseDescriptor DESC_PUSHUP;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final EditExerciseCommand.EditExerciseDescriptor DESC_BENCH;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DESC_PUSHUP \u003d new EditExerciseDescriptorBuilder()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseName(VALID_EXERCISE_NAME_PUSHUP)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseReps(VALID_EXERCISE_REPS_PUSHUP)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseSets(VALID_EXERCISE_SETS_PUSHUP)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseWeight(VALID_EXERCISE_WEIGHT_PUSHUP)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseDate(VALID_EXERCISE_DATE_PUSHUP).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        DESC_BENCH \u003d new EditExerciseDescriptorBuilder()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseName(VALID_EXERCISE_NAME_BENCH)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseReps(VALID_EXERCISE_REPS_BENCH)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseSets(VALID_EXERCISE_SETS_BENCH)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseWeight(VALID_EXERCISE_WEIGHT_BENCH)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseDate(VALID_EXERCISE_DATE_BENCH).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Client clientWithoutExercises \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Client clientWithExercises \u003d new ClientBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            .withExercisesInExerciseList(new ExerciseBuilder().build()).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private String clientWithExercisesCsvFileName \u003d clientWithExercises.getName().fullName + \".csv\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_noClientInView_throwsCommandException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertCommandFailure(exportCommand, model, ExportCommand.MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_clientWithoutExercises_throwsCommandException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model.setClientInView(clientWithoutExercises);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertCommandFailure(exportCommand, model, ExportCommand.MESSAGE_NO_EXERCISES);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void execute_clientWithExercises_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model.setClientInView(clientWithExercises);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        expectedModel.setClientInView(clientWithExercises);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                String.format(ExportCommand.MESSAGE_SUCCESS, clientWithExercisesCsvFileName));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertCommandSuccess(new ExportCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FilterCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.TagAndSportContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FilterCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class FilterCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        TagAndSportContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                new TagAndSportContainsKeywordsPredicate(Collections.singletonList(\"firsttag\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                        Collections.singletonList(\"firstsport\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        TagAndSportContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                new TagAndSportContainsKeywordsPredicate(Collections.singletonList(\"secondtag\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                        Collections.singletonList(\"secondsport\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        FilterCommand filterFirstCommand \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        FilterCommand filterSecondCommand \u003d new FilterCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        FilterCommand filterFirstCommandCopy \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertFalse(filterFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertFalse(filterFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertFalse(filterFirstCommand.equals(filterSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void execute_validTagAndSport_clientFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        TagAndSportContainsKeywordsPredicate predicate \u003d preparePredicate(\"normal\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                \"dance\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void execute_validTagNoSport_multipleClientsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        TagAndSportContainsKeywordsPredicate predicate \u003d preparePredicate(\"normal\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                \"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void execute_validSportNoTag_multipleClientsFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        TagAndSportContainsKeywordsPredicate predicate \u003d preparePredicate(\"\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                \"dance\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     * Parses {@code tagInput and @code sportInput} into a {@code TagAndSportContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private TagAndSportContainsKeywordsPredicate preparePredicate(String tagInput, String sportInput) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        List\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        List\u003cString\u003e sports \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!tagInput.equals(\"\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            tags \u003d Arrays.asList(tagInput.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        if (!sportInput.equals(\"\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            sports \u003d Arrays.asList(sportInput.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        return new TagAndSportContainsKeywordsPredicate(tags, sports);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_zeroKeywords_noClientFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredClientList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_multipleKeywords_multipleClientsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.updateFilteredClientList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredClientList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 14,
      "AaronCQL": 4,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GraphCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_AXIS_REPS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_AXIS_WEIGHT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_ENDDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_EXERCISE_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_STARTDATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.Axis;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.EndDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.Graph;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.StartDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class GraphCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private Graph validGraphFirst;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private Graph validGraphSecond;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        validGraphFirst \u003d new Graph("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            new ExerciseName(VALID_EXERCISE_NAME), new Axis(VALID_AXIS_REPS),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            new StartDate(VALID_STARTDATE), new EndDate(VALID_ENDDATE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        validGraphSecond \u003d new Graph("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            new ExerciseName(VALID_EXERCISE_NAME), new Axis(VALID_AXIS_WEIGHT),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            new StartDate(VALID_STARTDATE), new EndDate(VALID_ENDDATE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void constructor_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GraphCommand(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void execute_noClientInView_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        GraphCommand graphCommand \u003d new GraphCommand(validGraphFirst);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertCommandFailure(graphCommand, model, GraphCommand.MESSAGE_CLIENT_NOT_IN_VIEW);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        GraphCommand graphFirstCommand \u003d new GraphCommand(validGraphFirst);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        GraphCommand graphSecondCommand \u003d new GraphCommand(validGraphSecond);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(graphFirstCommand.equals(graphFirstCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        GraphCommand graphFirstCommandCopy \u003d new GraphCommand(validGraphFirst);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(graphFirstCommand.equals(graphFirstCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(graphFirstCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(graphFirstCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // different graph -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(graphFirstCommand.equals(graphSecondCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GraphCommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AXIS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Contains helper static variables for testing graph commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class GraphCommandTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    // valid"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_EXERCISE_NAME \u003d \"pushup\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_AXIS_REPS \u003d \"reps\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_AXIS_WEIGHT \u003d \"weight\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_STARTDATE \u003d \"01-01-2020\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_ENDDATE \u003d \"01-04-2020\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_EXERCISE_NAME_DESC \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_EXERCISE_NAME + VALID_EXERCISE_NAME;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_AXIS_REPS_DESC \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_AXIS + VALID_AXIS_REPS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_AXIS_WEIGHT_DESC \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_AXIS + VALID_AXIS_WEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_STARTDATE_DESC \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_STARTDATE + VALID_STARTDATE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_ENDDATE_DESC \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_ENDDATE + VALID_ENDDATE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String VALID_GRAPH_USER_INPUT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            VALID_EXERCISE_NAME_DESC + VALID_AXIS_REPS_DESC"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            + VALID_STARTDATE_DESC + VALID_ENDDATE_DESC;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    // invalid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String INVALID_EXERCISE_NAME \u003d \"pushup\u0026\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String INVALID_AXIS \u003d \"repss\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String INVALID_STARTDATE \u003d \"1-1-2\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String INVALID_ENDDATE \u003d \"1-1-2\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String INVALID_EXERCISE_NAME_DESC \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_EXERCISE_NAME + INVALID_EXERCISE_NAME;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String INVALID_AXIS_DESC \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_AXIS + INVALID_AXIS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String INVALID_STARTDATE_DESC \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_STARTDATE + INVALID_STARTDATE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final String INVALID_ENDDATE_DESC \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            \" \" + PREFIX_ENDDATE + INVALID_ENDDATE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 2,
      "AaronCQL": 5,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ScheduleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "class ScheduleCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e emptyScheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientToSchedule \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_CLIENT, emptyScheduleList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleCommand.MESSAGE_CLEARED, clientToSchedule.getName().fullName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.setClient(model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased()), clientToSchedule);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandSuccess(scheduleCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void execute_validIndexFilteredList_showsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e emptyScheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client clientToSchedule \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_CLIENT, emptyScheduleList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedModel.setClient(model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased()), clientToSchedule);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        showNoClient(expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertCommandFailure(scheduleCommand, expectedModel, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private void showNoClient(Model model) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        model.updateFilteredClientList(p -\u003e false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(model.getFilteredClientList().isEmpty());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e scheduleListFirst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e scheduleListSecond \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ScheduleCommand scheduleFirstCommand \u003d new ScheduleCommand(INDEX_FIRST_CLIENT, scheduleListFirst);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ScheduleCommand scheduleSecondCommand \u003d new ScheduleCommand(INDEX_SECOND_CLIENT, scheduleListSecond);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(scheduleFirstCommand.equals(scheduleFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ScheduleCommand scheduleFirstCommandCopy \u003d new ScheduleCommand(INDEX_FIRST_CLIENT, scheduleListFirst);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(scheduleFirstCommand.equals(scheduleFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(scheduleFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(scheduleFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(scheduleFirstCommand.equals(scheduleSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 83,
      "AaronCQL": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.ClientInView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * {@code ViewCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Client clientToView \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_SUCCESS, clientToView.getName().fullName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        expectedModel.setClientInView(clientToView);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertCommandSuccess(viewCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Client clientToView \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_SUCCESS, clientToView.getName().fullName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFitBiz(), new UserPrefs(), new ClientInView());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        showClientAtIndex(expectedModel, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        expectedModel.setClientInView(clientToView);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertCommandSuccess(viewCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        showClientAtIndex(model, INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of FitBiz list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFitBiz().getClientList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ViewCommand viewFirstCommand \u003d new ViewCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ViewCommand viewSecondCommand \u003d new ViewCommand(INDEX_SECOND_CLIENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        ViewCommand deleteFirstCommandCopy \u003d new ViewCommand(INDEX_FIRST_CLIENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(viewFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(viewFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(viewFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(viewFirstCommand.equals(viewSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 92,
      "AaronCQL": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/history/CommandHistoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * This test ensures integration between the storage {@code FileUtil} and model"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * {@code CommandHistoryState}. More stringent unit tests can be found in their"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * respective tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_COMMAND_1 \u003d \"edit-c 1 t/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_COMMAND_2 \u003d \"edit-c 2 n/Nimar\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_COMMAND_3 \u003d \"help\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // helper methods test cases"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String STORAGE_STRING \u003d String.format(\"%s\\n%s\\n%s\", VALID_COMMAND_1, VALID_COMMAND_2,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            VALID_COMMAND_3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final List\u003cString\u003e STATE_LIST \u003d List.of(VALID_COMMAND_1, VALID_COMMAND_2, VALID_COMMAND_3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandHistory \u003d new CommandHistory(getTempFilePath(\"test.txt\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandHistory.clearHistory(); // sanity check that history is cleared"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CommandHistory(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void storageStringToStateList_validStorageString_returnsCorrectList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        List\u003cString\u003e convertedList \u003d commandHistory.storageStringToStateList(STORAGE_STRING);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(convertedList.equals(STATE_LIST));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void stateListToStorageString_validStateList_returnsCorrectString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String convertedString \u003d commandHistory.stateListToStorageString(STATE_LIST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(convertedString.equals(STORAGE_STRING));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void clearHistory_returnsCorrectOutputs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandHistory.clearHistory(); // sanity check that history is cleared"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(commandHistory.getNextCommand(), EMPTY_STRING);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(commandHistory.getPreviousCommand(), EMPTY_STRING);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getPreviousCommand_oneItemHistory_returnsSameString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandHistory.addToHistory(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command1 \u003d commandHistory.getPreviousCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command2 \u003d commandHistory.getPreviousCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command3 \u003d commandHistory.getPreviousCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command4 \u003d commandHistory.getPreviousCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command5 \u003d commandHistory.getPreviousCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(command1 \u003d\u003d VALID_COMMAND_1 \u0026\u0026 command2 \u003d\u003d VALID_COMMAND_1 \u0026\u0026 command3 \u003d\u003d VALID_COMMAND_1"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                \u0026\u0026 command4 \u003d\u003d VALID_COMMAND_1 \u0026\u0026 command5 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void simulatedUsage_returnsCorrectOutputs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandHistory.addToHistory(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        commandHistory.addToHistory(VALID_COMMAND_2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String shouldBeValidCommand2 \u003d commandHistory.getPreviousCommand(); // returns VALID_COMMAND_2"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(shouldBeValidCommand2 \u003d\u003d VALID_COMMAND_2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String shouldBeValidCommand1 \u003d commandHistory.getPreviousCommand(); // returns VALID_COMMAND_1"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(shouldBeValidCommand1 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        shouldBeValidCommand1 \u003d commandHistory.getPreviousCommand(); // returns VALID_COMMAND_1"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(shouldBeValidCommand1 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        shouldBeValidCommand2 \u003d commandHistory.getNextCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(shouldBeValidCommand2 \u003d\u003d VALID_COMMAND_2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String shouldBeEmptyString \u003d commandHistory.getNextCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(shouldBeEmptyString \u003d\u003d EMPTY_STRING);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client expectedClientMultipleTags \u003d new ClientBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedClientMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client expectedClient \u003d new ClientBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                new AddCommand(expectedClient));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 10,
      "AaronCQL": 8,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddExerciseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.EXERCISE_DATE_DESC_PUSHUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.EXERCISE_NAME_DESC_PUSHUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.INVALID_EXERCISE_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.INVALID_EXERCISE_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.INVALID_EXERCISE_REPS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.INVALID_EXERCISE_SETS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.INVALID_EXERCISE_WEIGHT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_DATE_PUSHUP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_NAME_PUSHUP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.AddExerciseCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseSets;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class AddExerciseCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_FIELD \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private AddExerciseCommandParser parser \u003d new AddExerciseCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Exercise expectedClient \u003d new ExerciseBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .withExerciseName(VALID_EXERCISE_NAME_PUSHUP)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .withExerciseDate(VALID_EXERCISE_DATE_PUSHUP)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .withExerciseReps(EMPTY_FIELD)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .withExerciseSets(EMPTY_FIELD)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .withExerciseWeight(EMPTY_FIELD)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertParseSuccess(parser, EXERCISE_NAME_DESC_PUSHUP + EXERCISE_DATE_DESC_PUSHUP,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                new AddExerciseCommand(expectedClient));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddExerciseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // missing exercise date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertParseFailure(parser, VALID_EXERCISE_NAME_PUSHUP, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // missing exercise name"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertParseFailure(parser, VALID_EXERCISE_DATE_PUSHUP, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertParseFailure(parser, INVALID_EXERCISE_NAME_DESC + EXERCISE_DATE_DESC_PUSHUP,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertParseFailure(parser, EXERCISE_NAME_DESC_PUSHUP + INVALID_EXERCISE_DATE_DESC,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                ExerciseDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // invalid reps"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertParseFailure(parser, EXERCISE_NAME_DESC_PUSHUP + EXERCISE_DATE_DESC_PUSHUP"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                + INVALID_EXERCISE_REPS_DESC, ExerciseReps.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertParseFailure(parser, EXERCISE_NAME_DESC_PUSHUP + EXERCISE_DATE_DESC_PUSHUP"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                + INVALID_EXERCISE_WEIGHT_DESC, ExerciseWeight.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // invalid sets"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertParseFailure(parser, EXERCISE_NAME_DESC_PUSHUP + EXERCISE_DATE_DESC_PUSHUP"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                + INVALID_EXERCISE_SETS_DESC, ExerciseSets.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            System.out.println(command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            System.out.println(expectedCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_CLIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteExerciseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.DeleteExerciseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * outside of the DeleteExerciseCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * same path through the DeleteExerciseCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class DeleteExerciseCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private DeleteExerciseCommandParser parser \u003d new DeleteExerciseCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parse_validArgs_returnsDeleteExerciseCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteExerciseCommand(INDEX_FIRST_EXERCISE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CLIENT;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 26,
      "-": 179
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.client.TagAndSportContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private FilterCommandParser parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void parse_emptyTagAndSport_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        FilterCommand expectedFilterCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                new FilterCommand(new TagAndSportContainsKeywordsPredicate(new ArrayList\u003cString\u003e(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                        new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertParseSuccess(parser, \"t/ s/\", expectedFilterCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void parse_validArgs_returnsFilterCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        FilterCommand expectedFilterCommand \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                new FilterCommand(new TagAndSportContainsKeywordsPredicate(Arrays.asList(\"normal\", \"vegetarian\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                        Arrays.asList(\"hockey\", \"sumo\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertParseSuccess(parser, \"t/normal t/vegetarian s/hockey s/sumo\", expectedFilterCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FitBizParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.ClientUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.EditClientDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class FitBizParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final FitBizParser parser \u003d new FitBizParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ClientUtil.getAddCommand(client));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(new AddCommand(client), command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_CLIENT), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(client).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                + INDEX_FIRST_CLIENT.getOneBased() + \" \" + ClientUtil.getEditClientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // System.out.println(ClientUtil.getEditClientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_CLIENT, descriptor), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void parseCommand_export() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(parser.parseCommand(ExportCommand.COMMAND_WORD) instanceof ExportCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(parser.parseCommand(ExportCommand.COMMAND_WORD + \" 3\") instanceof ExportCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 10,
      "AaronCQL": 16,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GraphCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.INVALID_AXIS_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.INVALID_ENDDATE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.INVALID_EXERCISE_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.INVALID_STARTDATE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_AXIS_REPS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_AXIS_REPS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_ENDDATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_ENDDATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_EXERCISE_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_EXERCISE_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_GRAPH_USER_INPUT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_STARTDATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_STARTDATE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.commands.GraphCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.Axis;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.EndDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.Graph;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.graph.StartDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class GraphCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, GraphCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private GraphCommandParser parser \u003d new GraphCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, GraphCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // no name specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                parser, VALID_AXIS_REPS_DESC + VALID_STARTDATE_DESC + VALID_ENDDATE_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // no axis specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                parser, VALID_EXERCISE_NAME_DESC + VALID_STARTDATE_DESC + VALID_ENDDATE_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // no startdate specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                parser, VALID_EXERCISE_NAME_DESC + VALID_AXIS_REPS_DESC + VALID_ENDDATE_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // no enddate specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                parser, VALID_EXERCISE_NAME_DESC + VALID_AXIS_REPS_DESC + VALID_STARTDATE_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // no exercise name, no axis, no start date and no end date specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String userInput \u003d VALID_GRAPH_USER_INPUT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Graph graph \u003d new Graph(new ExerciseName(VALID_EXERCISE_NAME), new Axis(VALID_AXIS_REPS),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            new StartDate(VALID_STARTDATE), new EndDate(VALID_ENDDATE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        GraphCommand expectedCommand \u003d new GraphCommand(graph);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // invalid exercise name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure(parser, INVALID_EXERCISE_NAME_DESC + VALID_AXIS_REPS_DESC"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                + VALID_STARTDATE_DESC + VALID_ENDDATE_DESC, ExerciseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // invalid axis"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure(parser, VALID_EXERCISE_NAME_DESC + INVALID_AXIS_DESC"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                + VALID_STARTDATE_DESC + VALID_ENDDATE_DESC, Axis.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // invalid start date"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure(parser, VALID_EXERCISE_NAME_DESC + VALID_AXIS_REPS_DESC"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                + INVALID_STARTDATE_DESC + VALID_ENDDATE_DESC, StartDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // invalid end date"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure(parser, VALID_EXERCISE_NAME_DESC + VALID_AXIS_REPS_DESC"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                + VALID_STARTDATE_DESC + INVALID_ENDDATE_DESC, EndDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private static final String INVALID_HEIGHT \u003d \"23.34.2\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"male1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private static final String VALID_HEIGHT \u003d \"152.2\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String VALID_GENDER \u003d \"Male\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final String VALID_REMARK \u003d \"need do more bench\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void parseBirthday_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBirthday((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parseHeight_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseHeight((String) null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parseHeight_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHeight(INVALID_HEIGHT));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parseHeight_validValueWithoutWhitespace_returnsHeight() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Height expectedHeight \u003d new Height(VALID_HEIGHT);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals(expectedHeight, ParserUtil.parseHeight(VALID_HEIGHT));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parseHeight_validValueWithWhitespace_returnsTrimmedHeight() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String heightWithWhitespace \u003d WHITESPACE + VALID_HEIGHT + WHITESPACE;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Height expectedHeight \u003d new Height(VALID_HEIGHT);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals(expectedHeight, ParserUtil.parseHeight(heightWithWhitespace));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parseGender_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGender((String) null));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parseGender_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGender(INVALID_GENDER));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parseGender_validValueWithoutWhitespace_returnsGender() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Gender expectedGender \u003d new Gender(VALID_GENDER);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedGender, ParserUtil.parseGender(VALID_GENDER));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parseGender_validValueWithWhitespace_returnsTrimmedGender() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String genderWithWhitespace \u003d WHITESPACE + VALID_GENDER + WHITESPACE;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Gender expectedGender \u003d new Gender(VALID_GENDER);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedGender, ParserUtil.parseGender(genderWithWhitespace));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parseRemark_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRemark((String) null));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parseRemark_validValueWithoutWhitespace_returnsRemark() throws Exception {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Remark expectedRemark \u003d new Remark(VALID_REMARK);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedRemark, ParserUtil.parseRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void parseRemark_validValueWithWhitespace_returnsTrimmedRemark() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String remarkWithWhitespace \u003d WHITESPACE + VALID_REMARK + WHITESPACE;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Remark expectedRemark \u003d new Remark(VALID_REMARK);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedRemark, ParserUtil.parseRemark(remarkWithWhitespace));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 46,
      "ziyingli": 26,
      "Dban1": 12,
      "-": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ScheduleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DAY_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ENDTIME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STARTTIME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHEDULE_DESC_MON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_MON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.EndTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import seedu.address.model.schedule.StartTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class ScheduleCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private ScheduleCommandParser parser \u003d new ScheduleCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertParseFailure(parser, VALID_DAY_MON, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + SCHEDULE_DESC_MON;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArrayList\u003cSchedule\u003e scheduleArrayList \u003d new ArrayList\u003cSchedule\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        scheduleArrayList.add(new Schedule(new Day(\"mon\"), new StartTime(\"1200\"), new EndTime(\"1400\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ScheduleCommand expectedCommand \u003d new ScheduleCommand(targetIndex, scheduleArrayList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void parse_missingOptionalFields_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CLIENT;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String userInput \u003d \"\" + targetIndex.getOneBased() + \" \" + PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ArrayList\u003cSchedule\u003e scheduleArrayList \u003d new ArrayList\u003cSchedule\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        ScheduleCommand expectedCommand \u003d new ScheduleCommand(targetIndex, scheduleArrayList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        String message \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DAY_DESC, message); // invalid day"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STARTTIME_DESC, message); // invalid start time"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ENDTIME_DESC, message); // invalid end time"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 68,
      "Dban1": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * outside of the ViewCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * same path through the ViewCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ViewCommand(INDEX_FIRST_CLIENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CommandHistoryStateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class CommandHistoryStateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final ArrayList\u003cString\u003e INITIAL_EMPTY_STATE \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_COMMAND_1 \u003d \"edit-c 1 t/\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_COMMAND_2 \u003d \"edit-c 2 n/Nimar\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int LIST_SIZE_EMPTY \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int LIST_SIZE_ONE \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final int LIST_SIZE_FIVE \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final CommandHistoryState historyState \u003d new CommandHistoryState(INITIAL_EMPTY_STATE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // no matter what, history must be initialised"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(historyState.getCurrentState() !\u003d null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void clearState_emptyListHistory() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(Collections.emptyList(), historyState.getCurrentState());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void add_emptyString_addsNothing() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(EMPTY_STRING);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(historyState.getCurrentState().size() \u003d\u003d LIST_SIZE_EMPTY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void add_similarValidCommandMultipleTimes_addsOnlyOne() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(historyState.getCurrentState().size() \u003d\u003d LIST_SIZE_ONE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void add_validUniqueCommandMultipleTimes_addsAll() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(historyState.getCurrentState().size() \u003d\u003d LIST_SIZE_FIVE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getNextCommand_emptyHistory_returnsEmptyString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(historyState.getNextCommand() \u003d\u003d EMPTY_STRING);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getPreviousCommand_emptyHistory_returnsEmptyString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(historyState.getPreviousCommand() \u003d\u003d EMPTY_STRING);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getNextCommand_nonEmptyHistory_returnsEmptyString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(historyState.getNextCommand() \u003d\u003d EMPTY_STRING);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getPreviousCommand_oneItemHistory_returnsSameString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command1 \u003d historyState.getPreviousCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command2 \u003d historyState.getPreviousCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command3 \u003d historyState.getPreviousCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command4 \u003d historyState.getPreviousCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String command5 \u003d historyState.getPreviousCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(command1 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(command2 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(command3 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(command4 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(command5 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getPreviousCommand_twoItemsHistory_returnsCorrectStrings() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String shouldBeValidCommand2 \u003d historyState.getPreviousCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String shouldBeValidCommand1 \u003d historyState.getPreviousCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(shouldBeValidCommand2 \u003d\u003d VALID_COMMAND_2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(shouldBeValidCommand1 \u003d\u003d VALID_COMMAND_1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getNextCommand_twoItemsHistoryAfterGetPrevCommand_returnsCorrectString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.clearState(); // sanity check that history is empty"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.add(VALID_COMMAND_2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.getPreviousCommand(); // returns VALID_COMMAND_2"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        historyState.getPreviousCommand(); // returns VALID_COMMAND_1"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String shouldBeValidCommand2 \u003d historyState.getNextCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(shouldBeValidCommand2 \u003d\u003d VALID_COMMAND_2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/model/FitBizTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.exceptions.DuplicateClientException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class FitBizTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private final FitBiz fitBiz \u003d new FitBiz();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(Collections.emptyList(), fitBiz.getClientList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fitBiz.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void resetData_withValidReadOnlyFitBiz_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBiz newData \u003d getTypicalFitBiz();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBiz.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(newData, fitBiz);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void resetData_withDuplicateClients_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // Two clients with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        List\u003cClient\u003e newClients \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBizStub newData \u003d new FitBizStub(newClients);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e fitBiz.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void hasClient_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fitBiz.hasClient(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasClient_clientNotInFitBiz_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(fitBiz.hasClient(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasClient_clientInFitBiz_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBiz.addClient(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(fitBiz.hasClient(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasClient_clientWithSameIdentityFieldsInFitBiz_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBiz.addClient(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(fitBiz.hasClient(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void getClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e fitBiz.getClientList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * A stub FitBizStub whose clients list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static class FitBizStub implements ReadOnlyFitBiz {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        private final ObservableList\u003cClient\u003e clients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBizStub(Collection\u003cClient\u003e clients) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            this.clients.setAll(clients);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        public ObservableList\u003cClient\u003e getClientList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            return clients;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 15,
      "AaronCQL": 24,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.FitBizBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(new FitBiz(), new FitBiz(modelManager.getFitBiz()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        userPrefs.setFitBizFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        userPrefs.setFitBizFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setFitBizFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setFitBizFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setFitBizFilePath_validPath_setsFitBizFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        modelManager.setFitBizFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(path, modelManager.getFitBizFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void hasClient_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasClient(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasClient_clientNotInFitBiz_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(modelManager.hasClient(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hasClient_clientInFitBiz_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        modelManager.addClient(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(modelManager.hasClient(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredClientList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBiz fitBiz \u003d new FitBizBuilder().withClient(ALICE).withClient(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        FitBiz differentFitBiz \u003d new FitBiz();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ClientInView clientInView \u003d new ClientInView();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        modelManager \u003d new ModelManager(fitBiz, userPrefs, clientInView);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(fitBiz, userPrefs, clientInView);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different fitBiz -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentFitBiz, userPrefs, clientInView)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        modelManager.updateFilteredClientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(fitBiz, userPrefs, clientInView)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        modelManager.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        differentUserPrefs.setFitBizFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(fitBiz, differentUserPrefs, clientInView)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 7,
      "Dban1": 13,
      "AaronCQL": 14,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void setFitBizFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFitBizFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/BirthdayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static java.time.temporal.ChronoUnit.MONTHS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "class BirthdayTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Birthday(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void isValidBirthday() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // null birthday"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Birthday.isValidBirthday(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // invalid birthdays"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\" \")); // spaces only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"91\")); // random numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"not a birthday\")); // non-numeric"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"not a birthday1\")); // non-numeric"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"not a birthday2\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"not a birthday3\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"not a birthday4\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"not a birthday5\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"11-e33-1998\")); // erroneous alphanumeric"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(LocalDate.now().plus(1, DAYS)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")))); // birthday 1 day after current date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(LocalDate.now().plus(2, MONTHS)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")))); //birthday 2 months after current date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(LocalDate.now()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")))); // birthday today"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(LocalDate.now().minusYears(120).minusDays(1)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")))); // birthday just the day before the earliest limit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // valid birthday"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(Birthday.isValidBirthday(\"01-01-1980\")); // birthday in 01-01-1980"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(Birthday.isValidBirthday(\"01-01-1970\")); //birthday in 01-01-1979"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Birthday.isValidBirthday((\"\"))); //default empty birthday"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Birthday.isValidBirthday(LocalDate.now().minusYears(120)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")))); //birthday right on the earliest limit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(new Birthday(\"01-01-1980\").hashCode() \u003d\u003d new Birthday(\"01-01-1980\").hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(new Birthday(\"01-01-1980\").toString().equals(\"01-01-1980\") \u003d\u003d true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 34,
      "AaronCQL": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/ClientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class ClientTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client client \u003d new ClientBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e client.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void isSameClient() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(ALICE.isSameClient(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(ALICE.isSameClient(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(ALICE.isSameClient(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client aliceCopy \u003d new ClientBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        editedAlice \u003d new ClientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 26,
      "AaronCQL": 1,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/CurrentWeightTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class CurrentWeightTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CurrentWeight(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor_invalidCurrentWeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String invalidCurrentWeight \u003d \"i\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new CurrentWeight(invalidCurrentWeight));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void isValidWeight() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // null weight"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CurrentWeight.isValidWeight(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"ab\")); // contains no numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"a.b\")); // contains no numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\".2\")); // no leading number before decimal"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"2.2.2\")); // too many decimal points"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"-23\")); // negative numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"-23.23\")); // negative decimals"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"as.23\")); // inclusion of letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23.as\")); // inclusion of letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23.a1\")); // inclusion of letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23z1\")); // inclusion of letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23,23\")); // wrong symbols"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23|23\")); // wrong symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23/23\")); // wrong symbols"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23./23\")); // wrong symbols"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23/.23\")); // wrong symbols"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"2-3.23\")); // wrong symbols"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"23.2\u00273\")); // wrong symbols"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"41.34573223138567385432\")); // long decimal"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(CurrentWeight.isValidWeight(\"34573223138567385432.3\")); // long decimal"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // valid weight"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(CurrentWeight.isValidWeight(\"\")); // empty string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(CurrentWeight.isValidWeight(\"0\")); // single digit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(CurrentWeight.isValidWeight(\"5\")); // single digit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(CurrentWeight.isValidWeight(\"003\")); // leading zeros"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(CurrentWeight.isValidWeight(\"456\")); // numbers only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(CurrentWeight.isValidWeight(\"1.2\")); // numbers with decimal points"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(CurrentWeight.isValidWeight(\"45.23\")); // numbers with decimal points"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(CurrentWeight.isValidWeight(\"0.1\")); // numbers with decimal points and leading 0"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void formatWeight_properlyFormatted() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"0\")).value, \"0.00\"); // single digits"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"5\")).value, \"5.00\"); // single digits"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"003\")).value, \"3.00\"); // strip leading zeros"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"000\")).value, \"0.00\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"000.3\")).value, \"0.30\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"45.23\")).value, \"45.23\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void equals_validWeight() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        CurrentWeight w1 \u003d new CurrentWeight(\"12.2\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(w1.equals(w1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(w1.equals(new CurrentWeight(\"12.2\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(w1.equals(new CurrentWeight(\"12\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hashCode_validWeight() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        CurrentWeight w1 \u003d new CurrentWeight(\"12.2\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(w1.hashCode() \u003d\u003d new CurrentWeight(\"12.2\").hashCode());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(w1.hashCode() \u003d\u003d new CurrentWeight(\"12.1\").hashCode());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/GenderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class GenderTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Gender(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_invalidGender_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String invalidGender \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Gender(invalidGender));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void isValidGender() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null gender"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Gender.isValidGender(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // invalid genders"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(Gender.isValidGender(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(Gender.isValidGender(\"tranny\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(Gender.isValidGender(\"shemale\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(Gender.isValidGender(\"Other\")); // match with Others"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(Gender.isValidGender(\"23552\")); // numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(Gender.isValidGender(\"MaleFemale\")); // multiple"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(Gender.isValidGender(\"Ma le\")); // spaces within"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(Gender.isValidGender(\"feMa3le\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // valid gender"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(Gender.isValidGender(\"Male\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(Gender.isValidGender(\"Female\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(Gender.isValidGender(\"Others\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(Gender.isValidGender(\"male\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(Gender.isValidGender(\"feMale\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(Gender.isValidGender(\"others\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/HeightTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class HeightTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Height(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void constructor_invalidHeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String invalidHeight \u003d \"i\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Height(invalidHeight));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void isValidHeight() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // null height"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Height.isValidHeight(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // invalid height"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"ab\")); // contains no numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"a.b\")); // contains no numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\".2\")); // no leading number before decimal"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"2.2.2\")); // too many decimal points"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"-23\")); // negative numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"-23.23\")); // negative decimals"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"as.23\")); // inclusion of letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23.as\")); // inclusion of letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23.a1\")); // inclusion of letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23z1\")); // inclusion of letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23,23\")); // wrong symbols"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23|23\")); // wrong symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23/23\")); // wrong symbols"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23./23\")); // wrong symbols"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23/.23\")); // wrong symbols"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"2-3.23\")); // wrong symbols"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"23.2\u00273\")); // wrong symbols"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"41.34573223138567385432\")); // long decimal"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Height.isValidHeight(\"34573223138567385432.3\")); // long decimal"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // valid height"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Height.isValidHeight(\"\")); // empty string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Height.isValidHeight(\"0\")); // single digit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Height.isValidHeight(\"5\")); // single digit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Height.isValidHeight(\"003\")); // leading zeros"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Height.isValidHeight(\"456\")); // numbers only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Height.isValidHeight(\"1.2\")); // numbers with decimal points"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Height.isValidHeight(\"45.23\")); // numbers with decimal points"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Height.isValidHeight(\"0.1\")); // numbers with decimal points and leading 0"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void equals_validHeight() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Height h1 \u003d new Height(\"152.2\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(h1.equals(h1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(h1.equals(new Height(\"152.2\")));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(h1.equals(new Height(\"152\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void formatHeight_properlyFormatted() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals((new Height(\"0\")).value, \"0.00\"); // single digits"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals((new Height(\"5\")).value, \"5.00\"); // single digits"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals((new Height(\"003\")).value, \"3.00\"); // strip leading zeros"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals((new Height(\"000\")).value, \"0.00\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals((new Height(\"000.3\")).value, \"0.30\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals((new Height(\"45.23\")).value, \"45.23\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertEquals((new Height(\"\")).value, \"\"); // empty string"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void hashCode_validHeight() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Height h1 \u003d new Height(\"152.2\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(h1.hashCode() \u003d\u003d new Height(\"152.2\").hashCode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(h1.hashCode() \u003d\u003d new Height(\"152.1\").hashCode());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        // different client -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 10,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Name.isValidName(\"Lim, Kopi\")); // name with one comma"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Name.isValidName(\"Lim, Kopi,, John\")); // name with multiple commas"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 2,
      "Dban1": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/RemarkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Remark remark \u003d new Remark(\"Hello\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(remark.equals(remark));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Remark remarkCopy \u003d new Remark(remark.value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(remark.equals(remarkCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(remark.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(remark.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Remark differentRemark \u003d new Remark(\"Bye\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(remark.equals(differentRemark));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/SportTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "public class SportTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Sport(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void constructor_invalidSport_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        String invalidSport \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Sport(invalidSport));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public void isValidSport() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // null Sport"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Sport.isValidSport(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // invalid sport"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Sport.isValidSport(\"-\")); // a dash"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Sport.isValidSport(\".\")); // a period"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Sport.isValidSport(\"$$(*#(+_\")); // weird symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        // valid sport"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertTrue(Sport.isValidSport(\"NIL\")); // no sport"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertTrue(Sport.isValidSport(\"no sport\")); // no sport"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertTrue(Sport.isValidSport(\"hockey\")); // one sport"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        assertTrue(Sport.isValidSport(\"jengabuildingfreestyle81mountainskydivingswimveryfast\")); // long sport"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Sport.isValidSport(\"81xtwelveriiasdfmnklanlcccoccunut\")); // sport with numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Sport.isValidSport(\"Cross country mountain biking\")); // sport with space"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void equals_validSport() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Sport s1 \u003d new Sport(\"100000m race\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(s1.equals(s1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(s1.equals(new Sport(\"100000m race\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(s1.equals(new Sport(\"100000mrace\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void hashCode_validSport() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Sport s1 \u003d new Sport(\"100000m race\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(s1.hashCode() \u003d\u003d new Sport(\"100000m race\").hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(s1.hashCode() \u003d\u003d new Sport(\"100000mrace\").hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 14,
      "tohkerwei": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/TargetWeightTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class TargetWeightTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TargetWeight(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void constructor_invalidTargetWeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String invalidTargetWeight \u003d \"i\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TargetWeight(invalidTargetWeight));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void isValidWeight() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // null weight"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TargetWeight.isValidWeight(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"ab\")); // contains no numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"a.b\")); // contains no numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\".2\")); // no leading number before decimal"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"2.2.2\")); // too many decimal points"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"-23\")); // negative numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"-23.23\")); // negative decimals"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"as.23\")); // inclusion of letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23.as\")); // inclusion of letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23.a1\")); // inclusion of letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23z1\")); // inclusion of letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23,23\")); // wrong symbols"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23|23\")); // wrong symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23/23\")); // wrong symbols"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23./23\")); // wrong symbols"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23/.23\")); // wrong symbols"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"2-3.23\")); // wrong symbols"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"23.2\u00273\")); // wrong symbols"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"41.34573223138567385432\")); // long decimal"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(TargetWeight.isValidWeight(\"34573223138567385432.3\")); // long decimal"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        // valid weight"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(TargetWeight.isValidWeight(\"\")); // empty string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(TargetWeight.isValidWeight(\"0\")); // single digit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(TargetWeight.isValidWeight(\"5\")); // single digit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(TargetWeight.isValidWeight(\"003\")); // leading zeros"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(TargetWeight.isValidWeight(\"456\")); // numbers only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(TargetWeight.isValidWeight(\"1.2\")); // numbers with decimal points"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(TargetWeight.isValidWeight(\"45.23\")); // numbers with decimal points"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(TargetWeight.isValidWeight(\"0.1\")); // numbers with decimal points and leading 0"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void formatWeight_properlyFormatted() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"0\")).value, \"0.00\"); // single digits"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"5\")).value, \"5.00\"); // single digits"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"003\")).value, \"3.00\"); // strip leading zeros"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"000\")).value, \"0.00\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"000.3\")).value, \"0.30\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"45.23\")).value, \"45.23\"); // at least one zero before decimal place"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals((new TargetWeight(\"\")).value, \"\"); // empty string"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void equals_validWeight() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        TargetWeight w1 \u003d new TargetWeight(\"12.2\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(w1.equals(w1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(w1.equals(new TargetWeight(\"12.2\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(w1.equals(new TargetWeight(\"12\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void hashCode_validWeight() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        TargetWeight w1 \u003d new TargetWeight(\"12.2\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertTrue(w1.hashCode() \u003d\u003d new TargetWeight(\"12.2\").hashCode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertFalse(w1.hashCode() \u003d\u003d new TargetWeight(\"12.1\").hashCode());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/model/client/UniqueClientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.client;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.exceptions.ClientNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.exceptions.DuplicateClientException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.testutil.ClientBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class UniqueClientListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private final UniqueClientList uniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void contains_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void contains_clientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(uniqueClientList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void contains_clientInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(uniqueClientList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void contains_clientWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(uniqueClientList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void add_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void add_duplicateClient_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient_nullTargetClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClient(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient_nullEditedClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClient(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient_targetClientNotInList_throwsClientNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(ClientNotFoundException.class, () -\u003e uniqueClientList.setClient(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient_editedClientIsSameClient_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.setClient(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedUniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient_editedClientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.setClient(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedUniqueClientList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient_editedClientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.setClient(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClient_editedClientHasNonUniqueIdentity_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.setClient(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void remove_nullClient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void remove_clientDoesNotExist_throwsClientNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(ClientNotFoundException.class, () -\u003e uniqueClientList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void remove_existingClient_removesClient() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClients_nullUniqueClientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClients((UniqueClientList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClients_uniqueClientList_replacesOwnListWithProvidedUniqueClientList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.setClients(expectedUniqueClientList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClients((List\u003cClient\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        List\u003cClient\u003e clientList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        uniqueClientList.setClients(clientList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        expectedUniqueClientList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertEquals(expectedUniqueClientList, uniqueClientList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void setClients_listWithDuplicateClients_throwsDuplicateClientException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        List\u003cClient\u003e listWithDuplicateClients \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.setClients(listWithDuplicateClients));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            -\u003e uniqueClientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 169,
      "AaronCQL": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "class ExerciseDateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final LocalDate DATE_NOW \u003d LocalDate.now();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExerciseDate(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void isValidExerciseDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null birthday"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExerciseDate.isValidExerciseDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // invalid birthdays"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"91\")); // random numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"not a birthday\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"not a birthday1\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"not a birthday2\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"not a birthday3\")); // non-numeric"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"not a birthday4\")); // non-numeric"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"11-e33-1998\")); // erroneous alphanumeric"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"11/12/1213\")); // incorrect delimiter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"11-13-1213\")); // months more than 12"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"32-11-1213\")); // dates more than 31"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate(\"9-11-12131\")); // years more than 4 digits"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            DATE_NOW.plusDays(1).format(DATE_TIME_FORMATTER))); // 1 day after the current day"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            DATE_NOW.minusYears(1).minusDays(1).format(DATE_TIME_FORMATTER))); // 1 year and 1 day before current date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseDate.isValidExerciseDate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            DATE_NOW.minusYears(2).format(DATE_TIME_FORMATTER))); // 2 years before current date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // valid birthday"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseDate.isValidExerciseDate("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            DATE_NOW.format(DATE_TIME_FORMATTER))); // current date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseDate.isValidExerciseDate("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            DATE_NOW.minusMonths(4).format(DATE_TIME_FORMATTER))); // 4 months before current date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseDate.isValidExerciseDate("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            DATE_NOW.minusYears(1).format(DATE_TIME_FORMATTER))); // 1 year before current date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExerciseName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_invalidExerciseName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String invalidExerciseName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExerciseName(invalidExerciseName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExerciseName.isValidExerciseName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseName.isValidExerciseName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseName.isValidExerciseName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseName.isValidExerciseName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseName.isValidExerciseName(\"pushups*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseName.isValidExerciseName(\"pushuppushuppushuppushuppushup1\")); // 31 characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseName.isValidExerciseName(\"bench press\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseName.isValidExerciseName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseName.isValidExerciseName(\"bench press 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseName.isValidExerciseName(\"Bench Press\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseName.isValidExerciseName(\"pushuppushuppushuppushuppushup\")); // 30 chars"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseRepsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseRepsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExerciseReps(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_invalidExerciseReps_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String invalidExerciseReps \u003d \"i\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExerciseReps(invalidExerciseReps));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void isValidExerciseReps() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null reps"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExerciseReps.isValidExerciseReps(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // invalid reps"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"ab\")); // contains no numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\".2\")); // decimal numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"01\")); // starts with 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"10000\")); // over 9999"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"-23\")); // negative numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"-23.23\")); // negative decimals"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"as.23\")); // inclusion of letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"23.as\")); // inclusion of letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"23.a1\")); // inclusion of letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"23z1\")); // inclusion of letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"23/.23\")); // inclusion of symbols"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"2-3.23\")); // inclusion of symbols"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"23.2\u00273\")); // inclusion of symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // valid reps"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"\")); // empty string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"5\")); // single digit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"456\")); // numbers only"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"1\")); // near boundary"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"9999\")); // near boundary"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseSetsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseSetsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExerciseSets(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_invalidExerciseReps_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String invalidExerciseSets \u003d \"i\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExerciseSets(invalidExerciseSets));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void isValidExerciseSets() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null weight"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExerciseSets.isValidExerciseSets(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"ab\")); // contains no numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\".2\")); // decimal numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"01\")); // starts with 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"10000\")); // over 9999"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"-23\")); // negative numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"-23.23\")); // negative decimals"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"as.23\")); // inclusion of letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"23.as\")); // inclusion of letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"23.a1\")); // inclusion of letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"23z1\")); // inclusion of letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"23/.23\")); // inclusion of symbols"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"2-3.23\")); // inclusion of symbols"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseSets.isValidExerciseSets(\"23.2\u00273\")); // inclusion of symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // valid weight"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseSets.isValidExerciseSets(\"\")); // empty string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseSets.isValidExerciseSets(\"5\")); // single digit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseSets.isValidExerciseSets(\"456\")); // numbers only"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"1\")); // near boundary"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"9999\")); // near boundary"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_DATE_BENCH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_NAME_BENCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_REPS_BENCH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_SETS_BENCH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_WEIGHT_BENCH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.BENCH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.PUSHUP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void isSameExercise() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(PUSHUP.isSameExercise(PUSHUP));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.isSameExercise(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different reps, different date, different weight -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise editedPushup \u003d new ExerciseBuilder(PUSHUP)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseReps(VALID_EXERCISE_REPS_BENCH)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseDate(VALID_EXERCISE_DATE_BENCH)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExerciseWeight(VALID_EXERCISE_WEIGHT_BENCH)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.isSameExercise(editedPushup));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        editedPushup \u003d new ExerciseBuilder(PUSHUP).withExerciseName(VALID_EXERCISE_NAME_BENCH).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.isSameExercise(editedPushup));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same name, same date, same weight, same reps, different sets -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        editedPushup \u003d new ExerciseBuilder(PUSHUP).withExerciseSets(VALID_EXERCISE_SETS_BENCH).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(PUSHUP.isSameExercise(editedPushup));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise pushupCopy \u003d new ExerciseBuilder(PUSHUP).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(PUSHUP.equals(pushupCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(PUSHUP.equals(PUSHUP));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.equals(5));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different Exercise -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.equals(BENCH));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different Name -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise editedPushup \u003d new ExerciseBuilder(PUSHUP).withExerciseName(VALID_EXERCISE_NAME_BENCH).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.equals(editedPushup));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different reps -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        editedPushup \u003d new ExerciseBuilder(PUSHUP).withExerciseReps(VALID_EXERCISE_REPS_BENCH).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.equals(editedPushup));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different weight -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        editedPushup \u003d new ExerciseBuilder(PUSHUP).withExerciseWeight(VALID_EXERCISE_WEIGHT_BENCH).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.equals(editedPushup));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        editedPushup \u003d new ExerciseBuilder(PUSHUP).withExerciseDate(VALID_EXERCISE_DATE_BENCH).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(PUSHUP.equals(editedPushup));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseWeightTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseWeightTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExerciseWeight(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void constructor_invalidExerciseReps_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        String invalidExerciseWeight \u003d \"i\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExerciseWeight(invalidExerciseWeight));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void isValidExerciseWeight() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // null weight"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExerciseWeight.isValidExerciseWeight(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"ab\")); // contains no numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\".2\")); // decimal numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"01\")); // starts with 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseReps.isValidExerciseReps(\"10000\")); // over 9999"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"-23\")); // negative numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"-23.23\")); // negative decimals"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"as.23\")); // inclusion of letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"23.as\")); // inclusion of letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"23.a1\")); // inclusion of letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"23z1\")); // inclusion of letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"23/.23\")); // inclusion of symbols"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"2-3.23\")); // inclusion of symbols"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(ExerciseWeight.isValidExerciseWeight(\"23.2\u00273\")); // inclusion of symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // valid weight"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseWeight.isValidExerciseWeight(\"\")); // empty string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseWeight.isValidExerciseWeight(\"5\")); // single digit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseWeight.isValidExerciseWeight(\"456\")); // numbers only"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"1\")); // near boundary"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(ExerciseReps.isValidExerciseReps(\"9999\")); // near boundary"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/UniqueExerciseListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_SETS_BENCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.BENCH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.PUSHUP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class UniqueExerciseListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private final UniqueExerciseList uniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void contains_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void contains_exerciseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(uniqueExerciseList.contains(PUSHUP));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void contains_exerciseInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(uniqueExerciseList.contains(PUSHUP));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void contains_exerciseWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise editedPushup \u003d new ExerciseBuilder(PUSHUP).withExerciseSets(VALID_EXERCISE_SETS_BENCH).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertTrue(uniqueExerciseList.contains(editedPushup));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void add_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void add_duplicateExercise_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList.add(PUSHUP));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercise_nullTargetExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercise(null, PUSHUP));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercise_nullEditedExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercise(PUSHUP, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercise_targetExerciseNotInList_throwsExerciseNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(ExerciseNotFoundException.class, () -\u003e uniqueExerciseList.setExercise(PUSHUP, PUSHUP));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercise_editedExerciseIsSameExercise_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.setExercise(PUSHUP, PUSHUP);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedUniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercise_editedExerciseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        Exercise editedPushup \u003d new ExerciseBuilder(PUSHUP).withExerciseSets(VALID_EXERCISE_SETS_BENCH).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.setExercise(PUSHUP, editedPushup);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedUniqueExerciseList.add(editedPushup);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercise_editedExerciseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.setExercise(PUSHUP, BENCH);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedUniqueExerciseList.add(BENCH);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercise_editedExerciseHasNonUniqueIdentity_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(BENCH);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList.setExercise(PUSHUP, BENCH));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void remove_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void remove_exerciseDoesNotExist_throwsExerciseNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(ExerciseNotFoundException.class, () -\u003e uniqueExerciseList.remove(PUSHUP));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void remove_existingExercise_removesExercise() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.remove(PUSHUP);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercises_nullUniqueExerciseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercises((UniqueExerciseList) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercises_uniqueExerciseList_replacesOwnListWithProvidedUniqueExerciseList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedUniqueExerciseList.add(BENCH);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.setExercises(expectedUniqueExerciseList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercises_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercises((List\u003cExercise\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercises_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.add(PUSHUP);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        List\u003cExercise\u003e exerciseList \u003d Collections.singletonList(BENCH);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        uniqueExerciseList.setExercises(exerciseList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        expectedUniqueExerciseList.add(BENCH);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void setExercises_listWithDuplicateExercises_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        List\u003cExercise\u003e listWithDuplicateExercises \u003d Arrays.asList(PUSHUP, PUSHUP);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            uniqueExerciseList.setExercises(listWithDuplicateExercises));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            uniqueExerciseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/model/graph/AxisTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class AxisTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Axis(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void constructor_invalidAxis_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        String invalidAxis \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Axis(invalidAxis));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void isValidAxis() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // null axis"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Axis.isValidAxis(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // invalid axis"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Axis.isValidAxis(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Axis.isValidAxis(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Axis.isValidAxis(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(Axis.isValidAxis(\"reps*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // valid axis"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Axis.isValidAxis(\"reps\")); // small letters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Axis.isValidAxis(\"Reps\")); // with capital letters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Axis.isValidAxis(\"weIgHt\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(Axis.isValidAxis(\"WEIGHT\")); // with all caps"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/graph/EndDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class EndDateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final LocalDate DATE_NOW \u003d LocalDate.now();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EndDate(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void isValidEndDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // null birthday"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EndDate.isValidEndDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // invalid birthdays"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"91\")); // random numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"not a birthday\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"not a birthday1\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"not a birthday2\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"not a birthday3\")); // non-numeric"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"not a birthday4\")); // non-numeric"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"11-e33-1998\")); // erroneous alphanumeric"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"11/12/1213\")); // incorrect delimiter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"11-13-1213\")); // months more than 12"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"32-11-1213\")); // dates more than 31"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate(\"9-11-12131\")); // years more than 4 digits"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.plusDays(1).format(DATE_TIME_FORMATTER))); // 1 day after the current day"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.minusYears(1).minusDays(1).format(DATE_TIME_FORMATTER))); // 1 year and 1 day before current date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(EndDate.isValidEndDate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.minusYears(2).format(DATE_TIME_FORMATTER))); // 2 years before current date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(EndDate.isValidEndDate("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.format(DATE_TIME_FORMATTER))); // current date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(EndDate.isValidEndDate("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.minusMonths(4).format(DATE_TIME_FORMATTER))); // 4 months before current date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(EndDate.isValidEndDate("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.minusYears(1).format(DATE_TIME_FORMATTER))); // 1 year before current date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/graph/GraphTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_AXIS_REPS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_AXIS_WEIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_ENDDATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_EXERCISE_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static seedu.address.logic.commands.GraphCommandTestUtil.VALID_STARTDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class GraphTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Graph graph1 \u003d new Graph(new ExerciseName(VALID_EXERCISE_NAME), new Axis(VALID_AXIS_REPS),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                new StartDate(VALID_STARTDATE), new EndDate(VALID_ENDDATE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Graph graph2 \u003d new Graph(new ExerciseName(VALID_EXERCISE_NAME), new Axis(VALID_AXIS_WEIGHT),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                new StartDate(VALID_STARTDATE), new EndDate(VALID_ENDDATE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        Graph graph1Copy \u003d new Graph(new ExerciseName(VALID_EXERCISE_NAME), new Axis(VALID_AXIS_REPS),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                new StartDate(VALID_STARTDATE), new EndDate(VALID_ENDDATE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(graph1.equals(graph1Copy));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(graph1.equals(graph1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(graph1.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(graph1.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // different Graph -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(graph1.equals(graph2));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/graph/StartDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "package seedu.address.model.graph;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "public class StartDateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public static final LocalDate DATE_NOW \u003d LocalDate.now();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StartDate(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    public void isValidStartDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // null birthday"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StartDate.isValidStartDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // invalid birthdays"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"91\")); // random numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"not a birthday\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"not a birthday1\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"not a birthday2\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"not a birthday3\")); // non-numeric"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"not a birthday4\")); // non-numeric"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"11-e33-1998\")); // erroneous alphanumeric"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"11/12/1213\")); // incorrect delimiter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"11-13-1213\")); // months more than 12"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"32-11-1213\")); // dates more than 31"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"9-11-12131\")); // years more than 4 digits"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.plusDays(1).format(DATE_TIME_FORMATTER))); // 1 day after the current day"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.minusYears(1).minusDays(1).format(DATE_TIME_FORMATTER))); // 1 year and 1 day before current date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertFalse(StartDate.isValidStartDate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.minusYears(2).format(DATE_TIME_FORMATTER))); // 2 years before current date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(StartDate.isValidStartDate("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.format(DATE_TIME_FORMATTER))); // current date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(StartDate.isValidStartDate("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.minusMonths(4).format(DATE_TIME_FORMATTER))); // 4 months before current date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "        assertTrue(StartDate.isValidStartDate("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "            DATE_NOW.minusYears(1).format(DATE_TIME_FORMATTER))); // 1 year before current date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ziyingli"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ziyingli": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/schedule/DayEnumTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "class DayEnumTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void valueOfTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(DayEnum.Weekday.valueOf(\"MON\") \u003d\u003d DayEnum.Weekday.MON);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/schedule/DayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "class DayTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private Day originalDay \u003d new Day(\"mon\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Day(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void isValidDay() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        //null day"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Day.isValidDay(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        //invalid days"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Day.isValidDay(\"\")); //empty String"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Day.isValidDay(\"bs289sb\")); //random String 1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Day.isValidDay(\"D#$D#..\")); //random String 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Day.isValidDay(\"monday\")); //not adhering to three-letter format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Day.isValidDay(\"kim\")); //random String 3"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        //valid days"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Day.isValidDay(\"mon\")); //monday"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Day.isValidDay(\"mOn\")); //case insensitive"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Day.isValidDay(\"tuE\")); //case insensitive"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Day.isValidDay(\"Wed\")); //case insensitive"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Day.isValidDay(\"tHu\")); //case insensitive"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Day.isValidDay(\"frI\")); //case insensitive"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Day.isValidDay(\"SAT\")); //case insensitive"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Day.isValidDay(\"sUN\")); //case insensitive"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Day clonedDay \u003d originalDay.clone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(originalDay.equals(clonedDay));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        System.out.println(originalDay.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(originalDay.toString().equals(\"MON\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void getDayEnum() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(originalDay.getDayEnum().equals(DayEnum.Weekday.MON));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/schedule/TimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "class TimeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private Time time \u003d new Time(\"0000\") {}; //anonymous class that extends abstract Time for testing"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void isValidTimingFormat() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        //null initialisation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Time.isValidTimingFormat(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        //invalid timings"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Time.isValidTimingFormat(\"\")); //empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Time.isValidTimingFormat(\"fr3u9f\")); //random strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(Time.isValidTimingFormat(\"4372\")); //wrong 4 digit number"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        //valid timings"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Time.isValidTimingFormat(\"0000\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Time.isValidTimingFormat(\"2359\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Time.isValidTimingFormat(\"0110\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void formatTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(Time.formatTime(\"0000\").equals(\"00:00\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void getTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(time.getTime().equals(\"0000\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(time.toString().equals(\"00:00\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Time secondTime \u003d new Time(\"0000\") {};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Time thirdTime \u003d new Time(\"0001\") {};"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(time.equals(secondTime));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertFalse(time.equals(thirdTime));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    void getDirectTimeInt() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        assertTrue(time.getDirectTimeInt() \u003d\u003d 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String invalidTagName \u003d \"/.,a\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedClientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.storage.JsonAdaptedClient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Birthday;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.CurrentWeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.TargetWeight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class JsonAdaptedClientTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_BIRTHDAY \u003d \"happy bday!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_CURRENT_WEIGHT \u003d \"eighty 2\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"helicopter\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_TARGET_WEIGHT \u003d \"tree fiddy\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String INVALID_HEIGHT \u003d \"fiddy 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private static final String INVALID_SCHEDULE \u003d \"mon Time: 99:99 - 55:55\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_BIRTHDAY \u003d BENSON.getBirthday().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_CURRENT_WEIGHT \u003d BENSON.getCurrentWeight().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_GENDER \u003d BENSON.getGender().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_TARGET_WEIGHT \u003d BENSON.getTargetWeight().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_HEIGHT \u003d BENSON.getHeight().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream().map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final List\u003cJsonAdaptedSport\u003e VALID_SPORTS \u003d BENSON.getSports().stream().map(JsonAdaptedSport::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private static final List\u003cJsonAdaptedExercise\u003e VALID_EXERCISE_LIST \u003d BENSON.getExerciseList()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            .asUnmodifiableObservableList().stream().map(JsonAdaptedExercise::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    private static final List\u003cJsonAdaptedSchedule\u003e VALID_SCHEDULE_LIST \u003d BENSON.getScheduleList().getArrayList()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            .stream().map(JsonAdaptedSchedule::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_validClientDetails_returnsClient() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(BENSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertEquals(BENSON, client.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(INVALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(null, VALID_GENDER, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT, VALID_REMARK,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT, VALID_REMARK,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT, VALID_REMARK,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                INVALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT, VALID_REMARK,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, invalidTags, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, client::toModelType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidBirthday_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, INVALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d Birthday.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullBirthday_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, null, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT, VALID_REMARK,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Birthday.class.getSimpleName());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidCurrentWeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, INVALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d CurrentWeight.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullCurrentWeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, null, VALID_TARGET_WEIGHT, VALID_HEIGHT, VALID_REMARK,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CurrentWeight.class.getSimpleName());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, INVALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d Gender.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT, VALID_REMARK,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidTargetWeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, INVALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d TargetWeight.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullTargetWeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, null, VALID_HEIGHT, VALID_REMARK,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TargetWeight.class.getSimpleName());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_invalidHeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, INVALID_HEIGHT,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d Height.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullHeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, null,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                VALID_REMARK, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Height.class.getSimpleName());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_nullRemark_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_GENDER, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                VALID_ADDRESS, VALID_BIRTHDAY, VALID_TAGS, VALID_CURRENT_WEIGHT, VALID_TARGET_WEIGHT, VALID_HEIGHT,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Dban1"
        },
        "content": "                null, VALID_SPORTS, VALID_EXERCISE_LIST, VALID_SCHEDULE_LIST);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tohkerwei": 2,
      "Dban1": 21,
      "AaronCQL": 221
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import static seedu.address.testutil.TypicalClients.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "class JsonAdaptedScheduleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final String INVALID_DAY \u003d \"RANDOMDAY\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final String INVALID_START_TIME \u003d \"5555\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final String INVALID_END_TIME \u003d \"9999\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final String VALID_DAY \u003d \"MON\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final String VALID_START_TIME \u003d \"1100\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private static final String VALID_END_TIME \u003d \"1200\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void toModelType_validSchedule_returnsSchedule() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        JsonAdaptedSchedule schedule \u003d new JsonAdaptedSchedule(BENSON.getScheduleList().getArrayList().get(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            assertEquals(BENSON.getScheduleList().getArrayList().get(0), schedule.toModelType());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            throw new AssertionError(\"This test should not fail.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonFitBizStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalClients.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalClients.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.testutil.TypicalClients.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class JsonFitBizStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonFitBizStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void readFitBiz_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readFitBiz(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFitBiz\u003e readFitBiz(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new JsonFitBizStorage(Paths.get(filePath)).readFitBiz(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertFalse(readFitBiz(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFitBiz(\"notJsonFormatFitBiz.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void readFitBiz_invalidClientFitBiz_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFitBiz(\"invalidClientFitBiz.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void readFitBiz_invalidAndValidClientFitBiz_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFitBiz(\"invalidAndValidClientFitBiz.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void readAndSaveFitBiz_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempFitBiz.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBiz original \u003d getTypicalFitBiz();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        JsonFitBizStorage jsonFitBizStorage \u003d new JsonFitBizStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        jsonFitBizStorage.saveFitBiz(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ReadOnlyFitBiz readBack \u003d jsonFitBizStorage.readFitBiz(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(original, new FitBiz(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        original.addClient(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        original.removeClient(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        jsonFitBizStorage.saveFitBiz(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        readBack \u003d jsonFitBizStorage.readFitBiz(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(original, new FitBiz(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        original.addClient(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        jsonFitBizStorage.saveFitBiz(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        readBack \u003d jsonFitBizStorage.readFitBiz().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(original, new FitBiz(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void saveFitBiz_nullFitBiz_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFitBiz(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Saves {@code fitBiz} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private void saveFitBiz(ReadOnlyFitBiz fitBiz, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            new JsonFitBizStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                    .saveFitBiz(fitBiz, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public void saveFitBiz_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFitBiz(new FitBiz(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 101,
      "AaronCQL": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableFitBizStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.testutil.TypicalClients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class JsonSerializableFitBizStorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableFitBizStorageTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final Path TYPICAL_CLIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalClientsFitBiz.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final Path INVALID_CLIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidClientFitBiz.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private static final Path DUPLICATE_CLIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateClientFitBiz.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_typicalClientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        JsonSerializableFitBizStorage dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_CLIENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                JsonSerializableFitBizStorage.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        FitBiz fitBizFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBiz typicalClientsFitBiz \u003d TypicalClients.getTypicalFitBiz();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(fitBizFromFile, typicalClientsFitBiz);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public void toModelType_invalidClientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        JsonSerializableFitBizStorage dataFromFile \u003d JsonUtil.readJsonFile(INVALID_CLIENT_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                JsonSerializableFitBizStorage.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void toModelType_duplicateClients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        JsonSerializableFitBizStorage dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_CLIENT_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "                JsonSerializableFitBizStorage.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFitBizStorage.MESSAGE_DUPLICATE_CLIENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 15,
      "Dban1": 1,
      "AaronCQL": 11,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        userPrefs.setFitBizFilePath(Paths.get(\"fitbiz.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.testutil.TypicalClients.getTypicalFitBiz;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.ReadOnlyFitBiz;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        JsonFitBizStorage fitBizStorage \u003d new JsonFitBizStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        storageManager \u003d new StorageManager(fitBizStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void fitBizReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * {@link JsonFitBizStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonFitBizStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        FitBiz original \u003d getTypicalFitBiz();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        storageManager.saveFitBiz(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        ReadOnlyFitBiz retrieved \u003d storageManager.readFitBiz().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertEquals(original, new FitBiz(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public void getFitBizFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        assertNotNull(storageManager.getFitBizFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 6,
      "AaronCQL": 8,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Birthday;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.CurrentWeight;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "import seedu.address.model.client.PersonalBest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.TargetWeight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * A utility class to help with building Client objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class ClientBuilder {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String DEFAULT_BIRTHDAY \u003d \"01-01-1992\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String DEFAULT_CURRENT_WEIGHT \u003d \"52\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String DEFAULT_TARGET_WEIGHT \u003d \"52\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"Male\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String DEFAULT_HEIGHT \u003d \"175\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"Some remarks\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static final String DEFAULT_SPORT \u003d \"Coding\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final String DEFAULT_SCHEDULE \u003d \"mon Time: 12:00 - 14:00\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Birthday birthday;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private CurrentWeight currentWeight;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Height height;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private Set\u003cSport\u003e sports;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private TargetWeight targetWeight;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    // TODO: change this later"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private UniqueExerciseList exerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "    private PersonalBest personalBest \u003d new PersonalBest();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private ScheduleList scheduleList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientBuilder() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        currentWeight \u003d new CurrentWeight(DEFAULT_CURRENT_WEIGHT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        height \u003d new Height(DEFAULT_HEIGHT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        targetWeight \u003d new TargetWeight(DEFAULT_TARGET_WEIGHT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        sports \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleList \u003d new ScheduleList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Initializes the ClientBuilder with the data of {@code clientToCopy}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientBuilder(Client clientToCopy) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        name \u003d clientToCopy.getName();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        phone \u003d clientToCopy.getPhone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        email \u003d clientToCopy.getEmail();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        address \u003d clientToCopy.getAddress();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        birthday \u003d clientToCopy.getBirthday();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        currentWeight \u003d clientToCopy.getCurrentWeight();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        gender \u003d clientToCopy.getGender();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        height \u003d clientToCopy.getHeight();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        remark \u003d clientToCopy.getRemark();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        targetWeight \u003d clientToCopy.getTargetWeight();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        sports \u003d new HashSet\u003c\u003e(clientToCopy.getSports());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(clientToCopy.getTags());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ScheduleList newScheduleList \u003d clientToCopy.getScheduleList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "        scheduleList \u003d newScheduleList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Sets the {@code Name} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientBuilder withName(String name) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Client} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Sets the {@code Address} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Sets the {@code Phone} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Sets the {@code Email} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Birthday} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ClientBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.birthday \u003d new Birthday(birthday);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code CurrentWeight} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ClientBuilder withCurrentWeight(String currentWeight) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.currentWeight \u003d new CurrentWeight(currentWeight);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Gender} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ClientBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Height} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ClientBuilder withHeight(String height) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.height \u003d new Height(height);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Remark} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ClientBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code TargetWeight} of the {@code Client} that we are building."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ClientBuilder withTargetWeight(String targetWeight) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.targetWeight \u003d new TargetWeight(targetWeight);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Parses the {@code sports} into a {@code Set\u003cSport\u003e} and set it to the {@code Client} that we are building."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public ClientBuilder withSports(String... sports) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.sports \u003d SampleDataUtil.getSportSet(sports);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Adds the {@code exercise} to {@code UniqueExerciseList}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ClientBuilder withExercisesInExerciseList(Exercise exercise) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseList.add(exercise);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Sets the {@code scheduleList} to the {@code Client} that we are building."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ClientBuilder withScheduleList(ScheduleList scheduleList) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.scheduleList \u003d scheduleList;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Builds and returns the client."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public Client build() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return new Client(name, gender, phone, email, address, tags, birthday, currentWeight,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ziyingli"
        },
        "content": "                targetWeight, height, remark, sports, exerciseList, personalBest, scheduleList);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 9,
      "ziyingli": 3,
      "tohkerwei": 2,
      "Dban1": 38,
      "AaronCQL": 98,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ClientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CURRENT_WEIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPORT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET_WEIGHT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * A utility class for Client."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class ClientUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns an add command string for adding the {@code client}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static String getAddCommand(Client client) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getClientDetails(client);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns the part of command string for the given {@code client}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static String getClientDetails(Client client) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        sb.append(PREFIX_NAME + client.getName().fullName + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        sb.append(PREFIX_PHONE + client.getPhone().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        sb.append(PREFIX_EMAIL + client.getEmail().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        sb.append(PREFIX_ADDRESS + client.getAddress().value + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        client.getTags().stream().forEach("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns the part of command string for the given {@code EditClientDescriptor}\u0027s details."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static String getEditClientDescriptorDetails(EditClientDescriptor descriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.getBirthday().ifPresent(bday -\u003e sb.append(PREFIX_BIRTHDAY).append(bday.displayValue).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.getCurrentWeight().ifPresent(cWeight -\u003e sb.append(PREFIX_CURRENT_WEIGHT)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .append(cWeight.value).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.getGender().ifPresent(gender -\u003e sb.append(PREFIX_GENDER).append(gender.value).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.getHeight().ifPresent(height -\u003e sb.append(PREFIX_HEIGHT).append(height.value).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.getRemark().ifPresent(remark -\u003e sb.append(PREFIX_REMARK).append(remark.value).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.getTargetWeight().ifPresent(tWeight -\u003e sb.append(PREFIX_TARGET_WEIGHT)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                .append(tWeight.value).append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        if (descriptor.getSports().isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            Set\u003cSport\u003e sports \u003d descriptor.getSports().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            if (sports.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                sb.append(PREFIX_SPORT).append(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "                sports.forEach(s -\u003e sb.append(PREFIX_SPORT).append(s.sportName).append(\" \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 16,
      "AaronCQL": 24,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditClientDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditClientDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Birthday;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.CurrentWeight;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Gender;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Height;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Sport;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.TargetWeight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * A utility class to help with building EditClientDescriptor objects."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class EditClientDescriptorBuilder {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private EditClientDescriptor descriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptorBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor \u003d new EditCommand.EditClientDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptorBuilder(EditClientDescriptor descriptor) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.descriptor \u003d new EditClientDescriptor(descriptor);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Returns an {@code EditClientDescriptor} with fields containing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code client}\u0027s details"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptorBuilder(Client client) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor \u003d new EditCommand.EditClientDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setName(client.getName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setPhone(client.getPhone());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setEmail(client.getEmail());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setAddress(client.getAddress());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setTags(client.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setGender(client.getGender());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setCurrentWeight(client.getCurrentWeight());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setTargetWeight(client.getTargetWeight());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setRemark(client.getRemark());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setSports(client.getSports());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setBirthday(client.getBirthday());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setHeight(client.getHeight());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Name} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Email} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Address} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Gender} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public EditClientDescriptorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setGender(new Gender(gender));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code CurrentWeight} of the {@code EditClientDescriptor} that we"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public EditClientDescriptorBuilder withCurrentWeight(String currentWeight) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setCurrentWeight(new CurrentWeight(currentWeight));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code TargetWeight} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public EditClientDescriptorBuilder withTargetWeight(String targetWeight) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setTargetWeight(new TargetWeight(targetWeight));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Remark} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public EditClientDescriptorBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setRemark(new Remark(remark));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Birthday} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public EditClientDescriptorBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setBirthday(new Birthday(birthday));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Sets the {@code Height} of the {@code EditClientDescriptor} that we are"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public EditClientDescriptorBuilder withHeight(String height) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setHeight(new Height(height));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Parses the {@code sports} into a {@code Set\u003cSport\u003e} and set it to the"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public EditClientDescriptorBuilder withSports(String... sports) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        Set\u003cSport\u003e tagSet \u003d Stream.of(sports).map(Sport::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        descriptor.setSports(tagSet);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * {@code EditClientDescriptor} that we are building."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public EditClientDescriptor build() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 80,
      "AaronCQL": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditExerciseDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.logic.commands.EditExerciseCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseSets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * A utility class to help with building EditExerciseDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @author @yonggiee"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class EditExerciseDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private EditExerciseDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor \u003d new EditExerciseCommand.EditExerciseDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptorBuilder(EditExerciseDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.descriptor \u003d new EditExerciseDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns an {@code EditExerciseDescriptor} with fields containing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * {@code Exercise}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptorBuilder(Exercise exercise) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor \u003d new EditExerciseCommand.EditExerciseDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseName(exercise.getExerciseName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseReps(exercise.getExerciseReps());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseSets(exercise.getExerciseSets());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseWeight(exercise.getExerciseWeight());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseDate(exercise.getExerciseDate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseName} of the {@code EditExerciseDescriptor} that we"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptorBuilder withExerciseName(String exerciseName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseName(new ExerciseName(exerciseName));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseReps} of the {@code EditExerciseDescriptor} that we"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptorBuilder withExerciseReps(String exerciseReps) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseReps(new ExerciseReps(exerciseReps));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseSets} of the {@code EditExerciseDescriptor} that we"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptorBuilder withExerciseSets(String exerciseSets) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseSets(new ExerciseSets(exerciseSets));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseWeight} of the {@code EditExerciseDescriptor} that we"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptorBuilder withExerciseWeight(String exerciseWeight) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseWeight(new ExerciseWeight(exerciseWeight));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseDate} of the {@code EditExerciseDescriptor} that we"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptorBuilder withExerciseDate(String exerciseDate) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        descriptor.setExerciseDate(new ExerciseDate(exerciseDate));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public EditExerciseDescriptor build() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExerciseBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseReps;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseSets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.ExerciseWeight;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * A utility class to help with building Exercise objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * @author @yonggiee"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class ExerciseBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String DEFAULT_EXERCISE_NAME \u003d \"Bench Press\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String DEFAULT_EXERCISE_REPS \u003d \"12\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String DEFAULT_EXERCISE_SETS \u003d \"4\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String DEFAULT_EXERCISE_WEIGHT \u003d \"100\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final String DEFAULT_EXERCISE_DATE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        LocalDate.now().minusDays(1).format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ExerciseName exerciseName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ExerciseReps exerciseReps;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ExerciseSets exerciseSets;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ExerciseWeight exerciseWeight;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private ExerciseDate exerciseDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseName \u003d new ExerciseName(DEFAULT_EXERCISE_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseReps \u003d new ExerciseReps(DEFAULT_EXERCISE_REPS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseSets \u003d new ExerciseSets(DEFAULT_EXERCISE_SETS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseWeight \u003d new ExerciseWeight(DEFAULT_EXERCISE_WEIGHT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseDate \u003d new ExerciseDate(DEFAULT_EXERCISE_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Initializes the ExerciseBuilder with the data of {@code exerciseToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseBuilder(Exercise exerciseToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseName \u003d exerciseToCopy.getExerciseName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseReps \u003d exerciseToCopy.getExerciseReps();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseSets \u003d exerciseToCopy.getExerciseSets();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseWeight \u003d exerciseToCopy.getExerciseWeight();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        exerciseDate \u003d exerciseToCopy.getExerciseDate();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseName} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseBuilder withExerciseName(String exerciseName) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseName \u003d new ExerciseName(exerciseName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseReps} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseBuilder withExerciseReps(String exerciseReps) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseReps \u003d new ExerciseReps(exerciseReps);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseSets} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseBuilder withExerciseSets(String exerciseSets) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseSets \u003d new ExerciseSets(exerciseSets);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseWeight} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseBuilder withExerciseWeight(String exerciseWeight) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseWeight \u003d new ExerciseWeight(exerciseWeight);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Sets the {@code ExerciseDate} of the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public ExerciseBuilder withExerciseDate(String exerciseDate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        this.exerciseDate \u003d new ExerciseDate(exerciseDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Builds and returns the Exercise."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public Exercise build() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        return new Exercise(exerciseName, exerciseReps, exerciseSets, exerciseWeight, exerciseDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FitBizBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * A utility class to help with building {@code FitBiz} objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " *     {@code FitBiz ab \u003d new FitBizBuilder().withClient(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "public class FitBizBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    private FitBiz fitBiz;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public FitBizBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBiz \u003d new FitBiz();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public FitBizBuilder(FitBiz fitBiz) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        this.fitBiz \u003d fitBiz;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     * Adds a new {@code Client} to the {@code FitBiz} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public FitBizBuilder withClient(Client client) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        fitBiz.addClient(client);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public FitBiz build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "        return fitBiz;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ScheduleBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dban1"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.Day;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.EndTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.ScheduleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.schedule.StartTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * A utility class to help build Schedules."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dban1"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class ScheduleBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String DEFAULT_DAY \u003d (\"MON\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"1100\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"1200\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private Day day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private StartTime startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private EndTime endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        day \u003d new Day(DEFAULT_DAY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        startTime \u003d new StartTime(DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        endTime \u003d new EndTime(DEFAULT_END_TIME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public Schedule build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new Schedule(day, startTime, endTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Wraps the current Schedule in a ScheduleList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleList buildAsList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        ArrayList\u003cSchedule\u003e scheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        scheduleList.add(this.build());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return new ScheduleList(scheduleList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Updates the Day of the ScheduleBuilder."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleBuilder withDay(String day) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.day \u003d new Day(day);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Updates the Start Time of the ScheduleBuilder."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param st"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleBuilder withStartTime(String st) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.startTime \u003d new StartTime(st);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Updates the End Time of the ScheduleBuilder."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @param et"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public ScheduleBuilder withEndTime(String et) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        this.endTime \u003d new EndTime(et);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dban1"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dban1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns the middle index of the client in the {@code model}\u0027s client list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return Index.fromOneBased(model.getFilteredClientList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns the last index of the client in the {@code model}\u0027s client list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return Index.fromOneBased(model.getFilteredClientList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "     * Returns the client in the {@code model}\u0027s client list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static Client getClient(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        return model.getFilteredClientList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dban1": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalClients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.FitBiz;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dban1"
        },
        "content": "import seedu.address.model.client.Client;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dban1"
        },
        "content": " * A utility class containing a list of {@code Client} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dban1"
        },
        "content": "public class TypicalClients {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client ALICE \u003d new ClientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExercisesInExerciseList(new ExerciseBuilder().build())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExercisesInExerciseList(new ExerciseBuilder().withExerciseName(\"ZANOTHER\").build())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Client ALICE_DELETED_EXERCISE \u003d new ClientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .withExercisesInExerciseList(new ExerciseBuilder().withExerciseName(\"ZANOTHER\").build())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client BENSON \u003d new ClientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withBirthday(\"12-03-1980\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "            .withCurrentWeight(\"70.3\").withGender(\"m\").withTargetWeight(\"90\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            .withHeight(\"180\").withSports(\"Hockey\", \"Skating\").withRemark(\"Thicc\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            .withScheduleList(new ScheduleBuilder().buildAsList()).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client CARL \u003d new ClientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client DANIEL \u003d new ClientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client ELLE \u003d new ClientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client FIONA \u003d new ClientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withTags(\"normal\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client GEORGE \u003d new ClientBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withTags(\"normal\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            .withSports(\"dance\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client HOON \u003d new ClientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client IDA \u003d new ClientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    // Manually added - Client\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client AMY \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Client BOB \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    //Manually added for filter"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final Client JESSICA \u003d new ClientBuilder().withName(\"Jessica Ang\").withPhone(\"84851234\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            .withEmail(\"jess@example.com\").withAddress(\"little indianic ocean\").withTags(\"handsome\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            .withSports(\"hockey\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "    public static final Client RACHEL \u003d new ClientBuilder().withName(\"Rachel Tan\").withPhone(\"8445631\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            .withEmail(\"tanr@example.com\").withAddress(\"chicagonean ave coast\").withTags(\"normal\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": "            .withSports(\"sumo\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    private TypicalClients() {} // prevents instantiation"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "     * Returns an {@code FitBiz} with all the typical clients."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "    public static FitBiz getTypicalFitBiz() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        FitBiz ab \u003d new FitBiz();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dban1"
        },
        "content": "        for (Client client : getTypicalClients()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dban1"
        },
        "content": "            ab.addClient(client);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static List\u003cClient\u003e getTypicalClients() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tohkerwei"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 13,
      "tohkerwei": 12,
      "Dban1": 21,
      "AaronCQL": 3,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExercises.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_DATE_BENCH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_DATE_PUSHUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_NAME_BENCH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_NAME_PUSHUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_REPS_BENCH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_REPS_PUSHUP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_SETS_BENCH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_SETS_PUSHUP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_WEIGHT_BENCH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import static seedu.address.logic.commands.ExerciseCommandTestUtil.VALID_EXERCISE_WEIGHT_PUSHUP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * A utility class containing a list of {@code Exercise} objects to be used in"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " * tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "public class TypicalExercises {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    // Manually added - Exercise details found in {@code ExerciseCommandTestUtil}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Exercise PUSHUP \u003d new ExerciseBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseName(VALID_EXERCISE_NAME_PUSHUP)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseReps(VALID_EXERCISE_REPS_PUSHUP)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseSets(VALID_EXERCISE_SETS_PUSHUP)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseWeight(VALID_EXERCISE_WEIGHT_PUSHUP)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseDate(VALID_EXERCISE_DATE_PUSHUP).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Exercise BENCH \u003d new ExerciseBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseName(VALID_EXERCISE_NAME_BENCH)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseReps(VALID_EXERCISE_REPS_BENCH)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseSets(VALID_EXERCISE_SETS_BENCH)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseWeight(VALID_EXERCISE_WEIGHT_BENCH)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "        .withExerciseDate(VALID_EXERCISE_DATE_BENCH).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    private TypicalExercises() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Index INDEX_FIRST_CLIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Index INDEX_SECOND_CLIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dban1"
        },
        "content": "    public static final Index INDEX_THIRD_CLIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Index INDEX_FIRST_EXERCISE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yonggiee"
        },
        "content": "    public static final Index INDEX_SECOND_EXERCISE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yonggiee": 3,
      "Dban1": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AaronCQL"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "AaronCQL": 1,
      "-": 3
    }
  }
]
