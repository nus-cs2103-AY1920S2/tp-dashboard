[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    compile group: \u0027org.apache.commons\u0027, name: \u0027commons-math3\u0027, version: \u00273.6.1\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    compile \u0027org.apache.pdfbox:pdfbox:2.0.19\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    archiveName \u003d \u0027cookingpapa.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        \u0027site-name\u0027: \u0027CookingPapa\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F11-4/main\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "gohkh": 5,
      "teo-jun-xiong": 1,
      "-": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.CartStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.CookbookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.InventoryStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonCartStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonCookbookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonInventoryStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CookingPapa ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CookbookStorage cookbookStorage \u003d new JsonCookbookStorage(userPrefs.getCookbookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryStorage inventoryStorage \u003d new JsonInventoryStorage(userPrefs.getInventoryFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartStorage cartStorage \u003d new JsonCartStorage(userPrefs.getCartFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storage \u003d new StorageManager(cookbookStorage, inventoryStorage, cartStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s cookbook, inventory, cart and"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The data from the sample cookbook, inventory or cart will be used instead if {@code storage}\u0027s respective data"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * is not found, or an empty cookbook, inventory and cart will be used instead if errors occur when reading"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code storage}\u0027s data."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cReadOnlyCookbook\u003e cookbookOptional;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cReadOnlyInventory\u003e inventoryOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cReadOnlyCart\u003e cartOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyCookbook initialCookbook;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyInventory initialInventory;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyCart initialCart;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            cookbookOptional \u003d storage.readCookbook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            inventoryOptional \u003d storage.readInventory();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            cartOptional \u003d storage.readCart();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!cookbookOptional.isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Cookbook\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!inventoryOptional.isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Inventory\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!cartOptional.isPresent()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Cart\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCookbook \u003d cookbookOptional.orElseGet(SampleDataUtil::getSampleCookbook);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialInventory \u003d inventoryOptional.orElseGet(SampleDataUtil::getSampleInventory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCart \u003d cartOptional.orElseGet(SampleDataUtil::getSampleCart);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Cooking Papa\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialInventory \u003d new Inventory();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCart \u003d new Cart();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Cooking Papa\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialInventory \u003d new Inventory();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCart \u003d new Cart();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new ModelManager(initialCookbook, initialInventory, initialCart, userPrefs);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Cooking Papa\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.info(\"Starting Cooking Papa \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Cooking Papa ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 54,
      "teo-jun-xiong": 2,
      "-": 158
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return \"Current log level : \" + logLevel"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nPreference file Location : \" + userPrefsFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String LOG_FILE \u003d \"cookingpapa.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX \u003d \"The recipe index provided is out of bounds \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\n %s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_INVALID_STEP_DISPLAYED_INDEX \u003d \"The step index provided is out of bounds\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STEPS \u003d \"This step already exists in the recipe\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"This tag already exists in the recipe\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG \u003d \"The Tag provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_RECIPES_LISTED_OVERVIEW \u003d \"%1$d recipe(s) listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_DIFFERENT_NUMBER_OF_INPUTS \u003d \"The number of ingredient names provided (%d)\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \" should be equal to the number of ingredient quantities (%d) provided.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 6,
      "hans555": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/fraction/MixedFraction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.commons.core.fraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.math.BigInteger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.apache.commons.math3.fraction.Fraction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a mixed fraction."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class MixedFraction extends Fraction {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUM_OF_PARTS_IN_PURE_FRACTION \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int WHOLE_PART_OF_PURE_FRACTION \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int FRACTIONAL_PART_POSITION_IN_PURE_FRACTION \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUM_OF_PARTS_IN_MIXED_FRACTION \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int WHOLE_PART_POSITION_IN_MIXED_FRACTION \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int FRACTIONAL_PART_POSITION_IN_MIXED_FRACTION \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUM_OF_PARTS_IN_FRACTION \u003d 2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUMERATOR_POSITION \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int DENOMINATOR_POSITION \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a {@code MixedFraction} from a {@code Fraction}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public MixedFraction(Fraction f) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(f.getNumerator(), f.getDenominator());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a {@code MixedFraction} from a numerator and a denominator."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public MixedFraction(int num, int den) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(num, den);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the string argument as an unsigned mixed fraction."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param s a {@code String} containing the {@code MixedFraction} representation to be parsed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the mixed fraction value represented by the argument."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws NumberFormatException if the string does not contain a parsable unsigned mixed fraction."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static MixedFraction parseUnsignedMixedFraction(String s) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (s \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new NumberFormatException(\"null\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int wholePart;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int fractionalPartPosition;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String[] splitInput \u003d s.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (splitInput.length \u003d\u003d NUM_OF_PARTS_IN_PURE_FRACTION) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            wholePart \u003d WHOLE_PART_OF_PURE_FRACTION;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            fractionalPartPosition \u003d FRACTIONAL_PART_POSITION_IN_PURE_FRACTION;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (splitInput.length \u003d\u003d NUM_OF_PARTS_IN_MIXED_FRACTION) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            wholePart \u003d Integer.parseInt(splitInput[WHOLE_PART_POSITION_IN_MIXED_FRACTION]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            fractionalPartPosition \u003d FRACTIONAL_PART_POSITION_IN_MIXED_FRACTION;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new NumberFormatException(s);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String[] splitFraction \u003d splitInput[fractionalPartPosition].split(\"/\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (splitFraction.length !\u003d NUM_OF_PARTS_IN_FRACTION) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new NumberFormatException(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int numerator \u003d Integer.parseInt(splitFraction[NUMERATOR_POSITION]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int denominator \u003d Integer.parseInt(splitFraction[DENOMINATOR_POSITION]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        numerator +\u003d wholePart * denominator;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new MixedFraction(numerator, denominator);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the {@code MixedFraction} representation of a {@code BigDecimal} value."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param value the {@code BigDecimal} value."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the {@code MixedFraction} representation of the {@code BigDecimal} value."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static MixedFraction getFromBigDecimal(BigDecimal value) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String stringRepresentation \u003d value.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        boolean hasFractionalPart \u003d stringRepresentation.split(\"\\\\.\").length \u003e 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int wholePart \u003d Integer.parseInt(stringRepresentation.split(\"\\\\.\")[0]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int numerator \u003d wholePart;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int denominator \u003d 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (hasFractionalPart) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String fractionalPartString \u003d stringRepresentation.split(\"\\\\.\")[1];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            denominator \u003d new BigInteger(\"10\").pow(fractionalPartString.length()).intValue();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (numerator \u003e\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                numerator \u003d wholePart * denominator + Integer.parseInt(fractionalPartString);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                numerator \u003d wholePart * denominator - Integer.parseInt(fractionalPartString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new MixedFraction(numerator, denominator);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds the specified mixed fraction."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public MixedFraction add(MixedFraction mixedFraction) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new MixedFraction(super.add(mixedFraction));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Subtracts the specified mixed fraction."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public MixedFraction subtract(MixedFraction mixedFraction) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new MixedFraction(super.subtract(mixedFraction));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Divides this mixed fraction by the specified mixed fraction."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public MixedFraction divide(MixedFraction mixedFraction) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new MixedFraction(super.divide(mixedFraction));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int wholePart \u003d intValue();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int numerator \u003d getNumerator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int denominator \u003d getDenominator();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (numerator \u003e 0) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            numerator \u003d numerator - (wholePart * denominator);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (wholePart \u003c 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            numerator \u003d (wholePart * denominator) - numerator;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (numerator \u003d\u003d 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return String.format(\"%d\", wholePart);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (wholePart \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return String.format(\"%d/%d\", numerator, denominator);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"%d %d/%d\", wholePart, numerator, denominator);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the Cookbook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see seedu.address.model.Model#getCookbook()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyCookbook getCookbook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the Inventory."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see seedu.address.model.Model#getInventory()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyInventory getInventory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the Cart."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see seedu.address.model.Model#getCart()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyCart getCart();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of cookbook recipes */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of inventory ingredients */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredInventoryIngredientList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of cart ingredients */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredCartIngredientList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered cart */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredCart();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 cookbook file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCookbookFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 cart file path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCartFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 38,
      "teo-jun-xiong": 7,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.CookingPapaParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final CookingPapaParser cookingPapaParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cookingPapaParser \u003d new CookingPapaParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        logger.info(\"USER COMMAND: \" + commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Command command \u003d cookingPapaParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            storage.saveCookbook(model.getCookbook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            storage.saveInventory(model.getInventory());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            storage.saveCart(model.getCart());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ReadOnlyCookbook getCookbook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getCookbook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ReadOnlyInventory getInventory() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getInventory();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ReadOnlyCart getCart() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getCart();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredCookbookRecipeList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredInventoryIngredientList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getFilteredInventoryIngredientList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredCartIngredientList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getFilteredCartIngredientList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredCart() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return model.getFilteredCartIngredientList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCookbookFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getCookbookFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getInventoryFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCartFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getCartFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 40,
      "teo-jun-xiong": 15,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * The application should expand the view for a recipe."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final boolean view;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * The index of the recipe to view;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final Index recipeIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.view \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipeIndex \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean view, Index recipeIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.view \u003d view;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean isViewRecipe() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return view;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public Index getRecipeIndex() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return recipeIndex;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 30,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \": exits CookingPapa.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof ExitCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "teo-jun-xiong": 1,
      "hans555": 7,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \": shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof HelpCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "teo-jun-xiong": 1,
      "hans555": 6,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Adds ingredients to the cart."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public abstract class CartAddCommand extends CartCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" ingredient\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": adds an ingredient to your cart.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" ingredient \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"10\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" recipe INDEX\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": adds all the ingredients from a recipe to your cart.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Parameters: INDEX (must be a valid positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" recipe 1\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 5,
      "teo-jun-xiong": 2,
      "tzihiang": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartAddIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Adds an ingredient to the cart"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartAddIngredientCommand extends CartAddCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ingredient\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ingredient added: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": adds ingredients to your cart.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"10\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private final Ingredient toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a CartAddIngredientCommand to add the specified {@code Ingredient} to the cart"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartAddIngredientCommand(Ingredient toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.addCartIngredient(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof CartAddIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                \u0026\u0026 toAdd.equals(((CartAddIngredientCommand) other).toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 3,
      "hans555": 1,
      "tzihiang": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartAddRecipeIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Adds all the ingredients from the indexed recipe to cart"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartAddRecipeIngredientCommand extends CartAddCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recipe\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Ingredients from recipe %1$s added.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + CartAddCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": adds all the ingredients from a recipe to your cart.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"10\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index recipeIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a CartAddIngredientCommand to add the specified {@code Ingredient} to the cart"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public CartAddRecipeIngredientCommand(Index recipeIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (recipeIndex.getZeroBased() \u003e\u003d model.getCookbook().getRecipeList().size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe targetedRecipe \u003d model.getCookbook().getRecipeList().get(recipeIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        targetedRecipe.getIngredients().stream().forEach(model::addCartIngredient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetedRecipe.getName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || (other instanceof CartAddRecipeIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 (recipeIndex.equals(((CartAddRecipeIngredientCommand) other).recipeIndex)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "teo-jun-xiong": 27,
      "hans555": 13,
      "tzihiang": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Removes all ingredients from the cart"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartClearCommand extends CartCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All ingredients from cart cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_SUCCESS_EMPTY \u003d \"Your cart is empty.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": removes all ingredients from your cart.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Creates a CartClearCommand to clear the cart"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartClearCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        boolean isEmpty \u003d model.getCart().getIngredientList().size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.setCart(new Cart());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return isEmpty ? new CommandResult(MESSAGE_SUCCESS_EMPTY) : new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || other instanceof CartClearCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 18,
      "shanecsj": 1,
      "tzihiang": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.CompatibleIngredientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Represents an Cart command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public abstract class CartCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"cart\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Stores the details to edit the cart with."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static class EditIngredientDescriptor {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private CompatibleIngredientList ingredients;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        public EditIngredientDescriptor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public EditIngredientDescriptor(EditIngredientDescriptor toCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            setIngredients(toCopy.ingredients);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Creates and returns a {@code Cart} with the details of {@code CartToEdit}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * edited with {@code editCartDescriptor}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public static Cart createEditedCart(Cart cartToEdit, EditIngredientDescriptor editCartDescriptor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            assert cartToEdit !\u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            CompatibleIngredientList updatedIngredients \u003d editCartDescriptor.getIngredients()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(cartToEdit.getCompatibleIngredientList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new Cart((ReadOnlyCart) updatedIngredients);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return CollectionUtil.isAnyNonNull(ingredients);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setIngredients(CompatibleIngredientList ingredients) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cCompatibleIngredientList\u003e getIngredients() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return Optional.ofNullable(ingredients);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            if (!(other instanceof CartCommand.EditIngredientDescriptor)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            EditIngredientDescriptor e \u003d (EditIngredientDescriptor) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return getIngredients().equals(e.getIngredients());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 8,
      "teo-jun-xiong": 3,
      "tzihiang": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartExportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.util.PdfExporter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Exports the ingredients in cart to a pdf file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartExportCommand extends CartCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All cart ingredients have been exported to a pdf file!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": exports all ingredients inside the cart to a PDF file located in the same folder\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"as Cooking Papa\\n. Parameters:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String MESSAGE_FILE_NOT_FOUND \u003d \"\u0027cart.pdf\u0027 is opened in another application. Please close \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"it and try again.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CartExportCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            PdfExporter.exportCart(model.getCart().getIngredientList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return new CommandResult(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || other instanceof CartExportCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartMoveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * This command moves all ingredients from the cart to inventory"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartMoveCommand extends CartCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"move\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All ingredients from cart successfully added to your inventory!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_SUCCESS_EMPTY \u003d \"Your cart is empty.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": adds all your ingredients from the cart to your inventory.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"This also empties the cart in the process.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a CartMoveCommand to move the ingredients in the cart to the inventory"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CartMoveCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        boolean isEmpty \u003d model.getCart().getIngredientList().size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.getCart().getIngredientList().forEach(model::addInventoryIngredient);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.setCart(new Cart());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return isEmpty ? new CommandResult(MESSAGE_SUCCESS_EMPTY) : new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || other instanceof CartMoveCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 3,
      "teo-jun-xiong": 5,
      "tzihiang": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartRemoveIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.NonPositiveIngredientQuantityException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Removes an ingredient from the cart"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartRemoveIngredientCommand extends CartCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INGREDIENT_KEYWORD \u003d \"ingredient\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String ALL_KEYWORD \u003d \"All\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s removed from cart\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_INGREDIENT_QUANTITY_TOO_HIGH \u003d \"The quantity specified is too large\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_INGREDIENT_NOT_FOUND \u003d \"The cart does not contain %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": removes ingredients from your cart.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"Examples:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \" + PREFIX_INGREDIENT_QUANTITY + \"10\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final IngredientName ingredientName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Optional\u003cIngredientQuantity\u003e ingredientQuantity;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Creates a CartRemoveIngredientCommand to remove an ingredient with the specified {@code IngredientName} and"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code IngredientQuantity} (if any) to the cart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CartRemoveIngredientCommand(IngredientName ingredientName,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                       Optional\u003cIngredientQuantity\u003e ingredientQuantity) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientQuantity \u003d ingredientQuantity;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            ingredientQuantity.map(x -\u003e new Ingredient(ingredientName, x))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .ifPresentOrElse(model::removeCartIngredient, () -\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                        model.removeCartIngredient(ingredientName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String ingredientRemoved \u003d ingredientQuantity.map(x -\u003e new Ingredient(ingredientName, x).toString())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElseGet(() -\u003e ALL_KEYWORD + \" \" + ingredientName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, ingredientRemoved));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IngredientNotFoundException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INGREDIENT_NOT_FOUND, ingredientName));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (NonPositiveIngredientQuantityException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INGREDIENT_QUANTITY_TOO_HIGH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof CartRemoveIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 ingredientName.equals(((CartRemoveIngredientCommand) other).ingredientName)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 ingredientQuantity.equals(((CartRemoveIngredientCommand) other).ingredientQuantity));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 42,
      "teo-jun-xiong": 6,
      "tzihiang": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Adds a recipe into the cookbook."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookAddCommand extends CookbookCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD + \" \" + \"recipe\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": adds a new recipe to the cookbook.\\n\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_NAME + \"INGREDIENT_NAME] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_QUANTITY + \"INGREDIENT_QUANTITY] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"[\" + PREFIX_STEP_DESCRIPTION + \"STEP_DESCRIPTION] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\\n\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Examples:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"- \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + RECIPE_KEYWORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_NAME + \"Bacon Carbonara \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + \"Best cream pasta made in Italy.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"- \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + RECIPE_KEYWORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_NAME + \"Chicken Ham Sandwich \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + \"Juicy ham sandwiched between crispy toasted bread. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Chicken Ham \" + PREFIX_INGREDIENT_QUANTITY + \"1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"White Bread \" + PREFIX_INGREDIENT_QUANTITY + \"2 slices \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_STEP_DESCRIPTION + \"Toast the bread \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_STEP_DESCRIPTION + \"Grill the ham \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_TAG + \"Sandwich \" + PREFIX_TAG + \"Easy\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New recipe (index %2$d) added: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe (%1$s) already exists in the cookbook.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final Recipe toAdd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Creates a CookbookAddCommand to add a new {@code recipe} to the cookbook"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookAddCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        toAdd \u003d recipe;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (model.hasCookbookRecipe(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_RECIPE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    toAdd.getName().fullRecipeName));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.addCookbookRecipe(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getName().fullRecipeName,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                model.getCookbook().getRecipeList().indexOf(toAdd) + 1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof CookbookAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 toAdd.equals(((CookbookAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "shanecsj": 68,
      "teo-jun-xiong": 4,
      "hans555": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a cookbook command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class CookbookCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"cookbook\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String RECIPE_KEYWORD \u003d \"recipe\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 12,
      "shanecsj": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.RecipeDefaultComparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Shows all the recipes in the cookbook."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookListCommand extends CookbookCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": shows the list of recipes in the cookbook.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showing all recipes in the cookbook.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.sortCookbook(new RecipeDefaultComparator());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.updateFilteredCookbookRecipeList(Model.PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || other instanceof CookbookListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "teo-jun-xiong": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookRemoveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Removes a recipe identified using it\u0027s displayed index from the cookbook."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookRemoveCommand extends CookbookCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_WORD + \" \" + RECIPE_KEYWORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": remove the recipe of the specified index from the cookbook\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive valid integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + RECIPE_KEYWORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted recipe: %1$s from the cookbook\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookRemoveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    CookbookRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Recipe recipeToRemove \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.removeCookbookRecipe(recipeToRemove);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, recipeToRemove.getName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof CookbookRemoveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((CookbookRemoveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "shanecsj": 47,
      "teo-jun-xiong": 8,
      "hans555": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookSearchByInventoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RECIPES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeContainsInventoryIngredientsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.RecipeInventoryIngredientsSimilarityComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookSearchByInventoryCommand extends CookbookSearchCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \"\\n\" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + SEARCH_INVENTORY_COMMAND + \": finds all\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    + \" recipes whose ingredient lists contain ingredients in the inventory, and displays them as a \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    + \"list with index numbers. The list is sorted by the level of similarity between the ingredients\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    + \" in the recipe and the ingredients in the inventory.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    + \"Parameters: \" + SEARCH_INVENTORY_COMMAND"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + SEARCH_INVENTORY_COMMAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookSearchByInventoryCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyInventory inventory \u003d model.getInventory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.sortCookbook(new RecipeInventoryIngredientsSimilarityComparator(inventory));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.updateFilteredCookbookRecipeList(new RecipeContainsInventoryIngredientsPredicate(inventory));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                String.format(MESSAGE_RECIPES_LISTED_OVERVIEW, model.getFilteredCookbookRecipeList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || other instanceof CookbookSearchByInventoryCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 5,
      "shanecsj": 23,
      "teo-jun-xiong": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookSearchByKeywordCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RECIPES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEARCH_KEYWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookSearchByKeywordCommand extends CookbookSearchCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_WORD + \" \" + RECIPE_KEYWORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": finds all recipes whose recipe names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as an alphabetically sorted list with \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: \" + PREFIX_SEARCH_KEYWORD + \"KEYWORD\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Example:\" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_WORD + \" \" + RECIPE_KEYWORD + \" \" + PREFIX_SEARCH_KEYWORD + \"bacon\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final RecipeNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookSearchByKeywordCommand(RecipeNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        model.updateFilteredCookbookRecipeList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                String.format(MESSAGE_RECIPES_LISTED_OVERVIEW, model.getFilteredCookbookRecipeList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof CookbookSearchByKeywordCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 predicate.equals(((CookbookSearchByKeywordCommand) other).predicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shanecsj": 39,
      "teo-jun-xiong": 7,
      "hans555": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookSearchByTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeContainsTagsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookSearchByTagCommand extends CookbookSearchCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD + \" \" + SEARCH_TAG_COMMAND"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": Finds all recipes whose recipe names contain any of the specified tags (case-insensitive) and\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \" displays them as an alphabetically sorted list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Parameters: \" + PREFIX_TAG + \"TAG\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + SEARCH_TAG_COMMAND + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_TAG + \"breakfast\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final RecipeContainsTagsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CookbookSearchByTagCommand(RecipeContainsTagsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.updateFilteredCookbookRecipeList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                String.format(Messages.MESSAGE_RECIPES_LISTED_OVERVIEW, model.getFilteredCookbookRecipeList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || (other instanceof CookbookSearchByTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u0026\u0026 (predicate.equals(((CookbookSearchByTagCommand) other).predicate)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shanecsj": 29,
      "teo-jun-xiong": 14,
      "hans555": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookSearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEARCH_KEYWORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Searches for a recipe in the cookbook based on inventory/keyword/tag."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public abstract class CookbookSearchCommand extends CookbookCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String SEARCH_INVENTORY_COMMAND \u003d \"inventory\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String SEARCH_TAG_COMMAND \u003d \"tag\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": searches the cookbook by keyword(s), tag(s) or your inventory.\\n\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters for searching the cookbook by keyword(s): \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + RECIPE_KEYWORD + \" \" + PREFIX_SEARCH_KEYWORD + \"KEYWORD\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + RECIPE_KEYWORD + \" \" + PREFIX_SEARCH_KEYWORD + \"carbonara\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters for searching the cookbook by tag(s): \" + SEARCH_TAG_COMMAND + \" \" + PREFIX_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + SEARCH_TAG_COMMAND + \" \" + PREFIX_TAG + \"breakfast\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Parameters for searching the cookbook by the ingredients in your inventory: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + SEARCH_INVENTORY_COMMAND + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + SEARCH_INVENTORY_COMMAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 19,
      "teo-jun-xiong": 4,
      "hans555": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * View a recipe identified using it\u0027s displayed index from the cookbook."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookViewCommand extends CookbookCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_WORD + \" \" + RECIPE_KEYWORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": views the recipe identified by the index number used in the displayed recipe list.\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: INDEX (must be a positive valid integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + RECIPE_KEYWORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Viewing recipe %1$d (%2$s)\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    CookbookViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "                lastShownList.get(targetIndex.getZeroBased()).getName().fullRecipeName),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "                true, targetIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof CookbookViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((CookbookViewCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "shanecsj": 45,
      "teo-jun-xiong": 7,
      "hans555": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/inventory/InventoryAddIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Adds an ingredient to the inventory"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryAddIngredientCommand extends InventoryCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String INGREDIENT_KEYWORD \u003d \"ingredient\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ingredient added: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + INGREDIENT_KEYWORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \": adds ingredients to your inventory.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_WORD + \" \" + INGREDIENT_KEYWORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"10\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private final Ingredient toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a InventoryAddIngredientCommand to add the specified {@code Ingredient} to the inventory"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public InventoryAddIngredientCommand(Ingredient toAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addInventoryIngredient(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof InventoryAddIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                \u0026\u0026 toAdd.equals(((InventoryAddIngredientCommand) other).toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 5,
      "teo-jun-xiong": 10,
      "tzihiang": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/inventory/InventoryClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Removes all ingredients from the inventory"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryClearCommand extends InventoryCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All ingredients from inventory cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_SUCCESS_EMPTY \u003d \"Your inventory is empty.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": removes all ingredients from your inventory.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a InventoryClearCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public InventoryClearCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        boolean isEmpty \u003d model.getInventory().getIngredientList().size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.setInventory(new Inventory());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return isEmpty ? new CommandResult(MESSAGE_SUCCESS_EMPTY) : new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || other instanceof InventoryClearCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 6,
      "shanecsj": 5,
      "tzihiang": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/inventory/InventoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.CompatibleIngredientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents an inventory command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class InventoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"inventory\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Stores the details to edit the inventory with."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static class EditIngredientDescriptor {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private CompatibleIngredientList ingredients;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        public EditIngredientDescriptor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public EditIngredientDescriptor(EditIngredientDescriptor toCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            setIngredients(toCopy.ingredients);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Creates and returns a {@code Inventory} with the details of {@code inventoryToEdit}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * edited with {@code editInventoryDescriptor}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public static Inventory createEditedInventory(Inventory inventoryToEdit,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                                                      EditIngredientDescriptor editInventoryDescriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            assert inventoryToEdit !\u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            CompatibleIngredientList updatedIngredients \u003d editInventoryDescriptor.getIngredients()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(inventoryToEdit.getCompatibleIngredientList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new Inventory((ReadOnlyInventory) updatedIngredients);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return CollectionUtil.isAnyNonNull(ingredients);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setIngredients(CompatibleIngredientList ingredients) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cCompatibleIngredientList\u003e getIngredients() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return Optional.ofNullable(ingredients);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            if (!(other instanceof InventoryCommand.EditIngredientDescriptor)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            EditIngredientDescriptor e \u003d (EditIngredientDescriptor) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return getIngredients().equals(e.getIngredients());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 19,
      "teo-jun-xiong": 3,
      "tzihiang": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/inventory/InventoryCookCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.RecipeInventoryIngredientsSimilarityComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Removes all the ingredients of the selected recipe from the inventory"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class InventoryCookCommand extends InventoryCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cook\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String RECIPE_KEYWORD \u003d \"recipe\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All ingredients from recipe %1$s removed from inventory\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_MISSING_INGREDIENT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            \"Your inventory does not contain all the ingredients of recipe %1$s.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_QUANTITY \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            \"Your inventory contains insufficient quantities of the ingredients in recipe %1$s.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_NO_INGREDIENT_IN_RECIPE \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "            \"Recipe %1$s does not require any ingredients to cook.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + RECIPE_KEYWORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": removes all ingredients of a specified recipe from your inventory.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer)\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + RECIPE_KEYWORD + \" 1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Creates a InventoryCookRecipeCommand to remove all the {@code Ingredient} of a recipe from the inventory"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public InventoryCookCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireAllNonNull(targetIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns true if all the ingredients in recipe exist in the inventory"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private boolean hasInventoryIngredients(ReadOnlyInventory inventory, Recipe recipe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(inventory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ObservableList\u003cIngredient\u003e inventoryList \u003d inventory.getIngredientList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ObservableList\u003cIngredient\u003e recipeIngredients \u003d recipe.getIngredients();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return recipeIngredients.stream().map(recipeIngredient -\u003e inventoryList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .stream().map(inventoryIngredient -\u003e inventoryIngredient.isCompatibleWith(recipeIngredient))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .reduce(false, (x, y) -\u003e x || y, (x , y) -\u003e x || y))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .allMatch(isCompatible -\u003e isCompatible.equals(true));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Returns true if all ingredients\u0027s quantity in recipe is lesser than or equal to the ingredient\u0027s quantity"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * in inventory"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * The ingredients in the recipe must exist in the inventory."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private boolean hasSufficientInventoryIngredients(ReadOnlyInventory inventory, Recipe recipe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(inventory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return RecipeInventoryIngredientsSimilarityComparator.calculateSimilarity(recipe, inventory) \u003d\u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        List\u003cRecipe\u003e recipeList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d recipeList.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    InventoryCookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Recipe selectedRecipe \u003d recipeList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (selectedRecipe.getIngredients().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_INGREDIENT_IN_RECIPE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    selectedRecipe.getName().toString()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!hasInventoryIngredients(model.getInventory(), selectedRecipe)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_MISSING_INGREDIENT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    selectedRecipe.getName().toString()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } else if (!hasSufficientInventoryIngredients(model.getInventory(), selectedRecipe)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INSUFFICIENT_QUANTITY,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    selectedRecipe.getName().toString()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        selectedRecipe.getIngredients().stream().forEach(model::removeInventoryIngredient);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof InventoryCookCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((InventoryCookCommand) other).targetIndex));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 4,
      "shanecsj": 77,
      "hans555": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/inventory/InventoryRemoveIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.NonPositiveIngredientQuantityException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Creates an InventoryRemoveIngredientCommand to remove an ingredient with the specified {@code IngredientName} and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * {@code IngredientQuantity} (if any) from the inventory"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryRemoveIngredientCommand extends InventoryCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INGREDIENT_KEYWORD \u003d \"ingredient\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String ALL_KEYWORD \u003d \"All\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s removed from inventory\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_INGREDIENT_QUANTITY_TOO_HIGH \u003d \"The quantity specified is too large\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_INGREDIENT_NOT_FOUND \u003d \"The inventory does not contain %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + INGREDIENT_KEYWORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \":removes ingredients to your inventory.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"Examples:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \" + INGREDIENT_KEYWORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \" + PREFIX_INGREDIENT_QUANTITY + \"10\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final IngredientName ingredientName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Optional\u003cIngredientQuantity\u003e ingredientQuantity;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a InventoryAddIngredientCommand to add the specified {@code Ingredient} to the inventory"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public InventoryRemoveIngredientCommand(IngredientName ingredientName,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                            Optional\u003cIngredientQuantity\u003e ingredientQuantity) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientQuantity \u003d ingredientQuantity;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            ingredientQuantity.map(x -\u003e new Ingredient(ingredientName, x))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .ifPresentOrElse(model::removeInventoryIngredient, () -\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                        model.removeInventoryIngredient(ingredientName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String ingredientRemoved \u003d ingredientQuantity.map(x -\u003e new Ingredient(ingredientName, x).toString())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElseGet(() -\u003e ALL_KEYWORD + \" \" + ingredientName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, ingredientRemoved));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IngredientNotFoundException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INGREDIENT_NOT_FOUND, ingredientName));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (NonPositiveIngredientQuantityException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INGREDIENT_QUANTITY_TOO_HIGH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof InventoryRemoveIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 ingredientName.equals(((InventoryRemoveIngredientCommand) other).ingredientName)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 ingredientQuantity.equals(((InventoryRemoveIngredientCommand) other).ingredientQuantity));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 44,
      "teo-jun-xiong": 10,
      "tzihiang": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Adds a step/ingredient/tag to a recipe inside the cookbook"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class RecipeAddCommand extends RecipeCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" INDEX \" + COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": adds an ingredient, a step, or a tag to a recipe with the given INDEX.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for adding an ingredient: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + INGREDIENT_KEYWORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"12\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for adding a step: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_STEP_INDEX + \"STEP_INDEX \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_STEP_DESCRIPTION + \"STEP_DESCRIPTION\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + STEP_KEYWORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_STEP_INDEX + \"1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_STEP_DESCRIPTION + \"Add potatoes and water to a large pot, and bring to a boil.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for adding a tag: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + TAG_KEYWORD + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_TAG + \"Pasta\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 25,
      "shanecsj": 5,
      "teo-jun-xiong": 4,
      "hans555": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeAddIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IncompatibleIngredientException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Adds an ingredient to a recipe."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class RecipeAddIngredientCommand extends RecipeAddCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ingredient added for %2$s: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_INCOMPATIBLE_UNITS \u003d \"%1$s has different units in %2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Ingredient toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Creates a RecipeAddIngredientCommand to add the specified {@code Ingredient} to the recipe"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public RecipeAddIngredientCommand(Index index, Ingredient toAdd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireAllNonNull(index, toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert index.getZeroBased() \u003c lastShownList.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.setIngredients(recipeToEdit.getIngredients());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            ingredients.add(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            editRecipeDescriptor.setIngredients(ingredients.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd, editedRecipe.getName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IncompatibleIngredientException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INCOMPATIBLE_UNITS, toAdd, recipeToEdit.getName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                || (other instanceof RecipeAddIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RecipeAddIngredientCommand) other).toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 70,
      "teo-jun-xiong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeAddStepCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STEP_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Adds a step to a recipe."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class RecipeAddStepCommand extends RecipeAddCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New step added for %1$s: %2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String NEXT_KEYWORD \u003d \"next\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index recipeIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Optional\u003cIndex\u003e stepIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Step toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeAddStepCommand(Index recipeIndex, Optional\u003cIndex\u003e stepIndex, Step toAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(recipeIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.stepIndex \u003d stepIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (recipeIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(recipeIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList targetStepList \u003d recipeToEdit.getSteps();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (targetStepList.contains(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(((Messages.MESSAGE_DUPLICATE_STEPS)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (stepIndex.isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "            if (stepIndex.get().getZeroBased() \u003e targetStepList.asUnmodifiableObservableList().size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "                // ensure the step index is valid"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_STEP_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "            targetStepList.add(stepIndex.get(), toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "            targetStepList.add(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert stepIndex.isPresent();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editRecipeDescriptor.setSteps(targetStepList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedRecipe.getName().fullRecipeName, toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof RecipeAddStepCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RecipeAddStepCommand) other).toAdd)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 stepIndex.equals(((RecipeAddStepCommand) other).stepIndex));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 17,
      "teo-jun-xiong": 8,
      "hans555": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeAddTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Adds a tag to a recipe."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class RecipeAddTagCommand extends RecipeAddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tag added: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index recipeIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Tag toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeAddTagCommand(Index recipeIndex, Tag toAdd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(recipeIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (recipeIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert recipeIndex.getZeroBased() \u003c lastShownList.size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(recipeIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Set\u003cTag\u003e targetTagSet \u003d recipeToEdit.getTags();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!targetTagSet.add(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editRecipeDescriptor.setTags(targetTagSet);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof RecipeAddTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RecipeAddTagCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "hans555": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a recipe command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class RecipeCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"recipe\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String STEP_KEYWORD \u003d \"step\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String INGREDIENT_KEYWORD \u003d \"ingredient\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String TAG_KEYWORD \u003d \"tag\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" INDEX \" + \"add\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": adds an ingredient, a step, or a tag to a recipe with the given INDEX.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for adding an ingredient: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"add\" + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + INGREDIENT_KEYWORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"12\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for adding a step: \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_STEP_INDEX + \"STEP_INDEX \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_STEP_DESCRIPTION + \"STEP_DESCRIPTION\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"add\" + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + STEP_KEYWORD + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_STEP_INDEX + \"1 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_STEP_DESCRIPTION + \"Add potatoes and water to a large pot, and bring to a boil.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for adding a tag: \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"add\" + \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + TAG_KEYWORD + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_TAG + \"Pasta\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"\\n\" + COMMAND_CATEGORY + \" INDEX \" + \"remove\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": removes an ingredient, a step, or a tag from a recipe with the given INDEX.\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"\\nParameters for removing an ingredient: \\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY]\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"remove\" + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"12\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"* if no quantity is specified, all instances of the specified ingredient will be removed.\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for removing a step: \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_STEP_INDEX + \"STEP_INDEX\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"remove\" + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_STEP_INDEX + \"1\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for removing a tag: \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"INDEX (must be a valid positive integer) \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"remove\" + \" \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_TAG + \"Pasta\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Stores the details to edit the recipe with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * corresponding field value of the recipe."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static class EditRecipeDescriptor {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private RecipeName name;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private RecipeDescription description;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private ObservableList\u003cIngredient\u003e ingredients;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private UniqueStepList steps;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        public EditRecipeDescriptor() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public EditRecipeDescriptor(EditRecipeDescriptor toCopy) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setIngredients(toCopy.ingredients);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setSteps(toCopy.steps);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Creates and returns a {@code Recipe} with the details of {@code recipeToEdit}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * edited with {@code editRecipeDescriptor}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public static Recipe createEditedRecipe(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            assert recipeToEdit !\u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            RecipeName updatedName \u003d editRecipeDescriptor.getName()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(recipeToEdit.getName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            RecipeDescription updatedDescription \u003d editRecipeDescriptor.getDescription()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(recipeToEdit.getDescription());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            UniqueIngredientList updatedIngredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            updatedIngredients.setIngredients(editRecipeDescriptor.getIngredients()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(recipeToEdit.getIngredients()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            UniqueStepList updatedSteps \u003d editRecipeDescriptor.getSteps()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(recipeToEdit.getSteps());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Set\u003cTag\u003e updatedTags \u003d editRecipeDescriptor.getTags()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(recipeToEdit.getTags());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new Recipe(updatedName, updatedDescription, updatedIngredients, updatedSteps, updatedTags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description, ingredients, steps, tags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setName(RecipeName name) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cRecipeName\u003e getName() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setDescription(RecipeDescription description) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cRecipeDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setIngredients(ObservableList\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cObservableList\u003cIngredient\u003e\u003e getIngredients() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.ofNullable(ingredients);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setSteps(UniqueStepList steps) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.steps \u003d steps;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cUniqueStepList\u003e getSteps() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.ofNullable(steps);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!(other instanceof EditRecipeDescriptor)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            EditRecipeDescriptor e \u003d (EditRecipeDescriptor) other;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    \u0026\u0026 getIngredients().equals(e.getIngredients())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    \u0026\u0026 getSteps().equals(e.getSteps())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 150,
      "teo-jun-xiong": 44,
      "shanecsj": 14,
      "hans555": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeRemoveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Remove a step/ingredient/tag in a recipe inside the cookbook."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "public abstract class RecipeRemoveCommand extends RecipeCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"\\n\" + COMMAND_CATEGORY + \" INDEX \" + COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": removes an ingredient, a step, or a tag from a recipe with the given INDEX.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"\\nParameters for removing an ingredient: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY]\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"12\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"* if no quantity is specified, all instances of the specified ingredient will be removed.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for removing a step: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_STEP_INDEX + \"STEP_INDEX\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_STEP_INDEX + \"1\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\nParameters for removing a tag: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + PREFIX_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_TAG + \"Pasta\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 4,
      "teo-jun-xiong": 3,
      "hans555": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeRemoveIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IncompatibleIngredientException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.NonPositiveIngredientQuantityException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Removes an ingredient from a recipe."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class RecipeRemoveIngredientCommand extends RecipeRemoveCommand {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String ALL_KEYWORD \u003d \"All\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s removed from %2$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_INGREDIENT_QUANTITY_TOO_HIGH \u003d \"The quantity specified is too large\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_INCOMPATIBLE_UNITS \u003d \"%1$s has different units in %2$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_INGREDIENT_NOT_FOUND \u003d \"%2$s does not contain %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final IngredientName ingredientName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final Optional\u003cIngredientQuantity\u003e ingredientQuantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Creates a RecipeRemoveIngredientCommand to remove the specified {@code Ingredient} from the recipe"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeRemoveIngredientCommand(Index index, IngredientName ingredientName,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                                         Optional\u003cIngredientQuantity\u003e ingredientQuantity) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireAllNonNull(index, ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.ingredientQuantity \u003d ingredientQuantity;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert (index.getZeroBased() \u003c lastShownList.size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.setIngredients(recipeToEdit.getIngredients());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            ingredientQuantity.map(x -\u003e new Ingredient(ingredientName, x))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    .ifPresentOrElse(ingredients::remove, () -\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        ingredients.remove(ingredientName));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            editRecipeDescriptor.setIngredients(ingredients.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            String ingredientRemoved \u003d ingredientQuantity.map(x -\u003e new Ingredient(ingredientName, x).toString())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElseGet(() -\u003e ALL_KEYWORD + \" \" + ingredientName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, ingredientRemoved,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    recipeToEdit.getName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IngredientNotFoundException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INGREDIENT_NOT_FOUND,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    ingredientName, recipeToEdit.getName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IncompatibleIngredientException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INCOMPATIBLE_UNITS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    ingredientName, recipeToEdit.getName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (NonPositiveIngredientQuantityException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INGREDIENT_QUANTITY_TOO_HIGH));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || (other instanceof RecipeRemoveIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 ingredientName.equals(((RecipeRemoveIngredientCommand) other).ingredientName)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 ingredientQuantity.equals(((RecipeRemoveIngredientCommand) other).ingredientQuantity));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 27,
      "teo-jun-xiong": 40,
      "shanecsj": 23,
      "hans555": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeRemoveStepCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Removes a step from a recipe."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class RecipeRemoveStepCommand extends RecipeRemoveCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Step deleted for %1$s: %2$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index recipeIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index stepIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeRemoveStepCommand(Index recipeIndex, Index stepIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(recipeIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(stepIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.stepIndex \u003d stepIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (recipeIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(recipeIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList targetStepList \u003d recipeToEdit.getSteps();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (stepIndex.getZeroBased() \u003e\u003d targetStepList.asUnmodifiableObservableList().size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "            // ensure the step index is valid"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert (stepIndex.getZeroBased() \u003c targetStepList.asUnmodifiableObservableList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Step toRemove \u003d targetStepList.remove(stepIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editRecipeDescriptor.setSteps(targetStepList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedRecipe.getName().fullRecipeName, toRemove));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof RecipeRemoveStepCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 stepIndex.equals(((RecipeRemoveStepCommand) other).stepIndex));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 8,
      "hans555": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeRemoveTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Removes a tag to a recipe."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class RecipeRemoveTagCommand extends RecipeRemoveCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tag deleted: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index recipeIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Tag toRemove;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeRemoveTagCommand(Index recipeIndex, Tag toRemove) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(recipeIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.toRemove \u003d toRemove;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (recipeIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert (recipeIndex.getZeroBased() \u003c lastShownList.size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(recipeIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Set\u003cTag\u003e targetTagSet \u003d recipeToEdit.getTags();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!targetTagSet.remove(toRemove)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException((Messages.MESSAGE_INVALID_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editRecipeDescriptor.setTags(targetTagSet);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toRemove));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof RecipeRemoveTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 toRemove.equals(((RecipeRemoveTagCommand) other).toRemove));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 2,
      "hans555": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean arePrefixesPresent(Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e this.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 5,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final Prefix PREFIX_SEARCH_KEYWORD \u003d new Prefix(\"k/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final Prefix PREFIX_RECIPE_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final Prefix PREFIX_RECIPE_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_NAME \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Prefix PREFIX_STEP_INDEX \u003d new Prefix(\"x/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Prefix PREFIX_STEP_DESCRIPTION \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 4,
      "shanecsj": 7,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CookingPapaParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.cart.CartCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.cookbook.CookbookCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.inventory.InventoryCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.recipe.RecipeCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CookingPapaParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandCategory\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses user input into a command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final String commandCategory \u003d matcher.group(\"commandCategory\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        switch (commandCategory) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case CookbookCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new CookbookCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case RecipeCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new RecipeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case InventoryCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new InventoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case CartCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case ExitCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new ExitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case HelpCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 64,
      "hans555": 2,
      "tzihiang": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExitCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Parses input arguments and creates a new ExitCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class ExitCommandParser implements Parser\u003cExitCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern EXIT_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExitCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a ExitCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public ExitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d EXIT_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    ExitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Parses input arguments and creates a new HelpCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern HELP_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HelpCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a HelpCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public HelpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d HELP_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hans555": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DIFFERENT_NUMBER_OF_INPUTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses a {@code String recipeName} into a {@code RecipeName}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the given {@code recipeName} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static RecipeName parseRecipeName(String recipeName) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(recipeName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String trimmedRecipeName \u003d recipeName.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!RecipeName.isValidRecipeName(trimmedRecipeName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(RecipeName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new RecipeName(trimmedRecipeName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses a {@code String recipeDescription} into a {@code RecipeDescription}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the given {@code recipeDescription} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static RecipeDescription parseRecipeDescription(String recipeDescription) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(recipeDescription);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String trimmedRecipeDescription \u003d recipeDescription.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!RecipeDescription.isValidRecipeDescription(trimmedRecipeDescription)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(RecipeName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new RecipeDescription(trimmedRecipeDescription);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses an {@code String ingredientName} into an {@code IngredientName}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the given {@code ingredientName} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static IngredientName parseIngredientName(String ingredientName) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String trimmedIngredientName \u003d ingredientName.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!IngredientName.isValidIngredientName(trimmedIngredientName)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(IngredientName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new IngredientName(trimmedIngredientName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses an {@code String ingredientQuantity} into an {@code IngredientQuantity}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the given {@code ingredientQuantity} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static IngredientQuantity parseIngredientQuantity(String ingredientQuantity) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredientQuantity);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String trimmedIngredientQuantity \u003d ingredientQuantity.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!IngredientQuantity.isValidIngredientQuantity(trimmedIngredientQuantity)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(IngredientQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new IngredientQuantity(trimmedIngredientQuantity);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses an {@code String stepDescription} into an {@code Step}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hans555"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the given {@code Step} is invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static Step parseStep(String stepDescription) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(stepDescription);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String trimmedStepDescription \u003d stepDescription.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!Step.isValidStep(trimmedStepDescription)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(Step.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new Step(trimmedStepDescription);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Parses {@code List\u003cString\u003e ingredientNames} into a {@code List\u003cIngredientName\u003e}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static List\u003cIngredientName\u003e parseIngredientNames(List\u003cString\u003e ingredientNames) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(ingredientNames);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredientNames.stream().map(IngredientName::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Parses {@code List\u003cString ingredientQuantities} into a {@code List\u003cIngredientQuantity\u003e}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static List\u003cIngredientQuantity\u003e parseIngredientQuantities(List\u003cString\u003e ingredientQuantities) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(ingredientQuantities);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredientQuantities.stream().map(IngredientQuantity::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Parses the given {@code List\u003cIngredientName\u003e names} and {@code List\u003cIngredientQuantity\u003e quantities}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * into a {@code UniqueIngredientList}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @throws ParseException if the size of the two lists are different."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static List\u003cIngredient\u003e parseIngredients(List\u003cIngredientName\u003e names, List\u003cIngredientQuantity\u003e quantities)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (names.size() !\u003d quantities.size()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    String.format(MESSAGE_DIFFERENT_NUMBER_OF_INPUTS, names.size(), quantities.size()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return IntStream.range(0, names.size())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .mapToObj(i -\u003e new Ingredient(names.get(i), quantities.get(i)))"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Parses {@code List\u003cString\u003e stepDescriptions} into a {@code UniqueStepList}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static UniqueStepList parseSteps(List\u003cString\u003e stepDescriptions) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(stepDescriptions);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        UniqueStepList steps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (String stepDescription : stepDescriptions) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            steps.add(new Step(stepDescription));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return steps;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 25,
      "teo-jun-xiong": 51,
      "shanecsj": 16,
      "hans555": 17,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddRecipeIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new CartAddCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartAddCommandParser implements Parser\u003cCartAddCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern CART_ADD_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\" *(?\u003ccategory\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartAddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartAddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d CART_ADD_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CartAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String category \u003d matcher.group(\"category\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "        switch (category) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case CartAddIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new CartAddIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case CartAddRecipeIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new CartAddRecipeIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CartAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "hans555": 19,
      "tzihiang": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartAddIngredientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddIngredientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new CartAddIngredientCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartAddIngredientCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartAddIngredientCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartAddIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    CartAddIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_NAME).isPresent();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_QUANTITY).isPresent();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientQuantity ingredientQuantity \u003d ParserUtil.parseIngredientQuantity(argMultimap"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_QUANTITY).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        Ingredient ingredient \u003d new Ingredient(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new CartAddIngredientCommand(ingredient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 4,
      "tzihiang": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartAddRecipeIngredientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddRecipeIngredientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new CartAddRecipeIngredientCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartAddRecipeIngredientCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartAddRecipeIngredientCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartAddRecipeIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Index recipeIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "            recipeIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    CartAddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new CartAddRecipeIngredientCommand(recipeIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 5,
      "hans555": 12,
      "tzihiang": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartClearCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses no input to return a CartClearCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartClearCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses no arguments in the context of the CartCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartClearCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartClearCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartClearCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    CartClearCommand.MESSAGE_SUCCESS_EMPTY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 3,
      "tzihiang": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartExportCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartMoveCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartRemoveIngredientCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "* Parses input arguments and into a {@code CartCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static final Pattern CART_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .compile(\" *(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a CartCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final Matcher matcher \u003d CART_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        // For now, implementation will only be done for the whole ingredient, and not quantity"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        case CartAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new CartAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case CartRemoveIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartRemoveIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case CartClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case CartMoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartMoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        case CartExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return new CartExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 12,
      "shanecsj": 2,
      "tzihiang": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartExportCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartExportCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Parses input arguments and creates a new CartExportCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartExportCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * and returns a CartExportCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CartExportCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return new CartExportCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CartExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartMoveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartMoveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses no input to return a CartDoneCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartMoveCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartMoveCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartMoveCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CartMoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartRemoveIngredientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartRemoveIngredientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryAddIngredientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new CartAddIngredientCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartRemoveIngredientCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Pattern CART_REMOVE_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .compile(CartRemoveIngredientCommand.INGREDIENT_KEYWORD + \"*(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartRemoveIngredientCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartRemoveIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final Matcher matcher \u003d CART_REMOVE_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    InventoryAddIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    CartRemoveIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_NAME).isPresent();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cIngredientQuantity\u003e ingredientQuantity \u003d argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_QUANTITY)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                ? Optional.of(ParserUtil.parseIngredientQuantity(argMultimap.getValue(PREFIX_INGREDIENT_QUANTITY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    .get()))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new CartRemoveIngredientCommand(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 5,
      "shanecsj": 15,
      "teo-jun-xiong": 4,
      "tzihiang": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cookbook/CookbookAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookAddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Parses input arguments and creates a new CookbookAddCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookAddCommandParser implements Parser\u003cCookbookAddCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern COOKBOOK_ADD_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\" *recipe(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookAddCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookAddCommand object for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d COOKBOOK_ADD_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    CookbookAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RECIPE_NAME, PREFIX_RECIPE_DESCRIPTION, PREFIX_INGREDIENT_NAME,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        PREFIX_INGREDIENT_QUANTITY, PREFIX_STEP_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_RECIPE_NAME, PREFIX_RECIPE_DESCRIPTION)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    CookbookAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_RECIPE_NAME, PREFIX_RECIPE_DESCRIPTION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_RECIPE_NAME).isPresent();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_RECIPE_DESCRIPTION).isPresent();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        RecipeName recipeName \u003d ParserUtil.parseRecipeName(argMultimap.getValue(PREFIX_RECIPE_NAME).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        RecipeDescription recipeDescription \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                ParserUtil.parseRecipeDescription(argMultimap.getValue(PREFIX_RECIPE_DESCRIPTION).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        List\u003cIngredientName\u003e ingredientNames \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                ParserUtil.parseIngredientNames(argMultimap.getAllValues(PREFIX_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        List\u003cIngredientQuantity\u003e ingredientQuantities \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                ParserUtil.parseIngredientQuantities(argMultimap.getAllValues(PREFIX_INGREDIENT_QUANTITY));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.setIngredients(ParserUtil.parseIngredients(ingredientNames, ingredientQuantities));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        UniqueStepList steps \u003d ParserUtil.parseSteps(argMultimap.getAllValues(PREFIX_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Set\u003cTag\u003e tags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CookbookAddCommand(new Recipe(recipeName, recipeDescription, ingredients, steps, tags));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "shanecsj": 41,
      "teo-jun-xiong": 27,
      "hans555": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cookbook/CookbookCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookRemoveCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookSearchCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookViewCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* Parses input arguments and into a {@code CookbookCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CookbookCommandParser implements Parser\u003cCookbookCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Pattern COOKBOOK_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\" *(?\u003ccommandWord\u003e\\\\S+) *(?\u003ccategory\u003erecipe|tag|inventory)?(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a CookbookCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a CookbookCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CookbookCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final Matcher matcher \u003d COOKBOOK_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String category \u003d matcher.group(\"category\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        case CookbookAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new CookbookAddCommandParser().parse(category + \" \" + arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        case CookbookRemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new CookbookRemoveCommandParser().parse(category + \" \" + arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        case CookbookSearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new CookbookSearchCommandParser().parse(category + \" \" + arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        case CookbookViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new CookbookViewCommandParser().parse(category + \" \" + arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        case CookbookListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new CookbookListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                CookbookSearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 19,
      "teo-jun-xiong": 6,
      "shanecsj": 26,
      "hans555": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cookbook/CookbookListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Parses input arguments and creates a new CookbookListCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class CookbookListCommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern COOKBOOK_LIST_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\"\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookListCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a CookbookListCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public CookbookListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d COOKBOOK_LIST_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    CookbookListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new CookbookListCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 2,
      "hans555": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cookbook/CookbookRemoveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookRemoveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Parses input arguments and creates a new CookbookRemoveCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookRemoveCommandParser implements Parser\u003cCookbookRemoveCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern COOKBOOK_REMOVE_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\" *recipe *(?\u003carguments\u003e\\\\d+)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookRemoveCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookRemoveCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookRemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d COOKBOOK_REMOVE_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    CookbookRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new CookbookRemoveCommand(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    CookbookRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 26,
      "teo-jun-xiong": 6,
      "hans555": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cookbook/CookbookSearchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEARCH_KEYWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookSearchByInventoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookSearchByKeywordCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookSearchByTagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookSearchCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeContainsTagsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Parses input arguments and creates a new CookbookSearchCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookSearchCommandParser implements Parser\u003cCookbookSearchCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern COOKBOOK_SEARCH_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\" *(?\u003ccategory\u003erecipe|tag|inventory)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookSearchCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookSearchCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookSearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d COOKBOOK_SEARCH_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    CookbookSearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String category \u003d matcher.group(\"category\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        switch(category) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case CookbookSearchCommand.SEARCH_INVENTORY_COMMAND:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseSearchByInventory(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        case CookbookSearchCommand.RECIPE_KEYWORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseSearchByKeyword(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case CookbookSearchCommand.SEARCH_TAG_COMMAND:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseSearchByTag(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    CookbookSearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookSearchByKeywordCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookSearchByKeywordCommand object for execution."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookSearchByKeywordCommand parseSearchByKeyword(String args) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SEARCH_KEYWORD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_SEARCH_KEYWORD) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                CookbookSearchByKeywordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_SEARCH_KEYWORD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        List\u003cString\u003e trimmedArgs \u003d argMultimap.getAllValues(PREFIX_SEARCH_KEYWORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CookbookSearchByKeywordCommand(new RecipeNameContainsKeywordsPredicate(trimmedArgs));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookSearchByTagCommand"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookSearchByTagCommand object for execution."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookSearchByTagCommand parseSearchByTag(String args) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_TAG) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                CookbookSearchByTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_TAG);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        List\u003cString\u003e trimmedArgs \u003d argMultimap.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CookbookSearchByTagCommand(new RecipeContainsTagsPredicate(trimmedArgs));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookSearchByInventoryCommand"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookSearchByInventoryCommand object for execution."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CookbookSearchByInventoryCommand parseSearchByInventory(String args) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new CookbookSearchByInventoryCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 76,
      "teo-jun-xiong": 18,
      "hans555": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cookbook/CookbookViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookViewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Parses input arguments and creates a new CookbookViewCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookViewCommandParser implements Parser\u003cCookbookViewCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern COOKBOOK_VIEW_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\" *recipe *(?\u003carguments\u003e\\\\d+)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookViewCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookViewCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d COOKBOOK_VIEW_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    CookbookViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new CookbookViewCommand(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    CookbookViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 27,
      "teo-jun-xiong": 5,
      "hans555": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/inventory/InventoryAddIngredientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryAddIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new InventoryAddIngredientCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryAddIngredientCommandParser implements Parser\u003cInventoryCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Pattern INVENTORY_ADD_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .compile(InventoryAddIngredientCommand.INGREDIENT_KEYWORD + \"*(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the InventoryCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a InventoryAddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public InventoryAddIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final Matcher matcher \u003d INVENTORY_ADD_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    InventoryAddIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    InventoryAddIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_NAME).isPresent();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_QUANTITY).isPresent();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientQuantity ingredientQuantity \u003d ParserUtil.parseIngredientQuantity(argMultimap"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_QUANTITY).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        Ingredient ingredient \u003d new Ingredient(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new InventoryAddIngredientCommand(ingredient);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 16,
      "teo-jun-xiong": 6,
      "tzihiang": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/inventory/InventoryClearCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses no input to return a InventoryClearCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryClearCommandParser implements Parser\u003cInventoryCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses no arguments in the context of the InventoryCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a InventoryClearommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public InventoryClearCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new InventoryClearCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    InventoryClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "tzihiang": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/inventory/InventoryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryAddIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCookCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryRemoveIngredientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* Parses input arguments and into a {@code InventoryCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class InventoryCommandParser implements Parser\u003cInventoryCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static final Pattern INVENTORY_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .compile(\" *(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a InventoryCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a InventoryCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public InventoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final Matcher matcher \u003d INVENTORY_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case InventoryAddIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new InventoryAddIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case InventoryRemoveIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new InventoryRemoveIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        case InventoryCookCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new InventoryCookCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case InventoryClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new InventoryClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 18,
      "teo-jun-xiong": 4,
      "shanecsj": 4,
      "hans555": 1,
      "tzihiang": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/inventory/InventoryCookCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCookCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Parses input arguments and creates a new InventoryCookRecipeCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class InventoryCookCommandParser implements Parser\u003cInventoryCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Pattern INVENTORY_COOK_RECIPE_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .compile(InventoryCookCommand.RECIPE_KEYWORD + \" *(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the InventoryCookRecipeCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns an InventoryCookRecipeCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public InventoryCookCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final Matcher matcher \u003d INVENTORY_COOK_RECIPE_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    InventoryCookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new InventoryCookCommand(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    InventoryCookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 48,
      "teo-jun-xiong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/inventory/InventoryRemoveIngredientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryRemoveIngredientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new InventoryRemoveIngredientCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryRemoveIngredientCommandParser implements Parser\u003cInventoryCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Pattern INVENTORY_REMOVE_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .compile(InventoryRemoveIngredientCommand.INGREDIENT_KEYWORD + \"*(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the InventoryCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a InventoryRemoveIngredientCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public InventoryRemoveIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final Matcher matcher \u003d INVENTORY_REMOVE_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    InventoryRemoveIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                ArgumentTokenizer.tokenize(arguments, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    InventoryRemoveIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getPreamble().isEmpty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_NAME).isPresent();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cIngredientQuantity\u003e ingredientQuantity \u003d argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_QUANTITY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                ? Optional.of(ParserUtil.parseIngredientQuantity(argMultimap.getValue(PREFIX_INGREDIENT_QUANTITY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .get()))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new InventoryRemoveIngredientCommand(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 9,
      "teo-jun-xiong": 31,
      "shanecsj": 13,
      "tzihiang": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/recipe/RecipeAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddIngredientCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddStepCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddTagCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Parses input arguments and creates a new RecipeAddCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class RecipeAddCommandParser implements Parser\u003cRecipeAddCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern RECIPE_ADD_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\"(?\u003cindex\u003e\\\\d+) *(?\u003ccategory\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeAddCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a RecipeAddCommand object for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public RecipeAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d RECIPE_ADD_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String index \u003d matcher.group(\"index\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String category \u003d matcher.group(\"category\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "        switch (category) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case RecipeCommand.INGREDIENT_KEYWORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseAddIngredient(index + \" \" + arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case RecipeCommand.STEP_KEYWORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseAddStep(index + \" \" + arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case RecipeCommand.TAG_KEYWORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseAddTag(index + \" \" + arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeAddIngredientCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a RecipeAddIngredientCommand object for execution."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    RecipeAddIngredientCommand parseAddIngredient(String args) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_NAME).isPresent();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_QUANTITY).isPresent();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity ingredientQuantity \u003d ParserUtil.parseIngredientQuantity(argMultimap"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_QUANTITY).get());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient ingredient \u003d new Ingredient(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new RecipeAddIngredientCommand(index, ingredient);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeAddStepCommand"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a RecipeAddStepCommand object for execution."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public RecipeAddStepCommand parseAddStep(String args) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Index recipeIndex;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hans555"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_STEP_INDEX, PREFIX_STEP_DESCRIPTION);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hans555"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hans555"
        },
        "content": "            recipeIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_STEP_INDEX, PREFIX_STEP_DESCRIPTION)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_STEP_INDEX, PREFIX_STEP_DESCRIPTION);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_STEP_INDEX).isPresent();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Optional\u003cIndex\u003e stepIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Step toAdd;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String stepVariable \u003d argMultimap.getValue(PREFIX_STEP_INDEX).get();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!stepVariable.equals(RecipeAddStepCommand.NEXT_KEYWORD)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hans555"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hans555"
        },
        "content": "                stepIndex \u003d Optional.of(ParserUtil.parseIndex(stepVariable));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hans555"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hans555"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hans555"
        },
        "content": "                        RecipeAddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hans555"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_STEP_DESCRIPTION).isPresent();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hans555"
        },
        "content": "        toAdd \u003d ParserUtil.parseStep(argMultimap"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .getValue(PREFIX_STEP_DESCRIPTION).get());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new RecipeAddStepCommand(recipeIndex, stepIndex, toAdd);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeAddTagCommand"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a RecipeAddTagCommand object for execution."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeAddTagCommand parseAddTag(String args) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Tag toAdd;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Index recipeIndex;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hans555"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hans555"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hans555"
        },
        "content": "            recipeIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_TAG)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_TAG);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_TAG).isPresent();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        toAdd \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new RecipeAddTagCommand(recipeIndex, toAdd);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    boolean containsIngredient(String args) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return args.contains(PREFIX_INGREDIENT_NAME.toString())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_INGREDIENT_QUANTITY.toString());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    boolean containsStep(String args) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return args.contains(PREFIX_STEP_INDEX.toString()) \u0026\u0026 args.contains(PREFIX_STEP_DESCRIPTION.toString());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    boolean containsTag(String args) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return args.contains(PREFIX_TAG.toString());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 83,
      "teo-jun-xiong": 21,
      "hans555": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/recipe/RecipeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Parses input arguments and into a {@code RecipeCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class RecipeCommandParser implements Parser\u003cRecipeCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Pattern RECIPE_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\"(?\u003cindex\u003e\\\\d+) +(?\u003ccommandWord\u003e\\\\S+) +(?\u003ccategory\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a RecipeCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a RecipeCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public RecipeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final Matcher matcher \u003d RECIPE_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final String index \u003d matcher.group(\"index\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String category \u003d matcher.group(\"category\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case RecipeAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new RecipeAddCommandParser().parse(index + \" \" + category + \" \" + arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case RecipeRemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new RecipeRemoveCommandParser().parse(index + \" \" + category + \" \" + arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 39,
      "teo-jun-xiong": 4,
      "hans555": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/recipe/RecipeRemoveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveIngredientCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveStepCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveTagCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Parses input arguments and creates a new RecipeRemoveCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class RecipeRemoveCommandParser implements Parser\u003cRecipeRemoveCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Pattern RECIPE_ADD_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "            .compile(\"(?\u003cindex\u003e\\\\d+) *(?\u003ccategory\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeRemoveCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a RecipeRemoveCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeRemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final Matcher matcher \u003d RECIPE_ADD_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String index \u003d matcher.group(\"index\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String category \u003d matcher.group(\"category\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "        switch (category) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case RecipeCommand.INGREDIENT_KEYWORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseRemoveIngredient(index + \" \" + arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case RecipeCommand.STEP_KEYWORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseRemoveStep(index + \" \" + arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case RecipeCommand.TAG_KEYWORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseRemoveTag(index + \" \" + arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeRemoveIngredientCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a RecipeRemoveIngredientCommand object for execution."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    RecipeRemoveIngredientCommand parseRemoveIngredient(String args) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_NAME);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_INGREDIENT_NAME).isPresent();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Optional\u003cIngredientQuantity\u003e ingredientQuantity \u003d argMultimap.arePrefixesPresent(PREFIX_INGREDIENT_QUANTITY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                ? Optional.of(ParserUtil.parseIngredientQuantity(argMultimap.getValue(PREFIX_INGREDIENT_QUANTITY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    .get()))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new RecipeRemoveIngredientCommand(index, ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeRemoveStepCommand"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a RecipeRemoveStepCommand object for execution."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeRemoveStepCommand parseRemoveStep(String args) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hans555"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STEP_INDEX);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Index recipeIndex;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hans555"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hans555"
        },
        "content": "            recipeIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hans555"
        },
        "content": "                RecipeRemoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_STEP_INDEX)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_STEP_INDEX);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_STEP_INDEX).isPresent();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Index stepIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STEP_INDEX).get());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new RecipeRemoveStepCommand(recipeIndex, stepIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeRemoveTagCommand"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a RecipeRemoveTagCommand object for execution."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeRemoveTagCommand parseRemoveTag(String args) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hans555"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Index recipeIndex;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hans555"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hans555"
        },
        "content": "            recipeIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeRemoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_TAG)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.arePrefixesPresent(PREFIX_TAG);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assert argMultimap.getValue(PREFIX_TAG).isPresent();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Tag toRemove \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new RecipeRemoveTagCommand(recipeIndex, toRemove);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    boolean containsIngredient(String args) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return args.contains(PREFIX_INGREDIENT_NAME.toString());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    boolean containsStep(String args) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return args.contains(PREFIX_STEP_INDEX.toString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    boolean containsTag(String args) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return args.contains(PREFIX_TAG.toString());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 49,
      "shanecsj": 7,
      "hans555": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Cart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Wraps all data at the cart level"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Cart extends SortedIngredientList implements ReadOnlyCart {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public Cart() {}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public Cart(ReadOnlyCart toBeCopied) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Resets the existing data of this {@code Cart} with {@code newData}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Called in constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData(ReadOnlyCart newData) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setIngredients(newData.getIngredientList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return getIngredientList().size() + \" ingredients\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof Cart // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 this.getCompatibleIngredientList().equals(((Cart) other).getCompatibleIngredientList()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 15,
      "teo-jun-xiong": 1,
      "tzihiang": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Cookbook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.RecipeDefaultComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.UniqueRecipeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Wraps all data at the cookbook level."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Duplicates are not allowed (by .isSameRecipe comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Cookbook implements ReadOnlyCookbook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final UniqueRecipeList recipes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Cookbook() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Creates an Cookbook using the Recipes in the {@code toBeCopied}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Cookbook(ReadOnlyCookbook toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the contents of the recipe list with {@code recipes}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.recipes.setRecipes(recipes);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Resets the existing data of this {@code Cookbook} with {@code newData}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData(ReadOnlyCookbook newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setRecipes(newData.getRecipeList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    //// recipe-level operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the cookbook."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return recipes.contains(recipe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds a recipe to the cookbook."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The recipe must not already exist in the cookbook."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes.add(recipe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes.sort(new RecipeDefaultComparator());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the given recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the cookbook."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the cookbook."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(editedRecipe);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes.sort(new RecipeDefaultComparator());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes {@code key} from this {@code Cookbook}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code key} must exist in the cookbook."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeRecipe(Recipe key) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes.remove(key);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sorts the cookbook by similarity of the specified inventory\u0027s ingredients."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void sort(Comparator\u003c? super Recipe\u003e comparator) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes.sort(comparator);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return recipes.asUnmodifiableObservableList().size() + \" recipes\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return recipes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                || (other instanceof Cookbook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 recipes.equals(((Cookbook) other).recipes));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return recipes.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 119,
      "teo-jun-xiong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Inventory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Wraps all data at the inventory level"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Inventory extends SortedIngredientList implements ReadOnlyInventory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public Inventory() {}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Inventory(ReadOnlyInventory toBeCopied) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Resets the existing data of this {@code Inventory} with {@code newData}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Called in constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData(ReadOnlyInventory newData) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setIngredients(newData.getIngredientList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return getIngredientList().size() + \" ingredients\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof Inventory // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 this.getCompatibleIngredientList().equals(((Inventory) other).getCompatibleIngredientList()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 18,
      "tzihiang": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Predicate\u003cRecipe\u003e PREDICATE_SHOW_ALL_RECIPES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Predicate\u003cIngredient\u003e PREDICATE_SHOW_ALL_INGREDIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 cookbook file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCookbookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sets the user prefs\u0027 cookbook file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCookbookFilePath(Path cookbookFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sets the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setInventoryFilePath(Path inventoryFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 cart file path."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCartFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sets the user prefs\u0027 cart file path."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCartFilePath(Path cartFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces cookbook data with the data in {@code cookbook}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCookbook(ReadOnlyCookbook cookbook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns the Cookbook */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyCookbook getCookbook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces inventory data with the data in {@code inventory}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setInventory(ReadOnlyInventory inventory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns the Inventory */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyInventory getInventory();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces cart data with the data in {@code cart}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCart(ReadOnlyCart cart);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns the Cart */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyCart getCart();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the cookbook."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    boolean hasCookbookRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes the given recipe."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The recipe must exist in the cookbook."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void removeCookbookRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds the given recipe."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code recipe} must not already exist in the cookbook."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void addCookbookRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the given recipe {@code target} with {@code editedRecipe}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the cookbook."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the cookbook."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCookbookRecipe(Recipe target, Recipe editedRecipe);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if an ingredient with the same identity as {@code ingredient} exists in the inventory."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    boolean hasInventoryIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes the given ingredient."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must exist in the inventory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void removeInventoryIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes ingredients with the given ingredient name."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must exist in the inventory."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void removeInventoryIngredient(IngredientName ingredientName);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds the given ingredient."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code ingredient} must not already exist in the inventory."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void addInventoryIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the given ingredient {@code target} with {@code editedIngredient}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the inventory."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient identity of {@code editedIngredient} must not be the same as another existing ingredient in the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * inventory."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setInventoryIngredient(Ingredient target, Ingredient editedIngredient);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if an ingredient with the same identity as {@code ingredient} exists in the cart."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    boolean hasCartIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes the given ingredient."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must exist in the cart."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void removeCartIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes ingredients with the given ingredient name."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must exist in the cart."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void removeCartIngredient(IngredientName ingredientName);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds the given ingredient."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code ingredient} must not already exist in the cart."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void addCartIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the given ingredient {@code target} with {@code editedIngredient}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the cart."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient identity of {@code editedIngredient} must not be the same as another existing ingredient in the"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * cart."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCartIngredient(Ingredient target, Ingredient editedIngredient);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sorts the cookbook using the specified comparator."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void sortCookbook(Comparator\u003c? super Recipe\u003e comparator);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered cookbook recipe list */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Updates the filter of the filtered cookbook recipe list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void updateFilteredCookbookRecipeList(Predicate\u003cRecipe\u003e predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered inventory ingredient list */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredInventoryIngredientList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Updates the filter of the filtered inventory ingredient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void updateFilteredInventoryIngredientList(Predicate\u003cIngredient\u003e predicate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered cart ingredient list */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredCartIngredientList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Updates the filter of the filtered cart ingredient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void updateFilteredCartIngredientList(Predicate\u003cIngredient\u003e predicate);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 138,
      "teo-jun-xiong": 9,
      "-": 67,
      "tzihiang": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Represents the in-memory model of CookingPapa\u0027s data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Cookbook cookbook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Inventory inventory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Cart cart;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e filteredCookbookRecipes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final FilteredList\u003cIngredient\u003e filteredInventoryIngredients;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final FilteredList\u003cIngredient\u003e filteredCartIngredients;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Initializes a ModelManager with the given cookbook, inventory, cart, and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public ModelManager(ReadOnlyCookbook cookbook, ReadOnlyInventory inventory,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            ReadOnlyCart cart, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(cookbook, inventory, cart, userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        logger.fine(\"Initializing with cookbook: \" + cookbook + \", inventory: \" + inventory + \", cart: \" + cart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \", and user prefs: \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cookbook \u003d new Cookbook(cookbook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.inventory \u003d new Inventory(inventory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cart \u003d new Cart(cart);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        filteredCookbookRecipes \u003d new FilteredList\u003c\u003e(this.cookbook.getRecipeList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        filteredInventoryIngredients \u003d new FilteredList\u003c\u003e(this.inventory.getIngredientList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        filteredCartIngredients \u003d new FilteredList\u003c\u003e(this.cart.getIngredientList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this(new Cookbook(), new Inventory(), new Cart(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    // User prefs methods"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    // File path methods"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCookbookFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return userPrefs.getCookbookFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbookFilePath(Path cookbookFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cookbookFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCookbookFilePath(cookbookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return userPrefs.getInventoryFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(inventoryFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setInventoryFilePath(inventoryFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCartFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return userPrefs.getCartFilePath();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartFilePath(Path cartFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cartFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCartFilePath(cartFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    // Cookbook methods"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbook(ReadOnlyCookbook cookbook) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cookbook.resetData(cookbook);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ReadOnlyCookbook getCookbook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cookbook;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean hasCookbookRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return cookbook.hasRecipe(recipe);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void removeCookbookRecipe(Recipe target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        cookbook.removeRecipe(target);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void addCookbookRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        cookbook.addRecipe(recipe);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setCookbookRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        cookbook.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Recipe} backed by the internal list of"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * {@code versionedCookbook}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredCookbookRecipeList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return filteredCookbookRecipes;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void updateFilteredCookbookRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        filteredCookbookRecipes.setPredicate(predicate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    // Inventory methods"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setInventory(ReadOnlyInventory inventory) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.inventory.resetData(inventory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public ReadOnlyInventory getInventory() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean hasInventoryIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventory.hasIngredient(ingredient);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeInventoryIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.removeIngredient(target);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeInventoryIngredient(IngredientName target) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.removeIngredient(target);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void addInventoryIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.addIngredient(ingredient);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        updateFilteredInventoryIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Ingredient} backed by the internal list of"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * {@code versionedInventory}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredInventoryIngredientList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return filteredInventoryIngredients;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void updateFilteredInventoryIngredientList(Predicate\u003cIngredient\u003e predicate) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        filteredInventoryIngredients.setPredicate(predicate);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    // Cart methods"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setCart(ReadOnlyCart cart) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.cart.resetData(cart);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public ReadOnlyCart getCart() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return cart;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean hasCartIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cart.hasIngredient(ingredient);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeCartIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.removeIngredient(target);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeCartIngredient(IngredientName target) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.removeIngredient(target);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void addCartIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.addIngredient(ingredient);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        updateFilteredCartIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void sortCookbook(Comparator\u003c? super Recipe\u003e comparator) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cookbook.sort(comparator);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Ingredient} backed by the internal list of"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code versionedCart}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredCartIngredientList() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return filteredCartIngredients;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void updateFilteredCartIngredientList(Predicate\u003cIngredient\u003e predicate) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        filteredCartIngredients.setPredicate(predicate);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return cookbook.equals(other.cookbook)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u0026\u0026 inventory.equals(other.inventory)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u0026\u0026 cart.equals(other.cart)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u0026\u0026 filteredCartIngredients.equals(other.filteredCartIngredients)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u0026\u0026 filteredCookbookRecipes.equals(other.filteredCookbookRecipes)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u0026\u0026 filteredInventoryIngredients.equals(other.filteredInventoryIngredients);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 110,
      "teo-jun-xiong": 66,
      "shanecsj": 3,
      "-": 117,
      "tzihiang": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyCart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Unmodifiable view of a shopping cart"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface ReadOnlyCart {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an unmodifiable view of the inventory."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getIngredientList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyCookbook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Unmodifiable view of a cookbook"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface ReadOnlyCookbook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an unmodifiable view of the recipe list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * This list will not contain any duplicate recipes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cRecipe\u003e getRecipeList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyInventory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Unmodifiable view of an inventory"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface ReadOnlyInventory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an unmodifiable view of the inventory."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getIngredientList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 13,
      "teo-jun-xiong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCookbookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCartFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/SortedIngredientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.CompatibleIngredientList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientDefaultComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Wraps all data at the ingredient list level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class SortedIngredientList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final CompatibleIngredientList ingredients \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the contents of the ingredient list with {@code ingredients}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code ingredients} must not contain duplicate ingredients."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients.setIngredients(ingredients);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if an ingredient with the same identity as {@code ingredient} exists in the list of ingredients."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredients.contains(ingredient);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds an ingredient to the list of ingredients."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must not already exist in the list of ingredients."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.add(ingredient);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the given ingredient {@code target} in the list with {@code editedIngredient}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the list of ingredients."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient identity of {@code editedIngredient} must not be the same as another existing ingredient in the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * list of ingredients."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(editedIngredient);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes {@code key} from this {@code ingredientList}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code key} must exist in the list of ingredients."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeIngredient(Ingredient key) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.remove(key);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes ingredients with the name {@code key} from this {@code ingredientList}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code key} must exist in the list of ingredients."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeIngredient(IngredientName key) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.remove(key);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sorts the list of ingredients using {@code IngredientDefaultComparator}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sort(new IngredientDefaultComparator());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sorts the list of ingredients using the specified comparator."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void sort(Comparator\u003c? super Ingredient\u003e comparator) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.sort(comparator);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CompatibleIngredientList getCompatibleIngredientList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredients;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getIngredientList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredients.asUnmodifiableObservableList().size() + \" ingredients\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path cookbookFilePath \u003d Paths.get(\"data\" , \"cookbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path inventoryFilePath \u003d Paths.get(\"data\" , \"inventory.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path cartFilePath \u003d Paths.get(\"data\" , \"cart.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setCookbookFilePath(newUserPrefs.getCookbookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setInventoryFilePath(newUserPrefs.getInventoryFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setCartFilePath(newUserPrefs.getCartFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCookbookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cookbookFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbookFilePath(Path cookbookFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cookbookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cookbookFilePath \u003d cookbookFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventoryFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(inventoryFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.inventoryFilePath \u003d inventoryFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCartFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cartFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartFilePath(Path cartFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cartFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cartFilePath \u003d cartFilePath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 cookbookFilePath.equals(o.cookbookFilePath)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 inventoryFilePath.equals(o.inventoryFilePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 cartFilePath.equals(o.cartFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return Objects.hash(guiSettings, cookbookFilePath, inventoryFilePath, cartFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + cookbookFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + inventoryFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + cartFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 35,
      "teo-jun-xiong": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/CompatibleIngredientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A list of ingredients that enforces compatibility in updating its elements and does not allow nulls."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * An ingredient is considered compatible with another ingredient by comparing using"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * {@code Ingredient#isCompatibleWith(Ingredient)}. As such, adding and updating of ingredients uses"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * {@code Ingredient#isSameIngredient(Ingredient)} for compatibility so as to ensure that the ingredient is being added"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * updated from an existing element if a compatible element can be found in the CompatibleIngredientList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * @see Ingredient#isCompatibleWith(Ingredient)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CompatibleIngredientList extends UniqueIngredientList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if the list contains an ingredient compatible with the given argument."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean contains(Ingredient toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isCompatibleWith);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an ingredient compatible with given argument, if the list contains a compatible ingredient."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient find(Ingredient toFind) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(contains(toFind));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return internalList.stream().filter(toFind::isCompatibleWith).findFirst().get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                || (other instanceof CompatibleIngredientList // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                        \u0026\u0026 internalList.equals(((CompatibleIngredientList) other).internalList));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 42,
      "hans555": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/Ingredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IncompatibleIngredientException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents an ingredient."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Ingredient {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final IngredientName ingredientName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final IngredientQuantity ingredientQuantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient(IngredientName ingredientName, IngredientQuantity ingredientQuantity) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientQuantity \u003d ingredientQuantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientName getName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientQuantity getQuantity() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredientQuantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds {@code toAdd} to the ingredient."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient add(Ingredient toAdd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            checkArgument(isCompatibleWith(toAdd));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new Ingredient(getName(), getQuantity().add(toAdd.getQuantity()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IncompatibleIngredientException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Subtracts {@code toSubtract} from the ingredient."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient subtract(Ingredient toSubtract) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            checkArgument(isCompatibleWith(toSubtract));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new Ingredient(getName(), getQuantity().subtract(toSubtract.getQuantity()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IncompatibleIngredientException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the proportion of {@code toCompare} with respect to the ingredient."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a double value between 0 and 1 (inclusive)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public double asProportionOf(Ingredient toCompare) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            checkArgument(isCompatibleWith(toCompare));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return getQuantity().asProportionOf(toCompare.getQuantity());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IncompatibleIngredientException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if both ingredients are compatible with each other."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * This defines whether two ingredients can be added or subtracted from each other."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean isCompatibleWith(Ingredient otherIngredient) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (otherIngredient \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return otherIngredient !\u003d null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 otherIngredient.getName().equals(getName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 otherIngredient.getQuantity().hasSameUnitAs(getQuantity());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if both ingredients have the same name."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * This defines a weaker notion of equality between two ingredients."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean isSameIngredient(Ingredient otherIngredient) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (otherIngredient \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return otherIngredient !\u003d null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 otherIngredient.getName().equals(getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public String getNoWhitespaceName() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return this.getName().ingredientName.replace(\" \", \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if both ingredients have the same name and quantity."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * This defines a stronger notion of equality between two ingredients."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!(other instanceof Ingredient)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient otherIngredient \u003d (Ingredient) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return otherIngredient.getName().equals(getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u0026\u0026 otherIngredient.getQuantity().equals(getQuantity());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return Objects.hash(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"%s %s\", ingredientQuantity, ingredientName);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 127,
      "teo-jun-xiong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/IngredientDefaultComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * The default comparator for {@code Ingredient}, which compares ingredients by their names using lexicographical order."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientDefaultComparator implements Comparator\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Compares ingredients by their names using lexicographical order."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int compare(Ingredient o1, Ingredient o2) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return o1.getName().toString().compareToIgnoreCase(o2.getName().toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/IngredientName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents the name of an ingredient."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidIngredientName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            \"Ingredient names should only contain alphanumeric characters, spaces, and punctuation, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The first character of the ingredient name must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\-\u0027% ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public final String ingredientName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs an {@code IngredientName}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param ingredientName A valid ingredient name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientName(String ingredientName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(isValidIngredientName(ingredientName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientName \u003d ingredientName.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if a given string is a valid ingredient name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static boolean isValidIngredientName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                || (other instanceof IngredientName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 ingredientName.toLowerCase()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                        .equals(((IngredientName) other).ingredientName.toLowerCase())); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredientName.toLowerCase().hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/IngredientQuantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.fraction.MixedFraction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.NonPositiveIngredientQuantityException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents the quantity of an ingredient."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientQuantity {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            \"Ingredient quantities should only contain a positive value and a unit, where the value can be \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"whole numbers, decimals, or fractions, and the unit should only contain alphabets\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String DECIMAL_REGEX \u003d \"([1-9][\\\\p{Digit}]*(\\\\.[\\\\p{Digit}]+)?)\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"|(0?\\\\.(?\u003d.*[1-9])[\\\\p{Digit}]+)\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String FRACTION_REGEX \u003d \"[1-9][\\\\p{Digit}]*( +[1-9][\\\\p{Digit}]*)?/[1-9][\\\\p{Digit}]*\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String UNIT_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient quantity must consist of a whole number, decimal, or fraction, and an optional unit."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d String.format(\"((%s)|(%s)) *(%s)?\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            DECIMAL_REGEX, FRACTION_REGEX, UNIT_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Pattern DECIMAL_PATTERN \u003d Pattern.compile(DECIMAL_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Pattern FRACTION_PATTERN \u003d Pattern.compile(FRACTION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Pattern UNIT_PATTERN \u003d Pattern.compile(UNIT_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int LARGEST_DENOMINATOR \u003d 6;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public final Number value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public final String unit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs an {@code IngredientQuantity}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param ingredientQuantity A valid ingredient quantity."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientQuantity(String ingredientQuantity) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredientQuantity);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(isValidIngredientQuantity(ingredientQuantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.value \u003d parseValue(ingredientQuantity);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.unit \u003d parseUnit(ingredientQuantity);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    IngredientQuantity(Number value, String unit) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(value, unit);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if a given string is a valid ingredient quantity."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static boolean isValidIngredientQuantity(String test) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if the specified ingredient quantity has the same unit as the ingredient quantity."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean hasSameUnitAs(IngredientQuantity other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return this.unit.equals(other.unit);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds the specified ingredient quantity to the ingredient quantity, if the ingredient quantities are compatible."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param other the ingredient quantity to be added."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a new ingredient quantity with the specified ingredient quantity added."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientQuantity add(IngredientQuantity other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(hasSameUnitAs(other));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Number newValue \u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (this.value instanceof BigDecimal \u0026\u0026 other.value instanceof BigDecimal) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((BigDecimal) this.value).add((BigDecimal) other.value);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof MixedFraction \u0026\u0026 other.value instanceof MixedFraction) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((MixedFraction) this.value).add((MixedFraction) other.value);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof BigDecimal \u0026\u0026 other.value instanceof MixedFraction) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d MixedFraction.getFromBigDecimal(((BigDecimal) this.value)).add((MixedFraction) other.value);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof MixedFraction \u0026\u0026 other.value instanceof BigDecimal) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((MixedFraction) this.value).add(MixedFraction.getFromBigDecimal(((BigDecimal) other.value)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (newValue instanceof MixedFraction \u0026\u0026 ((MixedFraction) newValue).getDenominator() \u003e LARGEST_DENOMINATOR) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            MixedFraction mixedFraction \u003d (MixedFraction) newValue;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d new BigDecimal(mixedFraction.getNumerator())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .divide(new BigDecimal(mixedFraction.getDenominator()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert newValue !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new IngredientQuantity(newValue, unit);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Subtracts the specified ingredient quantity from the ingredient quantity, if the ingredient quantities are"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * compatible."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * If the specified ingredient quantity is larger, the value of the ingredient quantity returned will be 0."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param other the ingredient quantity to be subtracted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a new ingredient quantity with the specified ingredient quantity subtracted."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientQuantity subtract(IngredientQuantity other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(hasSameUnitAs(other));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Number newValue \u003d null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (this.value instanceof BigDecimal \u0026\u0026 other.value instanceof BigDecimal) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((BigDecimal) this.value).subtract((BigDecimal) other.value);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof MixedFraction \u0026\u0026 other.value instanceof MixedFraction) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((MixedFraction) this.value).subtract((MixedFraction) other.value);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof BigDecimal \u0026\u0026 other.value instanceof MixedFraction) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d MixedFraction.getFromBigDecimal(((BigDecimal) this.value))"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .subtract((MixedFraction) other.value);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof MixedFraction \u0026\u0026 other.value instanceof BigDecimal) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((MixedFraction) this.value)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .subtract(MixedFraction.getFromBigDecimal(((BigDecimal) other.value)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (newValue instanceof MixedFraction \u0026\u0026 ((MixedFraction) newValue).getDenominator() \u003e LARGEST_DENOMINATOR) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            MixedFraction mixedFraction \u003d (MixedFraction) newValue;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d new BigDecimal(mixedFraction.getNumerator())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .divide(new BigDecimal(mixedFraction.getDenominator()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert newValue !\u003d null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (newValue.doubleValue() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new NonPositiveIngredientQuantityException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new IngredientQuantity(newValue, unit);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the proportion of {@code other} with respect to the ingredient."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a double value between 0 and 1 (inclusive)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public double asProportionOf(IngredientQuantity other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(hasSameUnitAs(other));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        double proportion \u003d 0;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (this.value instanceof BigDecimal \u0026\u0026 other.value instanceof BigDecimal) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                proportion \u003d ((BigDecimal) this.value).divide((BigDecimal) other.value).doubleValue();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            } catch (ArithmeticException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                proportion \u003d this.value.doubleValue() / other.value.doubleValue();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof MixedFraction \u0026\u0026 other.value instanceof MixedFraction) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            proportion \u003d ((MixedFraction) this.value).divide((MixedFraction) other.value).doubleValue();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof BigDecimal \u0026\u0026 other.value instanceof MixedFraction) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            proportion \u003d MixedFraction.getFromBigDecimal(((BigDecimal) this.value))"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .divide((MixedFraction) other.value).doubleValue();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof MixedFraction \u0026\u0026 other.value instanceof BigDecimal) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            proportion \u003d ((MixedFraction) this.value)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .divide(MixedFraction.getFromBigDecimal(((BigDecimal) other.value))).doubleValue();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (proportion \u003e 1) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return proportion;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the value of an ingredient\u0027s quantity."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param ingredientQuantity The given string representing an ingredient\u0027s quantity."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return The value of the ingredient\u0027s IngredientQuantity."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static Number parseValue(String ingredientQuantity) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(isValidIngredientQuantity(ingredientQuantity));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Number parsedValue \u003d null;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Matcher decimalMatcher \u003d DECIMAL_PATTERN.matcher(ingredientQuantity);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Matcher mixedFractionMatcher \u003d FRACTION_PATTERN.matcher(ingredientQuantity);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (mixedFractionMatcher.find()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            parsedValue \u003d MixedFraction.parseUnsignedMixedFraction(mixedFractionMatcher.group().trim());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (decimalMatcher.find()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            parsedValue \u003d new BigDecimal(decimalMatcher.group().trim());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (parsedValue instanceof MixedFraction"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 ((MixedFraction) parsedValue).getDenominator() \u003e LARGEST_DENOMINATOR) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            parsedValue \u003d ((MixedFraction) parsedValue).doubleValue();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert parsedValue !\u003d null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return parsedValue;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the unit of an ingredient\u0027s quantity."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param ingredientQuantity The given string representing an ingredient\u0027s quantity."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return The unit of the ingredient\u0027s IngredientQuantity."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static String parseUnit(String ingredientQuantity) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(isValidIngredientQuantity(ingredientQuantity));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Matcher unitMatcher \u003d UNIT_PATTERN.matcher(ingredientQuantity);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (unitMatcher.find()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return unitMatcher.group().trim();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (unit.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return value.toString();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"%s %s\", value, unit);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                || (other instanceof IngredientQuantity // instanceof handles nulls"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 value.equals(((IngredientQuantity) other).value)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 unit.equals(((IngredientQuantity) other).unit));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return Objects.hash(value, unit);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 239,
      "teo-jun-xiong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/UniqueIngredientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * A list of ingredients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * An ingredient is considered unique by comparing using {@code Ingredient#isSameIngredient(Ingredient)}. As such,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * adding and updating of ingredients uses {@code Ingredient#isSameIngredient(Ingredient)} for equality so as to ensure"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * that the ingredient being added or updated is unique in terms of identity in the UniqueIngredientList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * @see Ingredient#isSameIngredient(Ingredient)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class UniqueIngredientList implements Iterable\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    protected final ObservableList\u003cIngredient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    protected final ObservableList\u003cIngredient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if the list contains an ingredient equivalent to the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean contains(Ingredient toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameIngredient);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an ingredient equivalent to given argument, if the list contains an equivalent ingredient."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient find(Ingredient toFind) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(contains(toFind));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return internalList.stream().filter(toFind::isSameIngredient).findFirst().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds an ingredient to the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void add(Ingredient toAdd) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            int index \u003d internalList.indexOf(find(toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            internalList.set(index, find(toAdd).add(toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            internalList.add(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the ingredient {@code target} in the list with {@code editedIngredient}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient identity of {@code editedIngredient} must not be the same as another existing ingredient in the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!target.isSameIngredient(editedIngredient) \u0026\u0026 contains(editedIngredient)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            remove(target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            add(editedIngredient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            internalList.set(index, editedIngredient);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes the quantity of the ingredient from the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must exist in the list. If the resulting quantity is not positive, the ingredient will be removed"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * from the list entirely."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove(Ingredient toRemove) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!contains(toRemove)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient originalIngredient \u003d find(toRemove);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (toRemove.equals(originalIngredient)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            internalList.remove(originalIngredient);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Ingredient subtractedIngredient \u003d originalIngredient.subtract(toRemove);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setIngredient(originalIngredient, subtractedIngredient);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes all of the ingredient with the ingredient name from the list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must exist in the list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove(IngredientName toRemove) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        boolean hasIngredient \u003d internalList.stream().anyMatch(x -\u003e toRemove.equals(x.getName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!hasIngredient) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.setIngredients(internalList.stream()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .filter(x -\u003e !toRemove.equals(x.getName()))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void setIngredients(UniqueIngredientList replacement) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Replaces the contents of this list with {@code ingredients}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void setIngredients(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireAllNonNull(ingredients);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (Ingredient ingredient : ingredients) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            add(ingredient);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sorts the list of ingredients using the specified comparator."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void sort(Comparator\u003c? super Ingredient\u003e comparator) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Collections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public ObservableList\u003cIngredient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public Iterator\u003cIngredient\u003e iterator() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof UniqueIngredientList // instanceof handles nulls"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueIngredientList) other).internalList));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (internalList.size() \u003e 0) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            int i;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            for (i \u003d 0; i \u003c internalList.size() - 1; i++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                sb.append(internalList.get(i).toString()).append(\", \");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            sb.append(internalList.get(i).toString());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 92,
      "teo-jun-xiong": 25,
      "hans555": 5,
      "tzihiang": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/exceptions/IncompatibleIngredientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Returns that the ingredient is incompatible with an existing ingredient in the list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IncompatibleIngredientException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IncompatibleIngredientException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(\"The ingredient you are trying to modify has a different unit.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/exceptions/IngredientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Returns that the ingredient is not found within the list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class IngredientNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public IngredientNotFoundException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        super(\"Ingredient is not found in the list.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/exceptions/NonPositiveIngredientQuantityException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Returns that the ingredient quantity is not positive"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class NonPositiveIngredientQuantityException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public NonPositiveIngredientQuantityException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(\"Ingredient quantity must be positive.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Recipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.TagComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Represents a Recipe in the cookbook."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class Recipe {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final RecipeName name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final RecipeDescription description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final UniqueIngredientList ingredients;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final UniqueStepList steps;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Recipe constructor for only recipe name and description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Recipe(RecipeName name, RecipeDescription description) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireAllNonNull(name, description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.steps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Recipe constructor for optional fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Recipe(RecipeName name, RecipeDescription description,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            UniqueIngredientList ingredients, UniqueStepList steps, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this(name, description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(ingredients, steps, tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients.setIngredients(ingredients);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.steps.setSteps(steps);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeName getName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeDescription getDescription() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an immutable list of ingredients, which throws {@code UnsupportedOperationException} if modification"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * is attempted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getIngredients() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public UniqueStepList getSteps() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return steps;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public String getTagsString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        getTags().forEach(tag -\u003e sb.append(\" \").append(tag.toString()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return sb.toString().trim().replace(\"[\", \"\").replace(\"]\", \" \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public String getNoWhitespaceIngredientNamesString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (Ingredient i : getIngredients()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            sb.append(i.getName().ingredientName.replace(\" \", \"\")).append(\" \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if both recipes have the same name."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * This defines a weaker notion of equality between two recipes."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean isSameRecipe(Recipe otherRecipe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (otherRecipe \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return otherRecipe !\u003d null"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 otherRecipe.getName().equals(getName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Returns true if both recipes have the same identity and data fields."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * This defines a stronger notion of equality between two recipes."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!(other instanceof Recipe)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Recipe otherRecipe \u003d (Recipe) other;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return otherRecipe.getName().equals(getName())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 otherRecipe.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 otherRecipe.getIngredients().equals(getIngredients())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 otherRecipe.getSteps().equals(getSteps())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 otherRecipe.getTags().equals(getTags());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return Objects.hash(name, description, ingredients, steps, tags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .append(\"\\nDescription: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .append(\"\\nIngredients: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .append(getIngredients())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .append(\"\\nPreparation Steps:\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .append(getSteps())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .append(\"\\nTags:\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(getTags());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        tags.sort(new TagComparator());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        tags.forEach(tag -\u003e builder.append(\" \").append(tag.toString()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 25,
      "shanecsj": 105,
      "teo-jun-xiong": 27,
      "hans555": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeContainsInventoryIngredientsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.model.recipe.RecipeInventoryIngredientsSimilarityComparator.calculateSimilarity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Tests that a {@code Recipe}\u0027s {@code Ingredient} matches any of the ingredients in the inventory."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeContainsInventoryIngredientsPredicate implements Predicate\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final ReadOnlyInventory inventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public RecipeContainsInventoryIngredientsPredicate(ReadOnlyInventory inventory) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.inventory \u003d inventory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return calculateSimilarity(recipe, inventory) \u003e 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            || (other instanceof RecipeContainsInventoryIngredientsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u0026\u0026 inventory.equals(((RecipeContainsInventoryIngredientsPredicate) other).inventory)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 8,
      "teo-jun-xiong": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeContainsTagsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Tests that a {@code Recipe}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeContainsTagsPredicate implements Predicate\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final List\u003cString\u003e tags;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeContainsTagsPredicate(List\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return tags.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(recipe.getTagsString(), tag));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            || (other instanceof RecipeContainsTagsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u0026\u0026 tags.equals(((RecipeContainsTagsPredicate) other).tags)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeDefaultComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * The default comparator for {@code Recipe}, which compares recipes by their names using lexicographical order."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class RecipeDefaultComparator implements Comparator\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Compares recipes by their names using lexicographical order."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int compare(Recipe o1, Recipe o2) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return o1.getName().toString().compareToIgnoreCase(o2.getName().toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeDescription.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Represents a Recipe\u0027s description in the cookbook."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRecipeDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeDescription {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            \"Recipe descriptions should only contain alphanumeric characters, spaces and punctuations, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public final String fullRecipeDescription;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param description A valid Description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeDescription(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        checkArgument(isValidRecipeDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        fullRecipeDescription \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Returns true if a given string is a valid recipe Description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static boolean isValidRecipeDescription(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return fullRecipeDescription;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof RecipeDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 fullRecipeDescription.equals(((RecipeDescription) other).fullRecipeDescription)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return fullRecipeDescription.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeInventoryIngredientsSimilarityComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A comparator for {@code Recipe}, which compares recipes by their similarity to an inventory\u0027s ingredients."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class RecipeInventoryIngredientsSimilarityComparator implements Comparator\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NO_INGREDIENTS \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final double ZERO_SIMILARITY \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final double DEFAULT_SIMILARITY \u003d 0.5;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public final ReadOnlyInventory inventory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public RecipeInventoryIngredientsSimilarityComparator(ReadOnlyInventory inventory) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.inventory \u003d inventory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Compares recipes by their similarity to an inventory\u0027s ingredients."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int compare(Recipe o1, Recipe o2) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return Double.compare(calculateSimilarity(o2, inventory), calculateSimilarity(o1, inventory));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the proportion of recipe ingredients that the inventory contains."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param recipe the specified recipe"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param inventory the specified inventory"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a double value between 0 and 1 (inclusive)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static double calculateSimilarity(Recipe recipe, ReadOnlyInventory inventory) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (recipe.getIngredients().size() \u003d\u003d NO_INGREDIENTS) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return ZERO_SIMILARITY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return recipe.getIngredients().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .map(recipeIngredient -\u003e inventory.getIngredientList().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .filter(inventoryIngredient -\u003e inventoryIngredient.isCompatibleWith(recipeIngredient))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .findFirst()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .map(inventoryIngredient -\u003e inventoryIngredient.asProportionOf(recipeIngredient))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElseGet(() -\u003e (inventory.getIngredientList().stream().filter(inventoryIngredient"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                        -\u003e inventoryIngredient.isSameIngredient(recipeIngredient)).count() \u003e NO_INGREDIENTS)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            ? DEFAULT_SIMILARITY : ZERO_SIMILARITY))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .reduce(ZERO_SIMILARITY, (x, y) -\u003e x + y, (x, y) -\u003e x + y) / recipe.getIngredients().size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Represents a Recipe\u0027s name in the cookbook."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRecipeName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            \"Recipe names should only contain alphanumeric characters, spaces and punctuations, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public final String fullRecipeName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        checkArgument(isValidRecipeName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        fullRecipeName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Returns true if a given string is a valid recipe name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static boolean isValidRecipeName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return fullRecipeName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof RecipeName // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 fullRecipeName.equals(((RecipeName) other).fullRecipeName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return fullRecipeName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Tests that a {@code Recipe}\u0027s {@code RecipeName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeNameContainsKeywordsPredicate implements Predicate\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(recipe.getName().fullRecipeName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof RecipeNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 keywords.equals(((RecipeNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/UniqueRecipeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * A list of recipes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A recipe is considered unique by comparing using {@code Recipe#isSameRecipe(Recipe)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * recipes uses Recipe#isSameRecipe(Recipe) for equality so as to ensure that the recipe being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * unique in terms of identity in the UniqueRecipeList. However, the removal of a recipe uses Recipe#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * as to ensure that the recipe with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * @see Recipe#isSameRecipe(Recipe)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class UniqueRecipeList implements Iterable\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Checks if otherRecipe already exists in the list.*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @return true is otherRecipe exists, false otherwise."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean contains(Recipe otherRecipe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(otherRecipe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return internalList.stream().anyMatch(otherRecipe::isSameRecipe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Adds an recipe to the list if it does not yet exist."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void add(Recipe toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Replaces the recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!target.isSameRecipe(editedRecipe) \u0026\u0026 contains(editedRecipe)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        internalList.set(index, editedRecipe);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Replaces all the current recipes in UniqueRecipeList and replaces it with {@code replacement}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * {@code replacement} must exist."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @param replacement"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipes(UniqueRecipeList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Replaces the contents of this list with {@code recipes}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireAllNonNull(recipes);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!recipesAreUnique(recipes)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        internalList.setAll(recipes);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Removes the recipe from the list, provided it exists."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void remove(Recipe toRemove) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sorts the list of recipes using the specified comparator."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void sort(Comparator\u003c? super Recipe\u003e comparator) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Collections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public ObservableList\u003cRecipe\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public Iterator\u003cRecipe\u003e iterator() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if {@code recipes} contains only unique recipes."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private boolean recipesAreUnique(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c recipes.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                if (recipes.get(i).isSameRecipe(recipes.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || (other instanceof UniqueRecipeList // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRecipeList) other).internalList));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 17,
      "teo-jun-xiong": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/DuplicateRecipeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Signals that the operation will result in duplicate Recipes (Recipes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class DuplicateRecipeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public DuplicateRecipeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(\"Operation would result in duplicate recipes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/RecipeNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " *  Returns that the recipe is not found within the list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(\"Recipe is not found in the list.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/step/Step.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Represents a cooking step in a recipe"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStep(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class Step {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "            \"Step should only contain sentences, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The first character of the step must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public final String stepDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Constructs a {@code Step}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param step A valid step."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Step(String step) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(step);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        checkArgument(isValidStep(step), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        stepDescription \u003d step;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns true if a given string is a valid step."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static boolean isValidStep(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public String getStepDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return stepDescription;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return stepDescription;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof Step // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 stepDescription.equals(((Step) other).stepDescription)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return stepDescription.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 4,
      "hans555": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/step/UniqueStepList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.exceptions.DuplicateStepException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.exceptions.StepNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": " * A list of steps that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": " * A step is considered unique by comparing using {@code Step#equals(Object)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Steps uses Step#equals(Object) for equality so as to ensure that the step being added, removed or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": " * unique in terms of identity in the UniqueStepList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": " * @see Step#equals(Object)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class UniqueStepList implements Iterable\u003cStep\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final ObservableList\u003cStep\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final ObservableList\u003cStep\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns true if the list contains an equivalent step as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean contains(Step toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return internalList.stream().anyMatch(step -\u003e step.equals(toCheck));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Adds a step to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The step must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void add(Step toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new DuplicateStepException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Adds a step to given index in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The step must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void add(Index index, Step toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new DuplicateStepException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "        internalList.add(index.getZeroBased(), toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Replaces the step {@code target} in the list with {@code editedStep}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The stepDescription of {@code editedStep} must not be the same as another existing step in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep(Step target, Step editedStep) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireAllNonNull(target, editedStep);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new StepNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!target.equals(editedStep) \u0026\u0026 contains(editedStep)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new DuplicateStepException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "        internalList.set(index, editedStep);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Removes the equivalent step from the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The step must exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void remove(Step toRemove) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new StepNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Removes the step from given index  in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The step must exist in the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Step remove(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Step toRemove \u003d internalList.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return toRemove;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps(UniqueStepList replacement) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hans555"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Replaces the contents of this list with {@code Step}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * {@code Step} must not contain duplicate persons."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps(List\u003cStep\u003e steps) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireAllNonNull(steps);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!stepsAreUnique(steps)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new DuplicateStepException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hans555"
        },
        "content": "        internalList.setAll(steps);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public ObservableList\u003cStep\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Iterator\u003cStep\u003e iterator() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof UniqueStepList // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueStepList) other).internalList));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns true if {@code Step} contains only unique steps."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private boolean stepsAreUnique(List\u003cStep\u003e steps) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hans555"
        },
        "content": "        for (int i \u003d 0; i \u003c steps.size() - 1; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hans555"
        },
        "content": "            for (int j \u003d i + 1; j \u003c steps.size(); j++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hans555"
        },
        "content": "                if (steps.get(i).equals(steps.get(j))) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hans555"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hans555"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            sb.append(\"\\n\").append(i + 1).append(\": \").append(internalList.get(i).toString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 11,
      "hans555": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/model/step/exceptions/DuplicateStepException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Signals that the operation will result in duplicate Steps (Steps are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": " * stepDescription)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class DuplicateStepException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public DuplicateStepException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "        super(\"Operation would result in duplicate step\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/step/exceptions/StepNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Signals that the operation is unable to find the specified step."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class StepNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public StepNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "        super(\"Step not found\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Comparator to compare tags alphabetically."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class TagComparator implements Comparator\u003cTag\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public int compare(Tag o1, Tag o2) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return o1.toString().compareTo(o2.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/PdfExporter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDPage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDPageContentStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.apache.pdfbox.pdmodel.common.PDRectangle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.apache.pdfbox.pdmodel.font.PDFont;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.apache.pdfbox.pdmodel.font.PDType1Font;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Exports the given arguments to a pdf file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class PdfExporter {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final PDFont PDF_FONT \u003d PDType1Font.HELVETICA;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final float FONT_SIZE \u003d 16;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String MULTIPLE_LINE_PREFIX \u003d \"O    \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String PDF_HEADER_TEXT \u003d \"My Shopping List\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String MULTIPLE_LINE_SUB_LINES_PREFIX \u003d \"       \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final int START_INDEX \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final int LINE_CHARACTER_LIMIT \u003d 50;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final int MULTIPLE_LINE_CHARACTER_LIMIT \u003d 43;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Exports the given list of {@code ingredients} from the cart to a pdf file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @param ingredients The list of ingredients in the cart."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @throws IOException if cart.pdf is open and therefore unmodifiable."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static void exportCart(ObservableList\u003cIngredient\u003e ingredients) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        try (PDDocument doc \u003d new PDDocument()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            PDPage page \u003d new PDPage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            doc.addPage(page);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            PDPageContentStream contentStream \u003d new PDPageContentStream(doc, page);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            float leading \u003d 1.5f * FONT_SIZE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            PDRectangle mediabox \u003d page.getMediaBox();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            float margin \u003d 72;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            float startX \u003d mediabox.getLowerLeftX() + margin;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            float startY \u003d mediabox.getUpperRightY() - margin;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            contentStream.beginText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            contentStream.setFont(PDF_FONT, FONT_SIZE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            contentStream.newLineAtOffset(startX, startY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            List\u003cString\u003e lines \u003d getTextFromCart(ingredients);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            while (index \u003c lines.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                if (index % 28 \u003d\u003d 0 \u0026\u0026 index !\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    contentStream.endText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    contentStream.close();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    page \u003d new PDPage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    doc.addPage(page);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    contentStream \u003d new PDPageContentStream(doc, page);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    contentStream.beginText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    contentStream.setFont(PDF_FONT, FONT_SIZE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    contentStream.newLineAtOffset(startX, startY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                contentStream.showText(lines.get(index));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                contentStream.newLineAtOffset(0, -leading);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            contentStream.endText();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            contentStream.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            doc.save(new File(\"cart.pdf\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static List\u003cString\u003e getTextFromCart(ObservableList\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        lines.add(PDF_HEADER_TEXT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        lines.add(\" \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (Ingredient ingredient : ingredients) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            String text \u003d MULTIPLE_LINE_PREFIX + ingredient.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            boolean isFirstLine \u003d true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            while (text.length() \u003e 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                if (text.length() \u003c LINE_CHARACTER_LIMIT) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    if (isFirstLine) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        lines.add(text);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        lines.add(MULTIPLE_LINE_SUB_LINES_PREFIX + text);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    if (isFirstLine) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        lines.add(text.substring(START_INDEX, LINE_CHARACTER_LIMIT));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        text \u003d text.substring(LINE_CHARACTER_LIMIT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        lines.add(\"       \" + text.substring(START_INDEX, MULTIPLE_LINE_CHARACTER_LIMIT));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        text \u003d text.substring(MULTIPLE_LINE_CHARACTER_LIMIT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    isFirstLine \u003d false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return lines;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Contains utility methods for populating {@code CookingPapa} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static ReadOnlyCookbook getSampleCookbook() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cookbook sampleCookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (Recipe sampleRecipe : getSampleRecipes()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            sampleCookbook.addRecipe(sampleRecipe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return sampleCookbook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static ReadOnlyInventory getSampleInventory() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory sampleInventory \u003d new Inventory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (Ingredient sampleIngredient : getSampleIngredients()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            sampleInventory.addIngredient(sampleIngredient);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return sampleInventory;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static ReadOnlyCart getSampleCart() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart sampleCart \u003d new Cart();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (Ingredient sampleIngredient : getSampleIngredients()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            sampleCart.addIngredient(sampleIngredient);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return sampleCart;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static Ingredient[] getSampleIngredients() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new Ingredient[] {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Eggs\"), new IngredientQuantity(\"10\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Parmesan\"), new IngredientQuantity(\"1 kg\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Bacon\"), new IngredientQuantity(\"10 pieces\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Linguine\"), new IngredientQuantity(\"250 g\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Olive oil\"), new IngredientQuantity(\"600 ml\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Black pepper\"), new IngredientQuantity(\"300 g\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Salt\"), new IngredientQuantity(\"500 g\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Garlic\"), new IngredientQuantity(\"5 cloves\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Dried chili flakes\"), new IngredientQuantity(\"50 g\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Minced beef\"), new IngredientQuantity(\"500 g\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "            new Ingredient(new IngredientName(\"Tomatoes\"), new IngredientQuantity(\"10\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "            new Ingredient(new IngredientName(\"Milk\"), new IngredientQuantity(\"500 ml\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "            new Ingredient(new IngredientName(\"Butter\"), new IngredientQuantity(\"500 g\"))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static Recipe[] getSampleRecipes() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        UniqueIngredientList scrambledEggsIngredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        UniqueStepList scrambledEggsSteps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        scrambledEggsIngredients.add(new Ingredient(new IngredientName(\"Eggs\"), new IngredientQuantity(\"4\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        scrambledEggsIngredients.add(new Ingredient(new IngredientName(\"Butter\"), new IngredientQuantity(\"20 g\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        scrambledEggsIngredients.add(new Ingredient(new IngredientName(\"Milk\"), new IngredientQuantity(\"200 ml\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        scrambledEggsSteps.add(new Step(\"Beat eggs, milk, salt and pepper in medium bowl until blended.\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        scrambledEggsSteps.add(new Step(\"Heat butter in large nonstick skillet over medium heat until hot. \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Pour in egg mixture. As eggs begin to set, gently PULL the eggs across the pan with a spatula, \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"forming large soft curds.\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        scrambledEggsSteps.add(new Step(\"Continue cooking pulling, lifting and folding eggs until thickened \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"and no visible liquid egg remains. Do not stir constantly. \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Remove from heat. Serve immediately.\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        UniqueIngredientList carbonaraIngredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        UniqueStepList carbonaraSteps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraIngredients.add(new Ingredient(new IngredientName(\"Guanciale\"), new IngredientQuantity(\"200 g\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraIngredients.add(new Ingredient(new IngredientName(\"Spaghetti\"), new IngredientQuantity(\"1 serving\")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraIngredients.add(new Ingredient(new IngredientName(\"Cheese\"), new IngredientQuantity(\"200 g\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraIngredients.add(new Ingredient(new IngredientName(\"Eggs\"), new IngredientQuantity(\"6\")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraIngredients.add(new Ingredient(new IngredientName(\"Olive oil\"), new IngredientQuantity(\"2 tbsp\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraIngredients.add(new Ingredient(new IngredientName(\"Salt\"), new IngredientQuantity(\"1 tbsp\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraIngredients.add(new Ingredient(new IngredientName(\"Pepper\"), new IngredientQuantity(\"2 tbsp\")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Heat 500ml of water in a large pot over high. \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"When water starts to steam, add 3 Tbsp. salt and \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"cover pot with a lid (this will bring water to a boil faster).\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"While you are waiting on the water, do a little prep. Remove guanciale from \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"packaging and cut into about quarter inch strips. \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Finely grate 2 oz. cheese and set aside one-quarter of cheese for later.\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Whisk 4 egg yolks and 2 whole eggs in a medium bowl until no streaks remain, \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"then stir in remaining grated cheese. Add several cranks of pepper and set aside.\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Working next to pot, heat 2 Tbsp. oil in a large Dutch oven or \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"other heavy pot over medium. Add guanciale and cook, stirring occasionally, \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"until crisp around the edges, 7 to 10 minutes.\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Remove pot from heat. Using a wooden spoon, fish out guanciale and transfer to \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"a small bowl. Pour fat into a heatproof measuring cup, then add back about 3 Tbsp of fat to pot. \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Discard any remaining fat.\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Cook pasta in boiling water, stirring occasionally, 2 minutes shy of package \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"instructions. Just before pasta is finished, scoop out 1 and 3 quarter cups pasta cooking \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"liquid with same heatproof measuring cup.\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Add 1 cup reserved pasta cooking liquid to Dutch oven and bring to a boil over \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"medium high. Drain pasta in a colander, then transfer to Dutch oven.\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Cook pasta, stirring constantly and vigorously, until al dente and water is \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"reduced by about half, about 2 minutes. Remove pot from heat.\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Whisk quarter cup pasta cooking liquid into reserved egg mixture, \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"then very slowly stream into Dutch oven, stirring constantly, until cheese is melted and egg is \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"thickened to form a glossy sauce. Season with salt, if needed. Thin sauce with remaining half cup \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"pasta cooking liquid, adding a tablespoonful at a time, \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"until it\u0027s the consistency of heavy cream\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        carbonaraSteps.add(new Step(\"Mix in guanciale and divide pasta among bowls. \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Top with pepper and reserved cheese.\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        UniqueIngredientList aglioOlioIngredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        UniqueStepList aglioOlioSteps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioIngredients.add(new Ingredient(new IngredientName(\"Spaghetti\"), new IngredientQuantity(\"1 serving\")));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioIngredients.add(new Ingredient(new IngredientName(\"Garlic\"), new IngredientQuantity(\"6 cloves\")));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioIngredients.add(new Ingredient(new IngredientName(\"Olive Oil\"), new IngredientQuantity(\"1 tbsp\")));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioIngredients.add(new Ingredient(new IngredientName(\"Parsley\"), new IngredientQuantity(\"1 serving\")));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioIngredients.add(new Ingredient(new IngredientName(\"Cheese\"), new IngredientQuantity(\"200 g\")));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioSteps.add(new Step(\"Bring a large pot of lightly salted water to a boil. Cook spaghetti in the \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"boiling water, stirring occasionally until cooked through but firm to the bite, \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"about 12 minutes. Drain and transfer to a pasta bowl.\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioSteps.add(new Step(\"Combine garlic and olive oil in a cold skillet. Cook over medium heat to slowly \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"toast garlic, about 10 minutes. Reduce heat to medium low when olive oil begins to bubble. \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Cook and stir until garlic is golden brown, about another 5 minutes. Remove from heat.\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioSteps.add(new Step(\"Stir red pepper flakes, black pepper, and salt into the pasta. \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Pour in olive oil and garlic, and sprinkle on Italian parsley \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"and half of the cheese; stir until combined.\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        aglioOlioSteps.add(new Step(\"Serve pasta topped with the remaining cheese.\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        UniqueIngredientList bologneseIngredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        UniqueStepList bologneseSteps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseIngredients.add(new Ingredient(new IngredientName(\"Olive oil\"), new IngredientQuantity(\"2 tbsp\")));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseIngredients.add(new Ingredient(new IngredientName(\"Beef\"), new IngredientQuantity(\"400 g\")));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseIngredients.add(new Ingredient(new IngredientName(\"Onion\"), new IngredientQuantity(\"1\")));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseIngredients.add(new Ingredient(new IngredientName(\"Garlic\"), new IngredientQuantity(\"2 cloves\")));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseIngredients.add(new Ingredient(new IngredientName(\"Carrot\"), new IngredientQuantity(\"100 g\")));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseIngredients.add(new Ingredient(new IngredientName(\"Tomatoes\"), new IngredientQuantity(\"800 g\")));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseIngredients.add(new Ingredient(new IngredientName(\"Beef Stock cube\"), new IngredientQuantity(\"1\")));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseIngredients.add(new Ingredient(new IngredientName(\"Spaghetti\"), new IngredientQuantity(\"1 Serving\")));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseSteps.add(new Step(\"Heat a large saucepan over a medium heat. Add a tablespoon of olive oil \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"and once hot add the beef mince and a pinch of salt and pepper. Cook the mince until well browned \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"over a medium high heat. Be careful not to burn the mince. It just needs to be a dark \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"brown colour. Once browned, transfer the mince to a bowl and set aside.\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseSteps.add(new Step(\"Add another tablespoon of oil to the saucepan you browned the mince in and \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"turn the heat to medium. Add the onions and a pinch of salt and fry gently for 5 to 6 minutes, \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"or until softened and translucent. Add the garlic and cook for another 2 minutes. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Add the grated carrot then pour the mince and any juices in the bowl back into the saucepan.\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseSteps.add(new Step(\"Add the tomatoes to the pan and stir well to mix. Pour in the stock, \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"bring to a simmer and then reduce the temperature to simmer gently for 45 minutes, \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"or until the sauce is thick and rich. Taste and adjust the seasoning as necessary.\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        bologneseSteps.add(new Step(\"When ready to cook the spaghetti, heat a large saucepan of water and add a \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"pinch of salt. Cook according to the packet instructions. \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"Once the spaghetti is cooked through, drain and add to the pan with the \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                + \"bolognese sauce. Mix well and serve.\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new Recipe[]{"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Recipe(new RecipeName(\"Scrambled eggs\"),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeDescription(\"Gordan Ramsay\u0027s famous creamy and fluffy scrambled eggs.\"),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    scrambledEggsIngredients, scrambledEggsSteps,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                getTagSet(\"Simple\", \"Celebrity\")),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Recipe(new RecipeName(\"Carbonara\"),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeDescription(\"The best dish sold in NUS.\"),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                carbonaraIngredients, carbonaraSteps,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                getTagSet(\"Pasta\", \"Italian\", \"Simple\", \"Creamy\")),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Recipe(new RecipeName(\"Aglio olio\"),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeDescription(\"A traditional Italian pasta dish made \""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    + \"with garlic in olive oil, and dried red chili flakes.\"),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                aglioOlioIngredients, aglioOlioSteps,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                getTagSet(\"Pasta\", \"Spicy\", \"Italian\", \"Vegan\")),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Recipe(new RecipeName(\"Spaghetti bolognese\"),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeDescription(\"Jaime Oliver\u0027s great version of the classic Italian Bolognese.\"),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                bologneseIngredients, bologneseSteps,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                getTagSet(\"Pasta\", \"Tomatoes\", \"Celebrity\"))"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 22,
      "teo-jun-xiong": 42,
      "hans555": 3,
      "-": 29,
      "tzihiang": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CartStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Cart}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface CartStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCartFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns Cart data as a {@link ReadOnlyCart}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCart\u003e readCart() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #getCartFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCart\u003e readCart(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Saves the given {@link ReadOnlyCart} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param cart cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCart(ReadOnlyCart cart) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #saveCart(ReadOnlyCart)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCart(ReadOnlyCart cart, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CookbookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Cookbook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface CookbookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCookbookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns Cookbook data as a {@link ReadOnlyCookbook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCookbook\u003e readCookbook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #getCookbookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCookbook\u003e readCookbook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Saves the given {@link ReadOnlyCookbook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param cookbook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCookbook(ReadOnlyCookbook cookbook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #saveCookbook(ReadOnlyCookbook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCookbook(ReadOnlyCookbook cookbook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/InventoryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Inventory}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface InventoryStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns Inventory data as a {@link ReadOnlyInventory}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #getInventoryFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Saves the given {@link ReadOnlyInventory} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param inventory cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #saveInventory(ReadOnlyInventory)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedIngredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Jackson-friendly version of {@link Ingredient}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class JsonAdaptedIngredient {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Ingredient\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredient} with the given {@code name} and {@code quantity}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonAdaptedIngredient(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @JsonProperty(\"quantity\") String quantity) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts a given {@code Ingredient} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonAdaptedIngredient(Ingredient source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        quantity \u003d source.getQuantity().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts this Jackson-friendly adapted ingredient object into the model\u0027s {@code Ingredient} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ingredient."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    IngredientName.class.getSimpleName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    IngredientQuantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (!IngredientName.isValidIngredientName(name)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IllegalValueException(IngredientName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (!IngredientQuantity.isValidIngredientQuantity(quantity)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IllegalValueException(IngredientQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final IngredientName modelIngredientName \u003d new IngredientName(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final IngredientQuantity modelIngredientQuantity \u003d new IngredientQuantity(quantity);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Ingredient(modelIngredientName, modelIngredientQuantity);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRecipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Jackson-friendly version of {@link Recipe}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "class JsonAdaptedRecipe {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Recipe\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INGREDIENT \u003d \"Recipe contains duplicate ingredient(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STEP \u003d \"Recipe contains duplicate step(s).\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final List\u003cJsonAdaptedStep\u003e steps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecipe} with the given recipe details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public JsonAdaptedRecipe(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                             @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                             @JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                             @JsonProperty(\"steps\") List\u003cJsonAdaptedStep\u003e steps,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (ingredients !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (steps !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            this.steps.addAll(steps);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Converts a given {@code Recipe} into this class for Jackson use."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public JsonAdaptedRecipe(Recipe source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        name \u003d source.getName().fullRecipeName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        description \u003d source.getDescription().fullRecipeDescription;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.addAll(source.getIngredients().stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        steps.addAll(source.getSteps().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .map(JsonAdaptedStep::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Converts this Jackson-friendly adapted recipe object into the model\u0027s {@code Recipe} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted recipe."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Recipe toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final List\u003cTag\u003e recipeTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            recipeTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, RecipeName.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!RecipeName.isValidRecipeName(name)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new IllegalValueException(RecipeName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, RecipeDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!RecipeDescription.isValidRecipeDescription(description)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new IllegalValueException(RecipeDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final RecipeName modelName \u003d new RecipeName(name);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final RecipeDescription modelDescription \u003d new RecipeDescription(description);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final UniqueIngredientList modelIngredientList \u003d getModelIngredientList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final UniqueStepList modelStepList \u003d getModelStepList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(recipeTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new Recipe(modelName, modelDescription, modelIngredientList, modelStepList, modelTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    * Converts Jackson-friendly adapted list of Ingredient objects into the model\u0027s {@code UniqueIngredientList} object."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    * @throws IllegalValueException if there were any data constraints violated in the adapted ingredient list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private UniqueIngredientList getModelIngredientList() throws IllegalValueException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final UniqueIngredientList modelIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        for (JsonAdaptedIngredient jsonAdaptedIngredient : ingredients) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Ingredient ingredient \u003d jsonAdaptedIngredient.toModelType();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (modelIngredientList.contains(ingredient)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INGREDIENT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            modelIngredientList.add(ingredient);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return modelIngredientList;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Converts Jackson-friendly adapted list of Step objects into the model\u0027s {@code UniqueStepList} object."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted step list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private UniqueStepList getModelStepList() throws IllegalValueException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final UniqueStepList modelStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        for (JsonAdaptedStep jsonAdaptedStep : steps) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Step step \u003d jsonAdaptedStep.toModelType();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (modelStepList.contains(step)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STEP);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            modelStepList.add(step);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return modelStepList;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "shanecsj": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStep.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Jackson-friendly version of {@link Step}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "class JsonAdaptedStep {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Step\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final String stepDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Constructs a {@code JsonAdaptedStep} with the given {@code stepDescription}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public JsonAdaptedStep(@JsonProperty(\"stepDescription\") String stepDescription) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.stepDescription \u003d stepDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Converts a given {@code Step} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public JsonAdaptedStep(Step source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        stepDescription \u003d source.getStepDescription();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Converts this Jackson-friendly adapted ingredient object into the model\u0027s {@code Ingredient} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ingredient."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public Step toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (stepDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \"step description\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        } else if (!Step.isValidStep(stepDescription)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new IllegalValueException(Step.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new Step(stepDescription);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 46,
      "shanecsj": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCartStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A class to access Cart data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonCartStorage implements CartStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCartStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonCartStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCartFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCart\u003e readCart() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readCart(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #readCart()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCart\u003e readCart(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cJsonSerializableCart\u003e jsonCart \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                filePath, JsonSerializableCart.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!jsonCart.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.of(jsonCart.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart(ReadOnlyCart cart) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveCart(cart, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #saveCart(ReadOnlyCart)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart(ReadOnlyCart cart, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cart);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCart(cart), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCookbookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A class to access Cookbook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonCookbookStorage implements CookbookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCookbookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonCookbookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCookbookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCookbook\u003e readCookbook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readCookbook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #readCookbook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCookbook\u003e readCookbook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Optional\u003cJsonSerializableCookbook\u003e jsonCookbook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                filePath, JsonSerializableCookbook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (jsonCookbook.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return Optional.of(jsonCookbook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCookbook(ReadOnlyCookbook cookbook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveCookbook(cookbook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #saveCookbook(ReadOnlyCookbook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCookbook(ReadOnlyCookbook cookbook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cookbook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCookbook(cookbook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 66,
      "teo-jun-xiong": 13,
      "shanecsj": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonInventoryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A class to access Inventory data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonInventoryStorage implements InventoryStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonInventoryStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonInventoryStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readInventory(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #readInventory()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cJsonSerializableInventory\u003e jsonInventory \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                filePath, JsonSerializableInventory.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!jsonInventory.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.of(jsonInventory.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveInventory(inventory, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #saveInventory(ReadOnlyInventory)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(inventory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableInventory(inventory), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * An Immutable Cart that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "@JsonRootName(value \u003d \"cart\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class JsonSerializableCart {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INGREDIENT \u003d \"Cart contains duplicate ingredient(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a {@code JsonSerializableCart} with the given ingredients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonSerializableCart(@JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts a given {@code ReadOnlyCart} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCart}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonSerializableCart(ReadOnlyCart source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.addAll(source.getIngredientList()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts this cart into the model\u0027s {@code Cart} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Cart toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart cart \u003d new Cart();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (JsonAdaptedIngredient jsonAdaptedIngredient : ingredients) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Ingredient ingredient \u003d jsonAdaptedIngredient.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (cart.hasIngredient(ingredient)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INGREDIENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            cart.addIngredient(ingredient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cart;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCookbook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * An Immutable Cookbook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@JsonRootName(value \u003d \"cookbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "class JsonSerializableCookbook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"Recipe list contains duplicate recipe(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final List\u003cJsonAdaptedRecipe\u003e recipes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Constructs a {@code JsonSerializableCookbook} with the given recipes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public JsonSerializableCookbook(@JsonProperty(\"recipes\") List\u003cJsonAdaptedRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.recipes.addAll(recipes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Converts a given {@code ReadOnlyCookbook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCookbook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public JsonSerializableCookbook(ReadOnlyCookbook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        recipes.addAll(source.getRecipeList()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .map(JsonAdaptedRecipe::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Converts this cookbook into the model\u0027s {@code Cookbook} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Cookbook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Cookbook cookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        for (JsonAdaptedRecipe jsonAdaptedRecipe : recipes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Recipe recipe \u003d jsonAdaptedRecipe.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (cookbook.hasRecipe(recipe)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            cookbook.addRecipe(recipe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return cookbook;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 59,
      "teo-jun-xiong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableInventory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * An Immutable Inventory that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "@JsonRootName(value \u003d \"inventory\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class JsonSerializableInventory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INGREDIENT \u003d \"Inventory contains duplicate ingredient(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a {@code JsonSerializableInventory} with the given ingredients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonSerializableInventory(@JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts a given {@code ReadOnlyInventory} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableInventory}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonSerializableInventory(ReadOnlyInventory source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.addAll(source.getIngredientList()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts this inventory into the model\u0027s {@code Inventory} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Inventory toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (JsonAdaptedIngredient jsonAdaptedIngredient : ingredients) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Ingredient ingredient \u003d jsonAdaptedIngredient.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (inventory.hasIngredient(ingredient)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INGREDIENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            inventory.addIngredient(ingredient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface Storage extends CookbookStorage, InventoryStorage, CartStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCookbookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCartFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCookbook\u003e readCookbook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCookbook(ReadOnlyCookbook cookbook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCart\u003e readCart() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCart(ReadOnlyCart cart) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 25,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Manages storage of Cooking Papa data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private CookbookStorage cookbookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private InventoryStorage inventoryStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private CartStorage cartStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public StorageManager(CookbookStorage cookbookStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            InventoryStorage inventoryStorage, CartStorage cartStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cookbookStorage \u003d cookbookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.inventoryStorage \u003d inventoryStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cartStorage \u003d cartStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Cookbook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCookbookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cookbookStorage.getCookbookFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCookbook\u003e readCookbook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readCookbook(cookbookStorage.getCookbookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCookbook\u003e readCookbook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cookbookStorage.readCookbook(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCookbook(ReadOnlyCookbook cookbook) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveCookbook(cookbook, cookbookStorage.getCookbookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCookbook(ReadOnlyCookbook cookbook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cookbookStorage.saveCookbook(cookbook, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Inventory methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventoryStorage.getInventoryFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readInventory(inventoryStorage.getInventoryFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventoryStorage.readInventory(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveInventory(inventory, inventoryStorage.getInventoryFilePath());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventoryStorage.saveInventory(inventory, filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Cart methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCartFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cartStorage.getCartFilePath();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCart\u003e readCart() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readCart(cartStorage.getCartFilePath());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCart\u003e readCart(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cartStorage.readCart(filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart(ReadOnlyCart cart) throws IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveCart(cart, cartStorage.getCartFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart(ReadOnlyCart cart, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cartStorage.saveCart(cart, filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 82,
      "teo-jun-xiong": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CartPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String FXML \u003d \"CartPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private ListView\u003cIngredient\u003e cartListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CartPanel(ObservableList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        cartListView.setItems(ingredientList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        cartListView.setCellFactory(listView -\u003e new CartViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of an {@code Ingredient} using a {@code CartCard}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    class CartViewCell extends ListCell\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        protected void updateItem(Ingredient ingredient, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            super.updateItem(ingredient, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            if (empty || ingredient \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setGraphic(new IngredientCard(ingredient, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CookbookPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Panel containing the list of recipes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String FXML \u003d \"CookbookPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private ListView\u003cRecipe\u003e recipeListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CookbookPanel(ObservableList\u003cRecipe\u003e recipesList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListView.setItems(recipesList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListView.setCellFactory(listView -\u003e new RecipeListViewCell());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Recipe} using a {@code RecipeCard}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    static class RecipeListViewCell extends ListCell\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        private int recipeIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        public RecipeListViewCell() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            recipeIndex \u003d -1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        public RecipeListViewCell(int recipeIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            RecipeListViewCell.this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        protected void updateItem(Recipe recipe, boolean isEmpty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            super.updateItem(recipe, isEmpty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            if (isEmpty || recipe \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                int newIndex \u003d getIndex() + 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                if (newIndex \u003d\u003d recipeIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    setGraphic(new RecipeCard(recipe, newIndex, true).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    setGraphic(new RecipeCard(recipe, newIndex).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void handleViewRecipe(Index recipeIndex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListView.setCellFactory(listView -\u003e new RecipeListViewCell(recipeIndex.getOneBased()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-f11-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IngredientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * An UI component that displays information of a {@code UniqueIngredientList}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class IngredientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String FXML \u003d \"IngredientCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public final Ingredient ingredient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public IngredientCard(Ingredient ingredient, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        name.setText(ingredient.getName().ingredientName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        quantity.setText(ingredient.getQuantity().value + \" \" + ingredient.getQuantity().unit);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!(other instanceof IngredientCard)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        IngredientCard card \u003d (IngredientCard) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u0026\u0026 ingredient.equals(card.ingredient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InventoryPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "// import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Panel containing the list of ingredients."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class InventoryPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String FXML \u003d \"InventoryPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private ListView\u003cIngredient\u003e inventoryListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public InventoryPanel(ObservableList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        inventoryListView.setItems(ingredientList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        inventoryListView.setCellFactory(listView -\u003e new IngredientListViewCell());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Custom {@code ListCell} displays the graphics of a {@code UniqueIngredientList} using {@code IngredientCard}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    static class IngredientListViewCell extends ListCell\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        protected void updateItem(Ingredient ingredient, boolean isEmpty) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            super.updateItem(ingredient, isEmpty);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            if (isEmpty || ingredient \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setGraphic(new IngredientCard(ingredient, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private CookbookPanel recipeListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private InventoryPanel inventoryIngredientListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private CartPanel cartIngredientListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private StackPane recipeListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private StackPane inventoryIngredientListPanelPlaceHolder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private StackPane cartIngredientListPanelPlaceHolder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListPanel \u003d new CookbookPanel(logic.getFilteredCookbookRecipeList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListPanelPlaceholder.getChildren().add(recipeListPanel.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        inventoryIngredientListPanel \u003d new InventoryPanel(logic.getFilteredInventoryIngredientList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventoryIngredientListPanelPlaceHolder.getChildren().add(inventoryIngredientListPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        cartIngredientListPanel \u003d new CartPanel(logic.getFilteredCartIngredientList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cartIngredientListPanelPlaceHolder.getChildren().add(cartIngredientListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getCookbookFilePath());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private void handleViewRecipe(Index recipeIndex) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListPanel \u003d new CookbookPanel(logic.getFilteredCookbookRecipeList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListPanel.handleViewRecipe(recipeIndex);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListPanelPlaceholder.getChildren().add(recipeListPanel.getRoot());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CookbookPanel getRecipeListPanel() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return recipeListPanel;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public InventoryPanel getInventoryIngredientListPanel() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventoryIngredientListPanel;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CartPanel getCartIngredientListPanel1() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cartIngredientListPanel;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            if (commandResult.isViewRecipe()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                handleViewRecipe(commandResult.getRecipeIndex());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 6,
      "teo-jun-xiong": 33,
      "-": 189
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecipeCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * An UI component that displays information of a {@code Recipe}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String FXML \u003d \"RecipeCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Recipe recipe;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private boolean isFullyDisplayed;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Button button;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeCard(Recipe recipe, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        init(recipe, displayedIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeCard(Recipe recipe, int displayedIndex, boolean isViewRecipe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        init(recipe, displayedIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (isViewRecipe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            displayRecipeComplete();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Initializes the creation of a {@code RecipeCard}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void init(Recipe recipe, int displayedIndex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipe.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        displayRecipeOverview();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ImageView imageView \u003d new ImageView(new Image(getClass().getResourceAsStream(\"/images/button_icon.png\")));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        imageView.setFitHeight(25);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        imageView.setFitWidth(25);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        button.setGraphic(imageView);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Sets the {@code RecipeCard} to display a brief overview of its {@code Recipe}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void displayRecipeOverview() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        isFullyDisplayed \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        name.setText(recipe.getName().fullRecipeName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        description.setText(recipe.getDescription().fullRecipeDescription);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Sets the {@code RecipeCard} to display a full overview of its {@code Recipe} when the view button is pressed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private void handleViewButtonAction(ActionEvent event) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (isFullyDisplayed) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            displayRecipeOverview();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            displayRecipeComplete();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private void displayRecipeComplete() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        isFullyDisplayed \u003d true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        description.setText(recipe.getDescription().fullRecipeDescription"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"\\n\\n\" + recipe.getIngredients().toString() + \"\\n\" + recipe.getSteps());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!(other instanceof RecipeCard)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeCard card \u003d (RecipeCard) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u0026\u0026 recipe.equals(card.recipe);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/gordon_ramsay_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/CartPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c!-- @@author teo-jun-xiong --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cLabel fx:id\u003d\"header\" styleClass\u003d\"cell_header_label\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "           text\u003d\"              Cart\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cHBox style\u003d\"-fx-background-color: #bdd0c4\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003cLabel styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "               text\u003d\"              NAME                                              QUANTITY\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cListView fx:id\u003d\"cartListView\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 17
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/CookbookPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c!-- @@author teo-jun-xiong --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cLabel fx:id\u003d\"header\" styleClass\u003d\"cell_header_label\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "           text\u003d\"                      Recipes\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cListView fx:id\u003d\"recipeListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 12
    }
  },
  {
    "path": "src/main/resources/view/IngredientCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c!-- @@author teo-jun-xiong --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003cBorderPane minHeight\u003d\"30.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cleft\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" maxWidth\u003d\"30.0\" minWidth\u003d\"30.0\" prefWidth\u003d\"30.0\" styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/left\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003ccenter\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" maxWidth\u003d\"195.0\" minWidth\u003d\"195.0\" prefWidth\u003d\"195.0\" styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       text\u003d\"\\$first\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/center\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cright\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" maxWidth\u003d\"90\" minWidth\u003d\"90\" prefWidth\u003d\"90\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       textAlignment\u003d\"RIGHT\" alignment\u003d\"CENTER_RIGHT\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       wrapText\u003d\"true\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/right\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 42
    }
  },
  {
    "path": "src/main/resources/view/InventoryPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c!-- @@author teo-jun-xiong --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cLabel fx:id\u003d\"header\" styleClass\u003d\"cell_header_label\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "           text\u003d\"           Inventory\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cHBox style\u003d\"-fx-background-color: #bdd0c4\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003cLabel styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "               text\u003d\"              NAME                                              QUANTITY\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cListView fx:id\u003d\"inventoryListView\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c!-- @@author teo-jun-xiong --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cfx:root maxWidth\u003d\"1000\" minHeight\u003d\"700\" minWidth\u003d\"1000\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Cooking Papa\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003cImage url\u003d\"@/images/gordon_ramsay_icon.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" maxWidth\u003d\"1000\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cleft\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cVBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" maxWidth\u003d\"600\" minWidth\u003d\"600\" prefWidth\u003d\"600\" styleClass\u003d\"pane-with-border-command-result\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"120\" maxWidth\u003d\"600\" minHeight\u003d\"120\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                       minWidth\u003d\"600\" prefHeight\u003d\"120\" prefWidth\u003d\"600\" styleClass\u003d\"pane-with-border-command-result\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cVBox fx:id\u003d\"personList\" maxWidth\u003d\"600\" minWidth\u003d\"600\" prefWidth\u003d\"600\" styleClass\u003d\"pane-with-border-recipe\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"recipeListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/left\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cright\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cVBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cVBox fx:id\u003d\"inventoryIngredientList\" prefHeight\u003d\"335.0\" prefWidth\u003d\"385\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                  styleClass\u003d\"pane-with-border-inventory\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"inventoryIngredientListPanelPlaceHolder\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cVBox fx:id\u003d\"cartIngredientList1\" prefHeight\u003d\"335.0\" prefWidth\u003d\"385\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                  styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"cartIngredientListPanelPlaceHolder\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/right\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gohkh": 3,
      "teo-jun-xiong": 72,
      "-": 12
    }
  },
  {
    "path": "src/main/resources/view/RecipeCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c!-- @@author teo-jun-xiong --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003cVBox minHeight\u003d\"60\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cInsets bottom\u003d\"8\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cleft\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cLabel fx:id\u003d\"id\" maxWidth\u003d\"30.0\" minWidth\u003d\"30.0\" prefWidth\u003d\"30.0\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/left\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003ccenter\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cVBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cInsets left\u003d\"8\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$second\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                   styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cLabel/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/center\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cright\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cHBox minHeight\u003d\"60\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cButton fx:id\u003d\"button\" onAction\u003d\"#handleViewButtonAction\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                maxWidth\u003d\"25\" maxHeight\u003d\"25\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003c/Button\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/right\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 59
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "teo-jun-xiong": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(defaultConfig, defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/fraction/MixedFractionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.commons.core.fraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.apache.commons.math3.exception.NullArgumentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class MixedFractionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MixedFraction(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseUnsignedMixedFraction() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // invalid input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(\"\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(\"null\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(\"1\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(\"1 / 2\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(\"0.5\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0, MixedFraction.parseUnsignedMixedFraction(\"1/2\").intValue());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.parseUnsignedMixedFraction(\"1/2\").getNumerator());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(2, MixedFraction.parseUnsignedMixedFraction(\"1/2\").getDenominator());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.parseUnsignedMixedFraction(\"1 2/3\").intValue());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(5, MixedFraction.parseUnsignedMixedFraction(\"1 2/3\").getNumerator());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(3, MixedFraction.parseUnsignedMixedFraction(\"1 2/3\").getDenominator());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getFromBigDecimal() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // integer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.getFromBigDecimal(new BigDecimal(\"1\")).intValue());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.getFromBigDecimal(new BigDecimal(\"1\")).getNumerator());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.getFromBigDecimal(new BigDecimal(\"1\")).getDenominator());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // double"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.getFromBigDecimal(new BigDecimal(\"1.2\")).intValue());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(6, MixedFraction.getFromBigDecimal(new BigDecimal(\"1.2\")).getNumerator());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(5, MixedFraction.getFromBigDecimal(new BigDecimal(\"1.2\")).getDenominator());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // negative double"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(-1, MixedFraction.getFromBigDecimal(new BigDecimal(\"-1.2\")).intValue());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(-6, MixedFraction.getFromBigDecimal(new BigDecimal(\"-1.2\")).getNumerator());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(5, MixedFraction.getFromBigDecimal(new BigDecimal(\"-1.2\")).getDenominator());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction a \u003d new MixedFraction(3, 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction b \u003d new MixedFraction(4, 3);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction c \u003d new MixedFraction(-5, 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullArgumentException.class, () -\u003e a.add(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3\", a.add(a).toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 5/6\", a.add(b).toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1\", a.add(c).toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 5/6\", b.add(a).toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 2/3\", b.add(b).toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1 1/6\", b.add(c).toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1\", c.add(a).toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1 1/6\", c.add(b).toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-5\", c.add(c).toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void subtract() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction a \u003d new MixedFraction(3, 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction b \u003d new MixedFraction(4, 3);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction c \u003d new MixedFraction(-5, 2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null input"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullArgumentException.class, () -\u003e a.subtract(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid input"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0\", a.subtract(a).toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/6\", a.subtract(b).toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"4\", a.subtract(c).toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1/6\", b.subtract(a).toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0\", b.subtract(b).toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3 5/6\", b.subtract(c).toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-4\", c.subtract(a).toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-3 5/6\", c.subtract(b).toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0\", c.subtract(c).toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void divide() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction a \u003d new MixedFraction(3, 2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction b \u003d new MixedFraction(4, 3);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction c \u003d new MixedFraction(-5, 2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null input"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullArgumentException.class, () -\u003e a.subtract(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid input"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1\", a.divide(a).toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 1/8\", a.divide(b).toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-3/5\", a.divide(c).toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"8/9\", b.divide(a).toString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1\", b.divide(b).toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-8/15\", b.divide(c).toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1 2/3\", c.divide(a).toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1 7/8\", c.divide(b).toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1\", c.divide(c).toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void createOneBasedIndex_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void createZeroBasedIndex_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(fifthPersonIndex, Index.fromOneBased(5));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(fifthPersonIndex, Index.fromZeroBased(4));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(fifthPersonIndex, fifthPersonIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(null, fifthPersonIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(5.0f, fifthPersonIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(fifthPersonIndex, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 19,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/gordon_ramsay_icon.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookAddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonCartStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonCookbookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonInventoryStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCookbookStorage cookbookStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonCookbookStorage(temporaryFolder.resolve(\"cookbook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonInventoryStorage(temporaryFolder.resolve(\"inventory.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCartStorage cartStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonCartStorage(temporaryFolder.resolve(\"cart.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(cookbookStorage, inventoryStorage, cartStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String helpCommand \u003d HelpCommand.COMMAND_CATEGORY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertCommandSuccess(helpCommand, HelpCommand.SHOWING_HELP_MESSAGE, model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Setup LogicManager with JsonCookbookIoExceptionThrowingStub, JsonInventoryIoExceptionThrowingStub,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // and JsonCartIoExceptionThrowingStub"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCookbookStorage cookbookStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonCookbookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionCookbook.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonInventoryIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionInventory.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCartStorage cartStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonCartIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionCart.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(cookbookStorage, inventoryStorage, cartStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Execute cookbook add command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String cookbookAddCommand \u003d CookbookAddCommand.COMMAND_CATEGORY + \" \" + CookbookAddCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + \" n/Carbonara d/description\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder(CARBONARA).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedModel.addCookbookRecipe(expectedRecipe);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // assertCommandFailure(cookbookAddCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCookbook(), model.getInventory(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                model.getCart(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static class JsonCookbookIoExceptionThrowingStub extends JsonCookbookStorage {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private JsonCookbookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void saveCookbook(ReadOnlyCookbook cookbook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static class JsonInventoryIoExceptionThrowingStub extends JsonInventoryStorage {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private JsonInventoryIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static class JsonCartIoExceptionThrowingStub extends JsonCartStorage {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private JsonCartIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void saveCart(ReadOnlyCart cart, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 66,
      "teo-jun-xiong": 2,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /// Ingredients"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALID_INGREDIENT_NAME_ALMOND \u003d \"Almonds\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALID_INGREDIENT_NAME_BANANA \u003d \"Bananas\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALID_INGREDIENT_QUANTITY_ALMOND \u003d \"50 g\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALID_INGREDIENT_QUANTITY_BANANA \u003d \"3\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INGREDIENT_NAME_DESC_ALMOND \u003d \" \" + PREFIX_INGREDIENT_NAME"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + VALID_INGREDIENT_NAME_ALMOND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INGREDIENT_NAME_DESC_BANANA \u003d \" \" + PREFIX_INGREDIENT_NAME"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + VALID_INGREDIENT_NAME_BANANA;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INGREDIENT_QUANTITY_DESC_ALMOND \u003d \" \" + PREFIX_INGREDIENT_QUANTITY"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INGREDIENT_QUANTITY_DESC_BANANA \u003d \" \" + PREFIX_INGREDIENT_QUANTITY"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INVALID_INGREDIENT_NAME_DESC \u003d \" \" + PREFIX_INGREDIENT_NAME"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"R!ce\"; // \u0027!\u0027 not allowed in names"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INVALID_INGREDIENT_QUANTITY_DESC \u003d \" \" + PREFIX_INGREDIENT_QUANTITY"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"*halal\"; // \u0027*\u0027 not allowed in quantity"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /// Recipes"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALID_RECIPE_NAME_HAMBURGER \u003d \"Hamburger\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALID_RECIPE_NAME_SALAD \u003d \"Salad\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALID_RECIPE_DESCRIPTION_HAMBURGER \u003d \"Juicy grilled beef patty with toasted buns\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALID_RECIPE_DESCRIPTION_SALAD \u003d \"Lettuce, spinach \u0026 guacamole.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALID_TAG_BRUNCH \u003d \"Brunch\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALID_TAG_HEALTHY \u003d \"Healthy\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String RECIPE_NAME_DESC_HAMBURGER \u003d \" \" + PREFIX_RECIPE_NAME + VALID_RECIPE_NAME_HAMBURGER;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String RECIPE_NAME_DESC_SALAD \u003d \" \" + PREFIX_RECIPE_NAME + VALID_RECIPE_NAME_SALAD;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String RECIPE_DESCRIPTION_DESC_HAMBURGER \u003d \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + VALID_RECIPE_DESCRIPTION_HAMBURGER;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String RECIPE_DESCRIPTION_DESC_SALAD \u003d \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + VALID_RECIPE_DESCRIPTION_SALAD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String TAG_DESC_BRUNCH \u003d \" \" + PREFIX_TAG + VALID_TAG_BRUNCH;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String TAG_DESC_HEALTHY \u003d \" \" + PREFIX_TAG + VALID_TAG_HEALTHY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String INVALID_RECIPE_NAME_DESC \u003d \" \" + PREFIX_RECIPE_NAME"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \" \"; // recipe names cannot have whitespaces only"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String INVALID_RECIPE_DESCRIPTION_DESC \u003d \" \" + PREFIX_RECIPE_DESCRIPTION"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \" \"; // recipe descriptions cannot have whitespaces only"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"p@sta\"; // \u0027@\u0027 not allowed in tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /// Miscellaneous"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Cookbook expectedCookbook \u003d new Cookbook(actualModel.getCookbook());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        List\u003cRecipe\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCookbookRecipeList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(expectedCookbook, actualModel.getCookbook());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredCookbookRecipeList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the recipe at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * {@code model}\u0027s cookbook."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static void showRecipeAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCookbookRecipeList().size());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Recipe recipe \u003d model.getFilteredCookbookRecipeList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final String[] splitName \u003d recipe.getName().fullRecipeName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        model.updateFilteredCookbookRecipeList(new RecipeNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(1, model.getFilteredCookbookRecipeList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 19,
      "shanecsj": 44,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cart/CartAddIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.cart.CartAddIngredientCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ALMOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartAddIngredientCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddIngredientCommand c \u003d new CartAddIngredientCommand(ALMOND);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CartAddIngredientCommand(ALMOND));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CartAddIngredientCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddIngredientCommand c \u003d new CartAddIngredientCommand(ALMOND);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, ALMOND)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasCartIngredient(ALMOND));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddIngredientCommand c \u003d new CartAddIngredientCommand(ALMOND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddIngredientCommand c \u003d new CartAddIngredientCommand(ALMOND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CartAddIngredientCommand(ALMOND));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new CartAddIngredientCommand(APPLE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 49,
      "tzihiang": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cart/CartAddRecipeIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.cart.CartAddRecipeIngredientCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.SCRAMBLED_EGG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.SPAGHETTI_BOLOGNESE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartAddRecipeIngredientCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index INVALID_RECIPE_INDEX \u003d new Index(100000);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddRecipeIngredientCommand c \u003d new CartAddRecipeIngredientCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CartAddRecipeIngredientCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddRecipeIngredientCommand c \u003d new CartAddRecipeIngredientCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, CARBONARA.getName())));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // after adding multiple recipes"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(SCRAMBLED_EGG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(SPAGHETTI_BOLOGNESE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, AGLIO_OLIO.getName())));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasCookbookRecipe(AGLIO_OLIO));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasCookbookRecipe(SCRAMBLED_EGG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasCookbookRecipe(SPAGHETTI_BOLOGNESE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        CartAddRecipeIngredientCommand c \u003d new CartAddRecipeIngredientCommand(INVALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // index greater than size of UniqueRecipeList in Cookbook"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddRecipeIngredientCommand d \u003d new CartAddRecipeIngredientCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e d.execute(model));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddRecipeIngredientCommand c \u003d new CartAddRecipeIngredientCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CartAddRecipeIngredientCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertNotEquals(c, new CartAddRecipeIngredientCommand(INVALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "teo-jun-xiong": 58,
      "hans555": 6,
      "tzihiang": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cart/CartClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.cart.CartClearCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.cart.CartClearCommand.MESSAGE_SUCCESS_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.testutil.TypicalIngredients;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartClearCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartClearCommand c \u003d new CartClearCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // empty cart"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(MESSAGE_SUCCESS_EMPTY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // with ingredients inside the cart"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCartIngredient(TypicalIngredients.ALMOND);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCartIngredient(TypicalIngredients.BANANA);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCartIngredient(TypicalIngredients.CHICKEN);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(model.hasCartIngredient(TypicalIngredients.ALMOND));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(model.hasCartIngredient(TypicalIngredients.BANANA));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(model.hasCartIngredient(TypicalIngredients.CHICKEN));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new CartClearCommand(), new CartClearCommand());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(new CartClearCommand(), null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 38,
      "tzihiang": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cart/CartExportCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.cart.CartExportCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartExportCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartExportCommand c \u003d new CartExportCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // empty cart, cart.pdf must not be open"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new CartExportCommand(), new CartExportCommand());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(new CartExportCommand(), null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cart/CartMoveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.commands.cart.CartMoveCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.commands.cart.CartMoveCommand.MESSAGE_SUCCESS_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.testutil.TypicalIngredients;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartMoveCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        CartMoveCommand c \u003d new CartMoveCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        // cart is initially empty"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(MESSAGE_SUCCESS_EMPTY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        // add ingredients into the cart"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.addCartIngredient(TypicalIngredients.ALMOND);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.addCartIngredient(TypicalIngredients.APPLE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.addCartIngredient(TypicalIngredients.BANANA);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasInventoryIngredient(TypicalIngredients.ALMOND));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasInventoryIngredient(TypicalIngredients.APPLE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasInventoryIngredient(TypicalIngredients.BANANA));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.getCart().getIngredientList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(new CartMoveCommand(), new CartMoveCommand());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertNotEquals(new CartMoveCommand(), null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 2,
      "tzihiang": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cart/CartRemoveIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ALMOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BUTTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartRemoveIngredientCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CartRemoveIngredientCommand(null, Optional.empty()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CartRemoveIngredientCommand(ALMOND.getName(), null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CartRemoveIngredientCommand(null, null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartRemoveIngredientCommand commandWithQuantity \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CartRemoveIngredientCommand(ALMOND.getName(), Optional.of(ALMOND.getQuantity()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartRemoveIngredientCommand commandWithoutQuantity \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CartRemoveIngredientCommand(ALMOND.getName(), Optional.empty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // removing existing ingredient with quantity specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.addCartIngredient(ALMOND);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(commandWithQuantity.execute(model),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CommandResult(String.format(CartRemoveIngredientCommand.MESSAGE_SUCCESS, ALMOND)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // removing existing ingredient without quantity specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.addCartIngredient(ALMOND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(commandWithoutQuantity.execute(model),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CommandResult(String.format(CartRemoveIngredientCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    CartRemoveIngredientCommand.ALL_KEYWORD + \" \" + ALMOND.getName())));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // error thrown after removing ALMOND"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e commandWithQuantity.execute(model));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e commandWithoutQuantity.execute(model));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(model.hasCartIngredient(ALMOND));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartRemoveIngredientCommand c \u003d new CartRemoveIngredientCommand(ALMOND.getName(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Optional.of(ALMOND.getQuantity()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void execute_invalidInput_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartRemoveIngredientCommand c \u003d new CartRemoveIngredientCommand(ALMOND.getName(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Optional.of(ALMOND.getQuantity()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartRemoveIngredientCommand c \u003d new CartRemoveIngredientCommand(ALMOND.getName(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Optional.of(ALMOND.getQuantity()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c, new CartRemoveIngredientCommand(ALMOND.getName(), Optional.of(ALMOND.getQuantity())));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertNotEquals(c, new CartRemoveIngredientCommand(BUTTER.getName(), Optional.of(BUTTER.getQuantity())));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 40,
      "teo-jun-xiong": 34,
      "tzihiang": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cookbook/CookbookAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookAddCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookAddCommand c \u003d new CookbookAddCommand(AGLIO_OLIO);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CookbookAddCommand(AGLIO_OLIO));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CookbookAddCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookAddCommand c \u003d new CookbookAddCommand(AGLIO_OLIO);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, AGLIO_OLIO, 0)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookAddCommand c \u003d new CookbookAddCommand(AGLIO_OLIO);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookAddCommand c \u003d new CookbookAddCommand(AGLIO_OLIO);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CookbookAddCommand(AGLIO_OLIO));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new CookbookAddCommand(CARBONARA));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cookbook/CookbookRemoveCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.cookbook.CookbookRemoveCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.SPAGHETTI_BOLOGNESE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookRemoveCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookRemoveCommand c \u003d new CookbookRemoveCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CookbookRemoveCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CookbookRemoveCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookRemoveCommand c \u003d new CookbookRemoveCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, AGLIO_OLIO.getName())));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // after adding multiple recipes"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(SPAGHETTI_BOLOGNESE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, AGLIO_OLIO.getName())));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(model.hasCookbookRecipe(AGLIO_OLIO));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // index greater than size of UniqueRecipeList in Cookbook"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookRemoveCommand c \u003d new CookbookRemoveCommand(OUT_OF_BOUNDS_RECIPE_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookRemoveCommand c \u003d new CookbookRemoveCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CookbookRemoveCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new CookbookRemoveCommand(OUT_OF_BOUNDS_RECIPE_INDEX));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 65,
      "tzihiang": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cookbook/CookbookSearchByInventoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RECIPES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookSearchByInventoryCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new CookbookSearchByInventoryCommand().execute(model),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CommandResult(String.format(MESSAGE_RECIPES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            model.getFilteredCartIngredientList().size())));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CookbookSearchByInventoryCommand().execute(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(new CookbookSearchByInventoryCommand(), new CookbookSearchByInventoryCommand());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertNotEquals(new CookbookSearchByInventoryCommand(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 24,
      "tzihiang": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cookbook/CookbookSearchByKeywordCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RECIPES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookSearchByKeywordCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final List\u003cString\u003e VALID_KEYWORDS_ONE \u003d Arrays.asList(\"key\", \"words\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final List\u003cString\u003e VALID_KEYWORDS_TWO \u003d Collections.singletonList(\"keywords\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Recipe VALID_RECIPE \u003d new Recipe(new RecipeName(\"key words\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        new RecipeDescription(\"Description\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final RecipeNameContainsKeywordsPredicate VALID_PREDICATE_ONE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        new RecipeNameContainsKeywordsPredicate(VALID_KEYWORDS_ONE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final RecipeNameContainsKeywordsPredicate VALID_PREDICATE_TWO \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        new RecipeNameContainsKeywordsPredicate(VALID_KEYWORDS_TWO);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookSearchByKeywordCommand c \u003d new CookbookSearchByKeywordCommand(VALID_PREDICATE_ONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(VALID_RECIPE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_RECIPES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                model.getFilteredCookbookRecipeList().size())));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(!model.getFilteredCookbookRecipeList().isEmpty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        CookbookSearchByKeywordCommand d \u003d new CookbookSearchByKeywordCommand(VALID_PREDICATE_TWO);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(d.execute(model), new CommandResult(String.format(MESSAGE_RECIPES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                model.getFilteredCookbookRecipeList().size())));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.getFilteredCookbookRecipeList().isEmpty());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CookbookSearchByKeywordCommand(VALID_PREDICATE_ONE).execute(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookSearchByKeywordCommand c \u003d new CookbookSearchByKeywordCommand(VALID_PREDICATE_ONE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, c);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new CookbookSearchByKeywordCommand(VALID_PREDICATE_TWO));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 54,
      "tzihiang": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cookbook/CookbookSearchByTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RECIPES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeContainsTagsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookSearchByTagCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final List\u003cString\u003e VALID_TAGS_ONE \u003d Arrays.asList(\"easy\", \"difficult\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final List\u003cString\u003e VALID_TAGS_TWO \u003d Collections.singletonList(\"easydifficult\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Recipe VALID_RECIPE \u003d new Recipe(new RecipeName(\"key words\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeDescription(\"Description\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final RecipeContainsTagsPredicate VALID_PREDICATE_ONE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeContainsTagsPredicate(VALID_TAGS_ONE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final RecipeContainsTagsPredicate VALID_PREDICATE_TWO \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeContainsTagsPredicate(VALID_TAGS_TWO);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookSearchByTagCommand c \u003d new CookbookSearchByTagCommand(VALID_PREDICATE_ONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(VALID_RECIPE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_RECIPES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                model.getFilteredCookbookRecipeList().size())));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new CookbookSearchByTagCommand(VALID_PREDICATE_ONE).execute(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/cookbook/CookbookViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.cookbook.CookbookViewCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.SPAGHETTI_BOLOGNESE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookViewCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookViewCommand c \u003d new CookbookViewCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CookbookViewCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CookbookViewCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookViewCommand c \u003d new CookbookViewCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "                VALID_RECIPE_INDEX.getOneBased(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "                model.getCookbook().getRecipeList().get(VALID_RECIPE_INDEX.getZeroBased()).getName().fullRecipeName),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "                true, VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // after adding multiple recipes"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(SPAGHETTI_BOLOGNESE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "                VALID_RECIPE_INDEX.getOneBased(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "                model.getCookbook().getRecipeList().get(VALID_RECIPE_INDEX.getZeroBased()).getName().fullRecipeName),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "                true, VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // index greater than size of UniqueRecipeList in Cookbook"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookViewCommand c \u003d new CookbookViewCommand(OUT_OF_BOUNDS_RECIPE_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookViewCommand c \u003d new CookbookViewCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new CookbookViewCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new CookbookViewCommand(OUT_OF_BOUNDS_RECIPE_INDEX));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 65,
      "hans555": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/inventory/InventoryAddIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.inventory.InventoryAddIngredientCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ALMOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BUTTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.CHICKEN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class InventoryAddIngredientCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryAddIngredientCommand c \u003d new InventoryAddIngredientCommand(ALMOND);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new InventoryAddIngredientCommand(ALMOND));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InventoryAddIngredientCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryAddIngredientCommand c \u003d new InventoryAddIngredientCommand(ALMOND);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, ALMOND)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryAddIngredientCommand d \u003d new InventoryAddIngredientCommand(BUTTER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(d.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, BUTTER)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryAddIngredientCommand e \u003d new InventoryAddIngredientCommand(CHICKEN);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(e.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, CHICKEN)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasInventoryIngredient(ALMOND));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasInventoryIngredient(BUTTER));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(model.hasInventoryIngredient(CHICKEN));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // adding duplicate ingredients updates its count"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addInventoryIngredient(ALMOND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, ALMOND)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryAddIngredientCommand c \u003d new InventoryAddIngredientCommand(ALMOND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryAddIngredientCommand c \u003d new InventoryAddIngredientCommand(ALMOND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new InventoryAddIngredientCommand(ALMOND));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new InventoryAddIngredientCommand(BUTTER));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 61,
      "tzihiang": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/inventory/InventoryClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.commands.inventory.InventoryClearCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.inventory.InventoryClearCommand.MESSAGE_SUCCESS_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.testutil.TypicalIngredients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        InventoryClearCommand i \u003d new InventoryClearCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        // empty inventory"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(i.execute(model), new CommandResult(MESSAGE_SUCCESS_EMPTY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        // with ingredients inside the inventory"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.addInventoryIngredient(TypicalIngredients.ALMOND);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.addInventoryIngredient(TypicalIngredients.BANANA);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.addInventoryIngredient(TypicalIngredients.CHICKEN);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(i.execute(model), new CommandResult(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(new InventoryClearCommand(), new InventoryClearCommand());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertNotEquals(new InventoryClearCommand(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 2,
      "tzihiang": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/inventory/InventoryCookCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.commands.inventory.InventoryCookCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class InventoryCookCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(100);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        InventoryCookCommand c \u003d new InventoryCookCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c, new InventoryCookCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InventoryCookCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "        InventoryCookCommand c \u003d new InventoryCookCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        AGLIO_OLIO.getIngredients().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .forEach(recipeIngredient -\u003e model.addInventoryIngredient(recipeIngredient));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "                VALID_RECIPE_INDEX.getOneBased())));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "        // after adding multiple recipes"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        AGLIO_OLIO.getIngredients().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .forEach(recipeIngredient -\u003e model.addInventoryIngredient(recipeIngredient));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "                VALID_RECIPE_INDEX.getOneBased())));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        //no more ingredient in inventory"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "        //insufficient ingredient in inventory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        AGLIO_OLIO.getIngredients().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .forEach(recipeIngredient -\u003e model.addInventoryIngredient(recipeIngredient));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.removeInventoryIngredient(new Ingredient(new IngredientName(\"Garlic\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "                new IngredientQuantity(\"3 cloves\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void execute_invalidInput() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "        // index greater than size of UniqueRecipeList in Cookbook"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "        InventoryCookCommand c \u003d new InventoryCookCommand(OUT_OF_BOUNDS_RECIPE_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hans555"
        },
        "content": "        InventoryCookCommand c \u003d new InventoryCookCommand(VALID_RECIPE_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c, new InventoryCookCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertNotEquals(c, new InventoryCookCommand(OUT_OF_BOUNDS_RECIPE_INDEX));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 3,
      "hans555": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/inventory/InventoryRemoveIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ALMOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BUTTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class InventoryRemoveIngredientCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InventoryRemoveIngredientCommand(null, Optional.empty()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InventoryRemoveIngredientCommand(ALMOND.getName(), null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InventoryRemoveIngredientCommand(null, null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryRemoveIngredientCommand commandWithQuantity \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new InventoryRemoveIngredientCommand(ALMOND.getName(), Optional.of(ALMOND.getQuantity()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryRemoveIngredientCommand commandWithoutQuantity \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new InventoryRemoveIngredientCommand(ALMOND.getName(), Optional.empty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // removing existing ingredient with quantity specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.addInventoryIngredient(ALMOND);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(commandWithQuantity.execute(model),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CommandResult(String.format(InventoryRemoveIngredientCommand.MESSAGE_SUCCESS, ALMOND)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // removing existing ingredient without quantity specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.addInventoryIngredient(ALMOND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(commandWithoutQuantity.execute(model),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CommandResult(String.format(InventoryRemoveIngredientCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    InventoryRemoveIngredientCommand.ALL_KEYWORD + \" \" + ALMOND.getName())));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // error thrown after removing ALMOND"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e commandWithQuantity.execute(model));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e commandWithoutQuantity.execute(model));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(model.hasInventoryIngredient(ALMOND));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryRemoveIngredientCommand c \u003d new InventoryRemoveIngredientCommand(ALMOND.getName(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Optional.of(ALMOND.getQuantity()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryRemoveIngredientCommand c \u003d new InventoryRemoveIngredientCommand(ALMOND.getName(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Optional.of(ALMOND.getQuantity()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryRemoveIngredientCommand c \u003d new InventoryRemoveIngredientCommand(ALMOND.getName(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Optional.of(ALMOND.getQuantity()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c, new InventoryRemoveIngredientCommand(ALMOND.getName(), Optional.of(ALMOND.getQuantity())));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertNotEquals(c, new InventoryRemoveIngredientCommand(BUTTER.getName(), Optional.of(BUTTER.getQuantity())));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 30,
      "teo-jun-xiong": 44,
      "tzihiang": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/recipe/RecipeAddIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.recipe.RecipeAddIngredientCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ALMOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BUTTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.SCRAMBLED_EGG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.SPAGHETTI_BOLOGNESE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeAddIngredientCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddIngredientCommand c \u003d new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, ALMOND);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, ALMOND));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddIngredientCommand(null, ALMOND));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddIngredientCommand(null, null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddIngredientCommand c \u003d new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, ALMOND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, ALMOND, CARBONARA.getName())));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // after adding multiple recipes"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(SCRAMBLED_EGG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(SPAGHETTI_BOLOGNESE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, ALMOND, AGLIO_OLIO.getName())));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddIngredientCommand c \u003d new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, ALMOND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // empty Cookbook"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddIngredientCommand c \u003d new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, ALMOND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // index out of bounds"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddIngredientCommand d \u003d new RecipeAddIngredientCommand(OUT_OF_BOUNDS_RECIPE_INDEX, ALMOND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e d.execute(model));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddIngredientCommand c \u003d new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, ALMOND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, ALMOND));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, BUTTER));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "teo-jun-xiong": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/recipe/RecipeAddStepCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.recipe.RecipeAddStepCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalSteps.CARBONARA_ONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalSteps.CARBONARA_TWO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeAddStepCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Optional\u003cIndex\u003e VALID_STEP_INDEX \u003d Optional.of(new Index(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Optional\u003cIndex\u003e OUT_OF_BOUNDS_STEP_INDEX \u003d Optional.of(new Index(1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddStepCommand c \u003d new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_ONE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_ONE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddStepCommand(VALID_RECIPE_INDEX, null, null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddStepCommand(null, VALID_STEP_INDEX, null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddStepCommand(null, null, CARBONARA_ONE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddStepCommand(null, null, null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddStepCommand c \u003d new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_ONE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        CommandResult one \u003d c.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        CommandResult two \u003d new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                CARBONARA.getName().fullRecipeName, CARBONARA_ONE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(one, two);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddStepCommand c \u003d new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_ONE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput() throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddStepCommand c \u003d new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_ONE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // adding to a non-existent recipe"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // step index out of bounds"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddStepCommand d \u003d new RecipeAddStepCommand(VALID_RECIPE_INDEX, OUT_OF_BOUNDS_STEP_INDEX, CARBONARA_ONE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e d.execute(model));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // recipe index out of bounds"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddStepCommand e \u003d new RecipeAddStepCommand(OUT_OF_BOUNDS_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_ONE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e e.execute(model));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // adding duplicate step"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddStepCommand f \u003d new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_TWO);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        f.execute(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e f.execute(model));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddStepCommand c \u003d new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_ONE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, CARBONARA_ONE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new RecipeAddStepCommand(VALID_RECIPE_INDEX, OUT_OF_BOUNDS_STEP_INDEX, CARBONARA_ONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 81,
      "hans555": 4,
      "tzihiang": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/recipe/RecipeAddTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.recipe.RecipeAddTagCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeAddTagCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Tag VALID_TAG_ONE \u003d new Tag(\"Easy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Tag VALID_TAG_TWO \u003d new Tag(\"Difficult\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddTagCommand c \u003d new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddTagCommand(null, VALID_TAG_ONE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddTagCommand(VALID_RECIPE_INDEX, null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeAddTagCommand(null, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddTagCommand c \u003d new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, VALID_TAG_ONE)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddTagCommand c \u003d new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput() throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddTagCommand c \u003d new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // adding to a non-existent recipe"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // recipe index out of bounds"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddTagCommand d \u003d new RecipeAddTagCommand(OUT_OF_BOUNDS_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e d.execute(model));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // adding duplicate tag"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddTagCommand f \u003d new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_TWO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        f.execute(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e f.execute(model));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeAddTagCommand c \u003d new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/recipe/RecipeRemoveIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BUTTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.EGG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeRemoveIngredientCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientName VALID_INGREDIENT_NAME \u003d EGG.getName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientQuantity VALID_INGREDIENT_QUANTITY \u003d new IngredientQuantity(\"2\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(VALID_INGREDIENT_NAME,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            VALID_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                null, null)); // index, null, null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveIngredientCommand(null,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                null, Optional.of(VALID_INGREDIENT_QUANTITY))); // null, null, quantity"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveIngredientCommand(null,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                VALID_INGREDIENT_NAME, null)); // null, name, null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                VALID_INGREDIENT_NAME, null)); // index, name, null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                null, Optional.of(VALID_INGREDIENT_QUANTITY))); // index, null, quantity"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveIngredientCommand(null,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY))); // null, name, quantity"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveIngredientCommand(null, null, null)); // all null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        RecipeRemoveIngredientCommand commandWithQuantity \u003d new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        RecipeRemoveIngredientCommand commandWithoutQuantity \u003d new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                VALID_INGREDIENT_NAME, Optional.empty());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // removing existing ingredient with quantity specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(commandWithQuantity.execute(model),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CommandResult(String.format(RecipeRemoveIngredientCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    VALID_INGREDIENT, CARBONARA.getName())));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // removing existing ingredient without quantity specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(commandWithoutQuantity.execute(model),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CommandResult(String.format(RecipeRemoveIngredientCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    RecipeRemoveIngredientCommand.ALL_KEYWORD + \" \" + VALID_INGREDIENT_NAME, CARBONARA.getName())));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // error thrown after removing EGG"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e commandWithQuantity.execute(model));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e commandWithoutQuantity.execute(model));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        RecipeRemoveIngredientCommand c \u003d new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT_NAME,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                Optional.of(VALID_INGREDIENT_QUANTITY));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput() throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        RecipeRemoveIngredientCommand c \u003d new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // removing from a non-existent recipe"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // recipe index out of bounds"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        RecipeRemoveIngredientCommand d \u003d new RecipeRemoveIngredientCommand(OUT_OF_BOUNDS_RECIPE_INDEX,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e d.execute(model));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // add ingredient to CARBONARA"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, BUTTER).execute(model);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // ingredient not found"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        RecipeRemoveIngredientCommand e \u003d new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                BUTTER.getName(), Optional.of(BUTTER.getQuantity()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        e.execute(model);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e e.execute(model));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        RecipeRemoveIngredientCommand c \u003d new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(c, new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertNotEquals(c, new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                BUTTER.getName(), Optional.of(BUTTER.getQuantity())));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 34,
      "teo-jun-xiong": 60,
      "shanecsj": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/recipe/RecipeRemoveStepCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.recipe.RecipeRemoveStepCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalSteps.CARBONARA_ONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeRemoveStepCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index VALID_REMOVE_STEP_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Optional\u003cIndex\u003e VALID_ADD_STEP_INDEX \u003d Optional.of(new Index(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_STEP_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        RecipeRemoveStepCommand c \u003d new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c, new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveStepCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveStepCommand(null,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "                VALID_REMOVE_STEP_INDEX));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveStepCommand(null,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "        RecipeRemoveStepCommand c \u003d new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.setCookbook(new Cookbook());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // add a step to recipe"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "        new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_ADD_STEP_INDEX, CARBONARA_ONE).execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                AGLIO_OLIO.getName().fullRecipeName, CARBONARA_ONE)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        RecipeRemoveStepCommand c \u003d new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "        RecipeRemoveStepCommand c \u003d new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // removing from a non-existent recipe"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // recipe index out of bounds"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": "        RecipeRemoveStepCommand d \u003d new RecipeRemoveStepCommand(OUT_OF_BOUNDS_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e d.execute(model));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": "        RecipeRemoveStepCommand c \u003d new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c, new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, OUT_OF_BOUNDS_STEP_INDEX));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 71,
      "hans555": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/recipe/RecipeRemoveTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.commands.recipe.RecipeRemoveTagCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeRemoveTagCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index OUT_OF_BOUNDS_RECIPE_INDEX \u003d new Index(1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Tag VALID_TAG_ONE \u003d new Tag(\"Easy\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Tag VALID_TAG_TWO \u003d new Tag(\"Difficult\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeRemoveTagCommand c \u003d new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveTagCommand(VALID_RECIPE_INDEX,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveTagCommand(null,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                VALID_TAG_ONE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeRemoveTagCommand(null,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_validInput() throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeRemoveTagCommand c \u003d new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // add a tag to recipe"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE).execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.execute(model), new CommandResult(String.format(MESSAGE_SUCCESS, VALID_TAG_ONE)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeRemoveTagCommand c \u003d new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.execute(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void execute_invalidInput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeRemoveTagCommand c \u003d new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG_TWO);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // removing from a non-existent recipe"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // removing a non-existent tag"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e c.execute(model));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // recipe index out of bounds"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeRemoveTagCommand d \u003d new RecipeRemoveTagCommand(OUT_OF_BOUNDS_RECIPE_INDEX, VALID_TAG_TWO);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e d.execute(model));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeRemoveTagCommand c \u003d new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG_ONE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG_TWO));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CookingPapaParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookAddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CookingPapaParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final CookingPapaParser parser \u003d new CookingPapaParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseCommand_cookbookAdd() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Recipe recipe \u003d new RecipeBuilder().withRecipeName(\"Recipe\").withRecipeDescription(\"test\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "        CookbookAddCommand command \u003d (CookbookAddCommand) parser.parseCommand(\"cookbook add recipe n/Recipe d/test\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(new CookbookAddCommand(recipe), command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_CATEGORY) instanceof ExitCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_CATEGORY + \"\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_CATEGORY) instanceof HelpCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_CATEGORY + \"\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 48,
      "hans555": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExitCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class ExitCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_STRING \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_STRING \u003d \"invalid xyz\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ExitCommandParser c \u003d new ExitCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c.parse(VALID_STRING), new ExitCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ExitCommandParser c \u003d new ExitCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e c.parse(INVALID_STRING));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/HelpCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class HelpCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_STRING \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_STRING \u003d \"invalid xyz\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "        HelpCommandParser c \u003d new HelpCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c.parse(VALID_STRING), new HelpCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "        HelpCommandParser c \u003d new HelpCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e c.parse(INVALID_STRING));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cart/CartAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddRecipeIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartAddCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new IngredientQuantity(\"5\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_INGREDIENT_ARGUMENT \u003d \"ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_INGREDIENT_ARGUMENT_NO_NAME \u003d \" q/5\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_INGREDIENT_ARGUMENT_NO_QUANTITY \u003d \" i/Ingredient\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_RECIPE_INDEX_ARGUMENT \u003d \"recipe 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_RECIPE_INDEX_ARGUMENT_NO_RECIPE \u003d \"word\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \" Invalid argument\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddCommandParser c \u003d new CartAddCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_INGREDIENT_ARGUMENT), new CartAddIngredientCommand(VALID_INGREDIENT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c.parse(VALID_RECIPE_INDEX_ARGUMENT), new CartAddRecipeIngredientCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddCommandParser c \u003d new CartAddCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.parse(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartAddCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CartAddCommandParser().parse(INVALID_INGREDIENT_ARGUMENT_NO_QUANTITY));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartAddCommandParser().parse(INVALID_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(ParseException.class, ()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "            -\u003e new CartAddCommandParser().parse(INVALID_RECIPE_INDEX_ARGUMENT_NO_RECIPE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 40,
      "hans555": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cart/CartAddIngredientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddIngredientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartAddIngredientCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new IngredientQuantity(\"5\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_INGREDIENT_ARGUMENT \u003d \" i/Ingredient q/5\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_INGREDIENT_ARGUMENT_NO_NAME \u003d \" q/5\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \" Invalid argument\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddIngredientCommandParser c \u003d new CartAddIngredientCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_INGREDIENT_ARGUMENT), new CartAddIngredientCommand(VALID_INGREDIENT));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartAddIngredientCommandParser c \u003d new CartAddIngredientCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.parse(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartAddIngredientCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new CartAddIngredientCommandParser().parse(INVALID_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cart/CartClearCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartClearCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ARGUMENT \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartClearCommandParser c \u003d new CartClearCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_ARGUMENT), new CartClearCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartClearCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cart/CartCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddRecipeIngredientCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cart.CartMoveCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartRemoveIngredientCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new IngredientQuantity(\"5\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientName VALID_INGREDIENT_NAME \u003d new IngredientName(\"Ingredient\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientQuantity VALID_INGREDIENT_QUANTITY \u003d new IngredientQuantity(\"5\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String VALID_ADD_INGREDIENT_ARGUMENT \u003d \" add ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ADD_RECIPE_ARGUMENT \u003d \"add recipe 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_CLEAR_ARGUMENT \u003d \"clear\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_MOVE_ARGUMENT \u003d \"move\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_REMOVE_INGREDIENT_ARGUMENT \u003d \"remove ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String VALID_REMOVE_INGREDIENT_ARGUMENT_NO_QUANTITY \u003d \" remove ingredient i/Ingredient\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String INVALID_ADD_INGREDIENT_ARGUMENT_NO_NAME \u003d \" add q/5\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_CLEAR_ARGUMENT \u003d \"clear clear\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_MOVE_ARGUMENT \u003d \"move move\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_NAME \u003d \" remove q/5\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartCommandParser c \u003d new CartCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_ADD_INGREDIENT_ARGUMENT), new CartAddIngredientCommand(VALID_INGREDIENT));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_ADD_RECIPE_ARGUMENT), new CartAddRecipeIngredientCommand(VALID_RECIPE_INDEX));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_CLEAR_ARGUMENT), new CartClearCommand());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(c.parse(VALID_MOVE_ARGUMENT), new CartMoveCommand());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.parse(VALID_REMOVE_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CartRemoveIngredientCommand(VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.parse(VALID_REMOVE_INGREDIENT_ARGUMENT_NO_QUANTITY),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CartRemoveIngredientCommand(VALID_INGREDIENT_NAME, Optional.empty()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CartCommandParser().parse(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CartCommandParser().parse(INVALID_ADD_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CartCommandParser().parse(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartCommandParser().parse(INVALID_CLEAR_ARGUMENT));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartCommandParser().parse(INVALID_MOVE_ARGUMENT));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 16,
      "teo-jun-xiong": 40,
      "shanecsj": 8,
      "hans555": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cart/CartExportCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartExportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartExportCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ARGUMENT \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartExportCommandParser c \u003d new CartExportCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_ARGUMENT), new CartExportCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartExportCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cart/CartMoveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartMoveCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartMoveCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static final String VALID_ARGUMENT \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"I\u0027m here to play punk\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        CartMoveCommandParser c \u003d new CartMoveCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(c.parse(VALID_ARGUMENT), new CartMoveCommand());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartMoveCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cart/CartRemoveIngredientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cart.CartRemoveIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartRemoveIngredientCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientName VALID_INGREDIENT_NAME \u003d new IngredientName(\"Ingredient\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientQuantity VALID_INGREDIENT_QUANTITY \u003d new IngredientQuantity(\"5\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INGREDIENT_KEYWORD \u003d \"ingredient\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_INGREDIENT_ARGUMENT \u003d INGREDIENT_KEYWORD + \" i/Ingredient q/5\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_INGREDIENT_ARGUMENT_NO_QUANTITY \u003d INGREDIENT_KEYWORD + \" i/Ingredient\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_INGREDIENT_ARGUMENT_NO_NAME \u003d INGREDIENT_KEYWORD + \" q/5\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d INGREDIENT_KEYWORD + \"Invalid argument\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartRemoveIngredientCommandParser c \u003d new CartRemoveIngredientCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.parse(VALID_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CartRemoveIngredientCommand(VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parse_validInputWithoutQuantity() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartRemoveIngredientCommandParser c \u003d new CartRemoveIngredientCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.parse(VALID_INGREDIENT_ARGUMENT_NO_QUANTITY),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new CartRemoveIngredientCommand(VALID_INGREDIENT_NAME, Optional.empty()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartRemoveIngredientCommandParser c \u003d new CartRemoveIngredientCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.parse(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CartRemoveIngredientCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new CartRemoveIngredientCommandParser().parse(INVALID_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 14,
      "teo-jun-xiong": 31,
      "shanecsj": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cookbook/CookbookAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.testutil.TypicalRecipes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookAddCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Recipe VALID_RECIPE \u003d TypicalRecipes.getValidRecipe();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String VALID_ARGUMENT \u003d \"recipe n/Recipe d/Description i/Ingredient q/5 s/Step t/Tag\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_ARGUMENT_NO_RECIPE_NAME \u003d \"recipe d/Description i/Ingredient q/5 x/1 \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"s/Step t/Tag\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_ARGUMENT_NO_RECIPE_DESCRIPTION \u003d \"recipe n/Recipe i/Ingredient q/5 \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"x/1 s/Step t/Tag\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookAddCommandParser c \u003d new CookbookAddCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_ARGUMENT), new CookbookAddCommand(VALID_RECIPE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookAddCommandParser c \u003d new CookbookAddCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.parse(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CookbookAddCommandParser().parse(INVALID_ARGUMENT_NO_RECIPE_NAME));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new CookbookAddCommandParser().parse(INVALID_ARGUMENT_NO_RECIPE_DESCRIPTION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new CookbookAddCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "teo-jun-xiong": 40,
      "hans555": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cookbook/CookbookCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookRemoveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookViewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.testutil.TypicalRecipes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_ADD_ARGUMENT \u003d \" add recipe n/Recipe \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"d/Description i/Ingredient q/5 s/Step t/Tag\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_VIEW_INDEX_STRING \u003d \" view recipe 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_REMOVE_INDEX_STRING \u003d \" remove recipe 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Recipe VALID_RECIPE \u003d TypicalRecipes.getValidRecipe();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String INVALID_ARGUMENT_NO_RECIPE_NAME \u003d \" add recipe d/Description i/Ingredient q/5 \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"s/Step t/Tag\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_ARGUMENT_NO_RECIPE_DESCRIPTION \u003d \" add recipe n/Recipe i/Ingredient q/5 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"s/Step t/Tag\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookCommandParser c \u003d new CookbookCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_ADD_ARGUMENT), new CookbookAddCommand(VALID_RECIPE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_REMOVE_INDEX_STRING), new CookbookRemoveCommand(VALID_INDEX));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_VIEW_INDEX_STRING), new CookbookViewCommand(VALID_INDEX));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookCommandParser c \u003d new CookbookCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.parse(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookCommandParser c \u003d new CookbookCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CookbookCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new CookbookCommandParser().parse(INVALID_ARGUMENT_NO_RECIPE_NAME));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new CookbookCommandParser().parse(INVALID_ARGUMENT_NO_RECIPE_DESCRIPTION));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 3,
      "teo-jun-xiong": 44,
      "hans555": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cookbook/CookbookListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class CookbookListCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_STRING \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_STRING \u003d \"invalid xyz\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "        CookbookListCommandParser c \u003d new CookbookListCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(c.parse(VALID_STRING), new CookbookListCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "        CookbookListCommandParser c \u003d new CookbookListCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e c.parse(INVALID_STRING));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cookbook/CookbookRemoveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookRemoveCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookRemoveCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_INDEX_STRING \u003d \"recipe 1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_INDEX_STRING \u003d \"Invalid index string\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookRemoveCommandParser c \u003d new CookbookRemoveCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_INDEX_STRING), new CookbookRemoveCommand(VALID_INDEX));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookRemoveCommandParser c \u003d new CookbookRemoveCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.parse(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookRemoveCommandParser c \u003d new CookbookRemoveCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e c.parse(INVALID_INDEX_STRING));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 33,
      "hans555": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cookbook/CookbookSearchCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookSearchByInventoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookSearchByKeywordCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookSearchByTagCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeContainsTagsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookSearchCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_KEYWORDS_STRING \u003d \"recipe k/key k/words\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_KEYWORDS_ARGUMENTS \u003d \" k/key k/words\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final List\u003cString\u003e VALID_KEYWORDS_ONE \u003d Arrays.asList(\"key\", \"words\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final RecipeNameContainsKeywordsPredicate VALID_KEYWORD_PREDICATE_ONE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeNameContainsKeywordsPredicate(VALID_KEYWORDS_ONE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_TAGS_STRING \u003d \"tag t/easy t/difficult\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_TAGS_ARGUMENTS \u003d \" t/easy t/difficult\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final List\u003cString\u003e VALID_TAGS_ONE \u003d Arrays.asList(\"easy\", \"difficult\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final RecipeContainsTagsPredicate VALID_TAG_PREDICATE_ONE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeContainsTagsPredicate(VALID_TAGS_ONE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_INVENTORY_STRING \u003d \"inventory\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new CookbookSearchCommandParser().parse(VALID_KEYWORDS_STRING),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CookbookSearchByKeywordCommand(VALID_KEYWORD_PREDICATE_ONE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new CookbookSearchCommandParser().parse(VALID_TAGS_STRING),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CookbookSearchByTagCommand(VALID_TAG_PREDICATE_ONE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new CookbookSearchCommandParser().parse(VALID_INVENTORY_STRING),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CookbookSearchByInventoryCommand());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CookbookSearchCommandParser().parse(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseSearchByKeyword_validInput() throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(new CookbookSearchCommandParser().parseSearchByKeyword(VALID_KEYWORDS_ARGUMENTS),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CookbookSearchByKeywordCommand(VALID_KEYWORD_PREDICATE_ONE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseSearchByKeyword_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CookbookSearchCommandParser().parseSearchByKeyword(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseSearchByTag_validInput() throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(new CookbookSearchCommandParser().parseSearchByTag(VALID_TAGS_ARGUMENTS),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CookbookSearchByTagCommand(VALID_TAG_PREDICATE_ONE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseSearchByTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CookbookSearchCommandParser().parseSearchByTag(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseSearchByInventory_validInput() throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new CookbookSearchCommandParser().parseSearchByInventory(VALID_INVENTORY_STRING),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new CookbookSearchByInventoryCommand());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseSearchByInventory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CookbookSearchCommandParser().parseSearchByInventory(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 78,
      "hans555": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cookbook/CookbookViewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookViewCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CookbookViewCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_INDEX_STRING \u003d \"recipe 1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_INDEX_STRING \u003d \"Invalid index string\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookViewCommandParser c \u003d new CookbookViewCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_INDEX_STRING), new CookbookViewCommand(VALID_INDEX));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookViewCommandParser c \u003d new CookbookViewCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.parse(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CookbookViewCommandParser c \u003d new CookbookViewCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e c.parse(INVALID_INDEX_STRING));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 33,
      "hans555": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/inventory/InventoryAddIngredientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryAddIngredientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class InventoryAddIngredientCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new IngredientQuantity(\"5\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INGREDIENT_KEYWORD \u003d \"ingredient\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_INGREDIENT_ARGUMENT \u003d INGREDIENT_KEYWORD + \" i/Ingredient q/5\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_INGREDIENT_ARGUMENT_NO_NAME \u003d INGREDIENT_KEYWORD + \" q/5\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d INGREDIENT_KEYWORD + \" Invalid argument\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryAddIngredientCommandParser c \u003d new InventoryAddIngredientCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Assertions.assertEquals(c.parse(VALID_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new InventoryAddIngredientCommand(VALID_INGREDIENT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InventoryAddIngredientCommandParser().parse(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, ()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            -\u003e new InventoryAddIngredientCommandParser().parse(INVALID_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, ()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            -\u003e new InventoryAddIngredientCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 37,
      "shanecsj": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/inventory/InventoryClearCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryClearCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static final String VALID_ARGUMENT \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        InventoryClearCommandParser i \u003d new InventoryClearCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertEquals(i.parse(VALID_ARGUMENT), new InventoryClearCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new InventoryClearCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/inventory/InventoryCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryAddIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryRemoveIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class InventoryCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new IngredientQuantity(\"5\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientName VALID_INGREDIENT_NAME \u003d new IngredientName(\"Ingredient\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientQuantity VALID_INGREDIENT_QUANTITY \u003d new IngredientQuantity(\"5\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_ADD_INGREDIENT_ARGUMENT \u003d \" add ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_REMOVE_INGREDIENT_ARGUMENT \u003d \" remove ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String VALID_REMOVE_INGREDIENT_ARGUMENT_NO_QUANTITY \u003d \" remove ingredient i/Ingredient\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_INGREDIENT_ARGUMENT_NO_NAME \u003d \" add q/5\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_NAME \u003d \" remove q/5\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \" Invalid argument\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryCommandParser c \u003d new InventoryCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_ADD_INGREDIENT_ARGUMENT), new InventoryAddIngredientCommand(VALID_INGREDIENT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c.parse(VALID_REMOVE_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new InventoryRemoveIngredientCommand(VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.parse(VALID_REMOVE_INGREDIENT_ARGUMENT_NO_QUANTITY),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new InventoryRemoveIngredientCommand(VALID_INGREDIENT_NAME, Optional.empty()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InventoryCommandParser().parse(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new InventoryCommandParser().parse(INVALID_ADD_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new InventoryCommandParser().parse(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new InventoryCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 9,
      "teo-jun-xiong": 41,
      "hans555": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/inventory/InventoryCookCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCookCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class InventoryCookCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String VALID_ARGUMENT \u003d \"recipe 1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"invalid 1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final String INVALID_ARGUMENT_INVALID_INDEX \u003d \"recipe 0\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index VALID_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "        InventoryCookCommandParser i \u003d new InventoryCookCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(i.parse(VALID_ARGUMENT), new InventoryCookCommand(VALID_INDEX));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new InventoryClearCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new InventoryClearCommandParser()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .parse(INVALID_ARGUMENT_INVALID_INDEX));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/inventory/InventoryRemoveIngredientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryRemoveIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class InventoryRemoveIngredientCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientName VALID_INGREDIENT_NAME \u003d new IngredientName(\"Ingredient\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final IngredientQuantity VALID_INGREDIENT_QUANTITY \u003d new IngredientQuantity(\"5\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INGREDIENT_KEYWORD \u003d \"ingredient\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_INGREDIENT_ARGUMENT \u003d INGREDIENT_KEYWORD + \" i/Ingredient q/5\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_INGREDIENT_ARGUMENT_NO_QUANTITY \u003d INGREDIENT_KEYWORD + \" i/Ingredient\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_INGREDIENT_ARGUMENT_NO_NAME \u003d INGREDIENT_KEYWORD + \" q/5\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d INGREDIENT_KEYWORD + \"Invalid argument\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parse_validInputWithQuantity() throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryRemoveIngredientCommandParser c \u003d new InventoryRemoveIngredientCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.parse(VALID_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new InventoryRemoveIngredientCommand(VALID_INGREDIENT_NAME, Optional.of(VALID_INGREDIENT_QUANTITY)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parse_validInputWithoutQuantity() throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryRemoveIngredientCommandParser c \u003d new InventoryRemoveIngredientCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(c.parse(VALID_INGREDIENT_ARGUMENT_NO_QUANTITY),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new InventoryRemoveIngredientCommand(VALID_INGREDIENT_NAME, Optional.empty()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        InventoryRemoveIngredientCommandParser c \u003d new InventoryRemoveIngredientCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e c.parse(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new InventoryRemoveIngredientCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new InventoryRemoveIngredientCommandParser().parse(INVALID_INGREDIENT_ARGUMENT_NO_NAME));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 16,
      "teo-jun-xiong": 29,
      "shanecsj": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/recipe/RecipeAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddIngredientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddStepCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddTagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeAddCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        new IngredientQuantity(\"5\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ADD_INGREDIENT_ARGUMENT \u003d \"1 ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX \u003d \"ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME \u003d \"1 ingredient q/5\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_PARSE_ADD_INGREDIENT_ARGUMENT \u003d \"1 i/Ingredient q/5\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Step VALID_STEP \u003d new Step(\"Step\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Optional\u003cIndex\u003e VALID_STEP_INDEX \u003d Optional.of(new Index(0));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ADD_STEP_ARGUMENT \u003d \"1 step x/1 s/Step\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_STEP_ARGUMENT_NO_RECIPE_INDEX \u003d \"step x/1 s/Step\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_STEP_ARGUMENT_NO_STEP_INDEX \u003d \"1 step x/s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_STEP_ARGUMENT_NO_STEP_DESCRIPTION \u003d \"1 step s/Step\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_PARSE_ADD_STEP_ARGUMENT \u003d \"1 x/1 s/Step\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Tag VALID_TAG \u003d new Tag(\"Tag\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ADD_TAG_ARGUMENT \u003d \"1 tag t/Tag\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_TAG_ARGUMENT_NO_RECIPE_INDEX \u003d \"tag t/Tag\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_TAG_ARGUMENT_NO_TAG \u003d \"1 tag\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_PARSE_ADD_TAG_ARGUMENT \u003d \"1 t/Tag\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeAddCommandParser().parse(VALID_ADD_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeAddCommandParser().parse(VALID_ADD_STEP_ARGUMENT),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, VALID_STEP));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeAddCommandParser().parse(VALID_ADD_TAG_ARGUMENT),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parse(INVALID_ADD_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parse(INVALID_ADD_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parse(INVALID_ADD_STEP_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parse(INVALID_ADD_STEP_ARGUMENT_NO_STEP_INDEX));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parse(INVALID_ADD_STEP_ARGUMENT_NO_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parse(INVALID_ADD_TAG_ARGUMENT_NO_TAG));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parse(INVALID_ADD_TAG_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseAddIngredient_validInput() throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeAddCommandParser().parseAddIngredient(VALID_PARSE_ADD_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseAddIngredient_invalidInput() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parseAddIngredient(INVALID_ADD_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parseAddIngredient(INVALID_ADD_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseAddStep_validInput() throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeAddCommandParser().parseAddStep(VALID_PARSE_ADD_STEP_ARGUMENT),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX, VALID_STEP));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseAddStep_invalidInput() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parseAddStep(INVALID_ADD_STEP_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parseAddIngredient(INVALID_ADD_STEP_ARGUMENT_NO_STEP_INDEX));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parseAddIngredient(INVALID_ADD_STEP_ARGUMENT_NO_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseAddTag_validInput() throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeAddCommandParser().parseAddTag(VALID_PARSE_ADD_TAG_ARGUMENT),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseAddTag_invalidInput() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parseAddTag(INVALID_ADD_TAG_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeAddCommandParser().parseAddTag(INVALID_ADD_TAG_ARGUMENT_NO_TAG));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void containsIngredient_validInput() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(new RecipeAddCommandParser().containsIngredient(VALID_ADD_INGREDIENT_ARGUMENT));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(new RecipeAddCommandParser()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .containsIngredient(INVALID_ADD_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void containsStep_validInput() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(new RecipeAddCommandParser().containsStep(VALID_ADD_STEP_ARGUMENT));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(new RecipeAddCommandParser().containsStep(INVALID_ADD_STEP_ARGUMENT_NO_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(new RecipeAddCommandParser().containsStep(INVALID_ADD_STEP_ARGUMENT_NO_STEP_INDEX));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void containsTag_validInput() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(new RecipeAddCommandParser().containsTag(VALID_ADD_TAG_ARGUMENT));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(new RecipeAddCommandParser().containsTag(INVALID_ADD_TAG_ARGUMENT_NO_TAG));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 139,
      "hans555": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/recipe/RecipeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddStepCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddTagCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveIngredientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveStepCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveTagCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new IngredientQuantity(\"5\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ADD_INGREDIENT_ARGUMENT \u003d \"1 add ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX \u003d \"add ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME \u003d \"1 add ingredient q/5\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_REMOVE_INGREDIENT_ARGUMENT \u003d \"1 remove ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_REMOVE_INGREDIENT_NO_QUANTITY_ARGUMENT \u003d \"1 remove ingredient i/Ingredient\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX \u003d \"remove ingredient i/Ingredient \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        + \"q/5\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME \u003d \"1 add ingredient q/5\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Step VALID_STEP \u003d new Step(\"Step\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Optional\u003cIndex\u003e VALID_ADD_STEP_INDEX \u003d Optional.of(new Index(0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Index VALID_REMOVE_STEP_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ADD_STEP_ARGUMENT \u003d \"1 add step x/1 s/Step\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_STEP_ARGUMENT_NO_RECIPE_INDEX \u003d \"add step x/1 s/Step\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_STEP_ARGUMENT_NO_STEP_INDEX \u003d \"1 add step x/s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_STEP_ARGUMENT_NO_STEP_DESCRIPTION \u003d \"1 add step s/Step\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_REMOVE_STEP_ARGUMENT \u003d \"1 remove step x/1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_STEP_ARGUMENT_NO_RECIPE_INDEX \u003d \"remove step x/1 s/Step\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_INDEX \u003d \"1 remove step x/s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_DESCRIPTION \u003d \"1 remove step s/Step\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Tag VALID_TAG \u003d new Tag(\"Tag\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_ADD_TAG_ARGUMENT \u003d \"1 add tag t/Tag\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_TAG_ARGUMENT_NO_RECIPE_INDEX \u003d \"add tag t/Tag\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ADD_TAG_ARGUMENT_NO_TAG \u003d \"1 add tag\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_REMOVE_TAG_ARGUMENT \u003d \"1 remove tag t/Tag\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_TAG_ARGUMENT_NO_RECIPE_INDEX \u003d \"remove tag t/Tag\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_TAG_ARGUMENT_NO_TAG \u003d \"1 remove tag\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeCommandParser().parse(VALID_ADD_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeAddIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeCommandParser().parse(VALID_ADD_STEP_ARGUMENT),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "                new RecipeAddStepCommand(VALID_RECIPE_INDEX, VALID_ADD_STEP_INDEX, VALID_STEP));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeCommandParser().parse(VALID_ADD_TAG_ARGUMENT),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeAddTagCommand(VALID_RECIPE_INDEX, VALID_TAG));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeCommandParser().parse(VALID_REMOVE_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT.getName(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        Optional.of(VALID_INGREDIENT.getQuantity())));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(new RecipeCommandParser().parse(VALID_REMOVE_INGREDIENT_NO_QUANTITY_ARGUMENT),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT.getName(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        Optional.empty()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeCommandParser().parse(VALID_REMOVE_STEP_ARGUMENT),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": "                new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_REMOVE_STEP_INDEX));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeCommandParser().parse(VALID_REMOVE_TAG_ARGUMENT),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeCommandParser().parse(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ADD_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ADD_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ADD_STEP_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ADD_STEP_ARGUMENT_NO_STEP_INDEX));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ADD_STEP_ARGUMENT_NO_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ADD_TAG_ARGUMENT_NO_TAG));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ADD_TAG_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_REMOVE_STEP_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_INDEX));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_REMOVE_TAG_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_REMOVE_TAG_ARGUMENT_NO_TAG));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 107,
      "shanecsj": 6,
      "hans555": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/recipe/RecipeRemoveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.logic.parser.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveIngredientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveStepCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveTagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeRemoveCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_RECIPE_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new IngredientQuantity(\"5\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_REMOVE_INGREDIENT_ARGUMENT \u003d \"1 ingredient i/Ingredient q/5\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX \u003d \"ingredient i/Ingredient \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"q/5\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME \u003d \"1 ingredient q/5\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_PARSE_REMOVE_INGREDIENT_ARGUMENT \u003d \"1 i/Ingredient q/5\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_PARSE_REMOVE_INGREDIENT_NO_QUANTITY_ARGUMENT \u003d \"1 i/Ingredient\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Index VALID_STEP_INDEX \u003d new Index(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_REMOVE_STEP_ARGUMENT \u003d \"1 step x/1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_STEP_ARGUMENT_NO_RECIPE_INDEX \u003d \"step x/1 s/Step\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_INDEX \u003d \"1 step x/s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_DESCRIPTION \u003d \"1 step s/Step\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_PARSE_REMOVE_STEP_ARGUMENT \u003d \"1 x/1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Tag VALID_TAG \u003d new Tag(\"Tag\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_REMOVE_TAG_ARGUMENT \u003d \"1 tag t/Tag\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_TAG_ARGUMENT_NO_RECIPE_INDEX \u003d \"tag t/Tag\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_REMOVE_TAG_ARGUMENT_NO_TAG \u003d \"1 tag\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_PARSE_REMOVE_TAG_ARGUMENT \u003d \"1 t/Tag\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_ARGUMENT \u003d \"Invalid argument\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_validInput() throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeRemoveCommandParser().parse(VALID_REMOVE_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT.getName(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        Optional.of(VALID_INGREDIENT.getQuantity())));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeRemoveCommandParser().parse(VALID_REMOVE_STEP_ARGUMENT),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeRemoveCommandParser().parse(VALID_REMOVE_TAG_ARGUMENT),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parse_invalidInput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveCommandParser().parse(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveCommandParser().parse(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveCommandParser().parse(INVALID_REMOVE_STEP_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveCommandParser().parse(INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveCommandParser().parse(INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_INDEX));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveCommandParser().parse(INVALID_REMOVE_TAG_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveCommandParser().parse(INVALID_REMOVE_TAG_ARGUMENT_NO_TAG));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeRemoveCommandParser().parse(INVALID_ARGUMENT));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseRemoveIngredient_validInput() throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeRemoveCommandParser().parseRemoveIngredient(VALID_PARSE_REMOVE_INGREDIENT_ARGUMENT),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT.getName(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        Optional.of(VALID_INGREDIENT.getQuantity())));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void parseRemoveIngredientWithoutQuantity_validInput() throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(new RecipeRemoveCommandParser()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        .parseRemoveIngredient(VALID_PARSE_REMOVE_INGREDIENT_NO_QUANTITY_ARGUMENT),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new RecipeRemoveIngredientCommand(VALID_RECIPE_INDEX, VALID_INGREDIENT.getName(), Optional.empty()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseRemoveIngredient_invalidInput() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveCommandParser().parseRemoveIngredient(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveCommandParser()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .parseRemoveIngredient(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseRemoveStep_validInput() throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeRemoveCommandParser().parseRemoveStep(VALID_PARSE_REMOVE_STEP_ARGUMENT),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveStepCommand(VALID_RECIPE_INDEX, VALID_STEP_INDEX));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseRemoveStep_invalidInput() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveCommandParser().parseRemoveStep(INVALID_REMOVE_STEP_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveCommandParser().parseRemoveStep(INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_INDEX));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveCommandParser().parseRemoveStep(INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseRemoveTag_validInput() throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeRemoveCommandParser().parseRemoveTag(VALID_PARSE_REMOVE_TAG_ARGUMENT),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveTagCommand(VALID_RECIPE_INDEX, VALID_TAG));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void parseRemoveTag_invalidInput() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveCommandParser().parseRemoveTag(INVALID_REMOVE_TAG_ARGUMENT_NO_RECIPE_INDEX));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeRemoveCommandParser().parseRemoveTag(INVALID_REMOVE_TAG_ARGUMENT_NO_TAG));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void containsIngredient_validInput() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(new RecipeRemoveCommandParser().containsIngredient(VALID_REMOVE_INGREDIENT_ARGUMENT));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(new RecipeRemoveCommandParser()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .containsIngredient(INVALID_REMOVE_INGREDIENT_ARGUMENT_NO_INGREDIENT_NAME));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void containsStep_validInput() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(new RecipeRemoveCommandParser().containsStep(VALID_REMOVE_STEP_ARGUMENT));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(new RecipeRemoveCommandParser().containsStep(INVALID_REMOVE_STEP_ARGUMENT_NO_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void containsTag_validInput() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(new RecipeRemoveCommandParser().containsTag(VALID_REMOVE_TAG_ARGUMENT));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(new RecipeRemoveCommandParser().containsTag(INVALID_REMOVE_TAG_ARGUMENT_NO_TAG));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 136,
      "shanecsj": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalCart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CartTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Cart cart \u003d new Cart();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(Collections.emptyList(), cart.getIngredientList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cart.resetData(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData_withValidReadOnlyCart_replacesData() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart newData \u003d getTypicalCart();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.resetData(newData);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(newData, cart);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cart.hasIngredient(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_ingredientNotInCart_returnsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(cart.hasIngredient(APPLE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_ingredientInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.addIngredient(APPLE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(cart.hasIngredient(APPLE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_compatibleIngredientInCart_returnsTrue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.addIngredient(APPLE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(cart.hasIngredient(editedApple));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_incompatibleIngredientInCart_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.addIngredient(APPLE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(cart.hasIngredient(editedApple));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getIngredientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e cart.getIngredientList().remove(0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * A stub ReadOnlyCart whose ingredient list can violate interface constraints."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static class CartStub implements ReadOnlyCart {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private final ObservableList\u003cIngredient\u003e ingredients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartStub(Collection\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.ingredients.setAll(ingredients);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public ObservableList\u003cIngredient\u003e getIngredientList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return ingredients;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CookbookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HEALTHY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalCookbook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final Cookbook cookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(Collections.emptyList(), cookbook.getRecipeList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cookbook.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void resetData_withValidReadOnlyCookbook_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Cookbook newData \u003d getTypicalCookbook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        cookbook.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(newData, cookbook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData_withDuplicateRecipes_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Recipe editedCarbonara \u003d new RecipeBuilder(CARBONARA).withTags(VALID_TAG_HEALTHY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        List\u003cRecipe\u003e newRecipes \u003d Arrays.asList(CARBONARA, editedCarbonara);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        CookbookTest.CookbookStub newData \u003d new CookbookTest.CookbookStub(newRecipes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e cookbook.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e cookbook.hasRecipe(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void hasRecipe_recipeNotInCookbook_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(cookbook.hasRecipe(CARBONARA));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void hasRecipe_recipeInCookbook_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        cookbook.addRecipe(CARBONARA);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(cookbook.hasRecipe(CARBONARA));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void hasRecipe_recipeWithSameIdentityFieldsInCookbook_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        cookbook.addRecipe(CARBONARA);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Recipe editedCarbonara \u003d new RecipeBuilder(CARBONARA).withTags(VALID_TAG_HEALTHY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(cookbook.hasRecipe(editedCarbonara));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void getRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e cookbook.getRecipeList().remove(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * A stub ReadOnlyCookbook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static class CookbookStub implements ReadOnlyCookbook {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        private final ObservableList\u003cRecipe\u003e recipes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        CookbookStub(Collection\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            this.recipes.setAll(recipes);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return recipes;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 3,
      "shanecsj": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/model/InventoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalInventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class InventoryTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(Collections.emptyList(), inventory.getIngredientList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e inventory.resetData(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData_withValidReadOnlyInventory_replacesData() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory newData \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.resetData(newData);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(newData, inventory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e inventory.hasIngredient(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_ingredientNotInInventory_returnsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(inventory.hasIngredient(APPLE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_ingredientInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.addIngredient(APPLE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(inventory.hasIngredient(APPLE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_compatibleIngredientInInventory_returnsTrue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.addIngredient(APPLE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(inventory.hasIngredient(editedApple));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasIngredient_incompatibleIngredientInInventory_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.addIngredient(APPLE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(inventory.hasIngredient(editedApple));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getIngredientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e inventory.getIngredientList().remove(0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * A stub ReadOnlyInventory whose ingredient list can violate interface constraints."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static class InventoryStub implements ReadOnlyInventory {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private final ObservableList\u003cIngredient\u003e ingredients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryStub(Collection\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.ingredients.setAll(ingredients);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public ObservableList\u003cIngredient\u003e getIngredientList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return ingredients;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ALMOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalInventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.SCRAMBLED_EGG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.SPAGHETTI_BOLOGNESE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalCookbook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.RecipeInventoryIngredientsSimilarityComparator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(new Cookbook(), new Cookbook(modelManager.getCookbook()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(new Inventory(), new Inventory(modelManager.getInventory()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(new Cart(), new Cart(modelManager.getCart()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCookbookFilePath(Paths.get(\"cookbook/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setInventoryFilePath(Paths.get(\"inventory/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCartFilePath(Paths.get(\"cart/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCookbookFilePath(Paths.get(\"new/cookbook/file/path\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setInventoryFilePath(Paths.get(\"new/inventory/file/path\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCartFilePath(Paths.get(\"new/cart/file/path\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCookbookFilePath(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbookFilePath_validPath_setsCookbookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Path path \u003d Paths.get(\"cookbook/file/path\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager.setCookbookFilePath(path);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(path, modelManager.getCookbookFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setInventoryFilePath(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryFilePath_validPath_setsInventoryFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Path path \u003d Paths.get(\"inventory/file/path\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager.setInventoryFilePath(path);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(path, modelManager.getInventoryFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void hasClearedInventory_ingredientNotInInventory_returnsTrue() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager.addInventoryIngredient(APPLE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager.addInventoryIngredient(BANANA);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager.setInventory(modelManager.getInventory());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(!modelManager.hasInventoryIngredient(APPLE)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                \u0026\u0026 !modelManager.hasInventoryIngredient(BANANA));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCartFilePath(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartFilePath_validPath_setsCartFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Path path \u003d Paths.get(\"cart/file/path\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager.setCartFilePath(path);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(path, modelManager.getCartFilePath());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasCookbookRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCookbookRecipe(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasCookbookRecipe_recipeNotInCookbook_returnsFalse() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(modelManager.hasCookbookRecipe(CARBONARA));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasCookbookRecipe_recipeInCookbook_returnsTrue() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(modelManager.hasCookbookRecipe(CARBONARA));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void hasInventoryIngredient_nullIngredient_throwsNullIngredientException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasInventoryIngredient(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void hasInventoryIngredient_ingredientNotInCart_returnsFalse() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(modelManager.hasInventoryIngredient(APPLE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void hasInventoryIngredient_ingredientInCart_returnsTrue() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager.addInventoryIngredient(APPLE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(modelManager.hasInventoryIngredient(APPLE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void hasCartIngredient_nullIngredient_throwsNullIngredientException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCartIngredient(null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void hasCartIngredient_ingredientNotInCart_returnsFalse() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(modelManager.hasCartIngredient(APPLE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void hasCartIngredient_ingredientInCart_returnsTrue() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager.addCartIngredient(APPLE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(modelManager.hasCartIngredient(APPLE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void hasClearedCart_ingredientNotInCart_returnsTrue() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager.addCartIngredient(APPLE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager.addCartIngredient(ALMOND);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager.setCart(modelManager.getCart());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertTrue(!modelManager.hasCartIngredient(APPLE) \u0026\u0026 !modelManager.hasCartIngredient(ALMOND));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void sortCookbook() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager.setCookbook(getTypicalCookbook());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager.sortCookbook(new RecipeInventoryIngredientsSimilarityComparator(getTypicalInventory()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(SCRAMBLED_EGG, modelManager.getCookbook().getRecipeList().get(0));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(CARBONARA, modelManager.getCookbook().getRecipeList().get(1));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(SPAGHETTI_BOLOGNESE, modelManager.getCookbook().getRecipeList().get(2));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(AGLIO_OLIO, modelManager.getCookbook().getRecipeList().get(3));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getFilteredCookbookRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .getFilteredCookbookRecipeList().remove(0));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        modelManager \u003d new ModelManager(new Cookbook(), new Inventory(), new Cart(), userPrefs);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(new Cookbook(), new Inventory(), new Cart(),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                userPrefs);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        differentUserPrefs.setCookbookFilePath(Paths.get(\"differentCookbookFilePath\"));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        differentUserPrefs.setInventoryFilePath(Paths.get(\"differentInventoryFilePath\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        differentUserPrefs.setCartFilePath(Paths.get(\"differentCartFilePath\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(new Cookbook(), new Inventory(), new Cart(),"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                differentUserPrefs)));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 59,
      "teo-jun-xiong": 10,
      "-": 91,
      "tzihiang": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCookbookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setInventoryFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCartFilePath(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 13,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/CompatibleIngredientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CompatibleIngredientListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final CompatibleIngredientList compatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(compatibleIngredientList.contains(APPLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientInList_returnsTrue() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(compatibleIngredientList.contains(APPLE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientWithSameNameAndUnitInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(compatibleIngredientList.contains(editedApple));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientWithSameNameAndDifferentUnitInList_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(compatibleIngredientList.contains(editedApple));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e compatibleIngredientList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_existingIngredientWithSameUnit_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedCompatibleIngredientList.add(APPLE.add(APPLE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_existingIngredientWithDifferentUnit_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(editedApple);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(compatibleIngredientList.contains(editedApple));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientIsSameIngredient_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.setIngredient(APPLE, APPLE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedCompatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.setIngredient(APPLE, editedApple);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedCompatibleIngredientList.add(editedApple);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.setIngredient(APPLE, BANANA);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedCompatibleIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientHasNonUniqueIdentity_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.setIngredient(APPLE, BANANA);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedCompatibleIngredientList.add(BANANA.add(BANANA));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e compatibleIngredientList.remove((Ingredient) null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_ingredientDoesNotExist_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IngredientNotFoundException.class, () -\u003e compatibleIngredientList.remove(APPLE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_existingIngredient_removesIngredient() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.remove(APPLE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_nullIngredientName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e compatibleIngredientList.remove((IngredientName) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_ingredientNameDoesNotExist_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IngredientNotFoundException.class, () -\u003e compatibleIngredientList.remove(APPLE.getName()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_existingIngredientName_removesIngredient() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(editedApple);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.remove(APPLE.getName());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_compatibleIngredientList_replacesOwnListWithProvidedCompatibleIngredientList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedCompatibleIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.setIngredients(expectedCompatibleIngredientList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                compatibleIngredientList.setIngredients((List\u003cIngredient\u003e) null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cIngredient\u003e ingredientList \u003d Collections.singletonList(BANANA);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        compatibleIngredientList.setIngredients(ingredientList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CompatibleIngredientList expectedCompatibleIngredientList \u003d new CompatibleIngredientList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedCompatibleIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedCompatibleIngredientList, compatibleIngredientList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new IngredientName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor_invalidIngredientName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String invalidIngredientName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new IngredientName(invalidIngredientName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isValidIngredientName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null ingredient name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e IngredientName.isValidIngredientName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // invalid ingredient name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"r!ce\")); // contains invalid symbol"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid ingredient name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"eggs\")); // lower case alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"EGGS\")); // lower case alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"100 calorie yogurt\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Full Cream Milk\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Full Cream Milk \")); // with trailing whitespace"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Hershey\u0027s Kisses\")); // with apostrophe"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Self-raising flour\")); // with dash"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"70% dark chocolate\")); // with numbers and percent sign"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Organic whole milk Greek yogurt\")); // long ingredient names"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toString_validIngredient_returnsStringRepresentation() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"eggs\", new IngredientName(\"eggs\").toString()); // lower case alphabets only"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"EGGS\", new IngredientName(\"EGGS\").toString()); // upper case alphabets only"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"12345\", new IngredientName(\"12345\").toString()); // numbers only"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"100 calorie yogurt\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new IngredientName(\"100 calorie yogurt\").toString()); // alphanumeric characters"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Full Cream Milk\", new IngredientName(\"Full Cream Milk\").toString()); // with capital letter"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Full Cream Milk\", new IngredientName(\"Full Cream Milk \").toString()); // with trailing whitespace"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Hershey\u0027s Kisses\", new IngredientName(\"Hershey\u0027s Kisses\").toString()); // with apostrophe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Self-raising flour\", new IngredientName(\"Self-raising flour\").toString()); // with dash"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"70% dark chocolate\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new IngredientName(\"70% dark chocolate\").toString()); // with numbers and percent sign"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Organic whole milk Greek yogurt\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new IngredientName(\"Organic whole milk Greek yogurt\").toString()); // long ingredient names"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientName testIngredientName \u003d new IngredientName(\"Eggs\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientName.equals(new IngredientName(\"Eggs\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientName.equals(testIngredientName));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name with different case -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientName.equals(new IngredientName(\"eggs\")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name with trailing whitespace -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientName.equals(new IngredientName(\"Eggs \")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientName.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient name -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientName.equals(new IngredientName(\"Milk\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 84,
      "shanecsj": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientQuantityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.NonPositiveIngredientQuantityException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientQuantityTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new IngredientQuantity(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor_invalidIngredientQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String invalidIngredientQuantity \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new IngredientQuantity(invalidIngredientQuantity));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isValidIngredientQuantity() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null ingredient quantity"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e IngredientQuantity.isValidIngredientQuantity(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // invalid ingredient quantity"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"dozen\")); // starts with alphabets"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"1.\")); // whole number with decimal point"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"1 / 2 cups\")); // spaces in fraction"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"1 piece1\")); // number in unit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"01 g\")); // leading zero"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"0 g\")); // zero whole number"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"0.0 g\")); // zero decimal"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\".0 g\")); // zero value"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"0/1 g\")); // zero numerator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"1/0 g\")); // zero denominator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"0 1/2 g\")); // zero whole part"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"-1.2 g\")); // negative decimal"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"-1/2 g\")); // negative fraction"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid ingredient quantity"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"12345\")); // whole number"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"0.5\")); // decimal number"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"1/2\")); // pure fraction"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"1 1/2\")); // mixed fraction"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"100 ml\")); // whole number and unit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"100ml\")); // no space between value and unit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"2.5 cups\")); // decimal number and unit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\".5 cups\")); // starts with decimal point"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"1/2 cups\")); // pure fractions and unit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"2 1/2 cups\")); // mixed fractions and unit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"1 Tablespoon\")); // with capital letters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"1 rounded tsp\")); // unit with spaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasSameUnitAs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity a \u003d new IngredientQuantity(\"1 cup\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity b \u003d new IngredientQuantity(\"0.25 cup\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity c \u003d new IngredientQuantity(\"1/2 cup\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity d \u003d new IngredientQuantity(\"100 ml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(a.hasSameUnitAs(a));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(a.hasSameUnitAs(b));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(a.hasSameUnitAs(c));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(b.hasSameUnitAs(a));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(b.hasSameUnitAs(b));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(b.hasSameUnitAs(c));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(c.hasSameUnitAs(a));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(c.hasSameUnitAs(b));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(c.hasSameUnitAs(c));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(d.hasSameUnitAs(d));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(a.hasSameUnitAs(d));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(b.hasSameUnitAs(d));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(c.hasSameUnitAs(d));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(d.hasSameUnitAs(a));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(d.hasSameUnitAs(b));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(d.hasSameUnitAs(c));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity a \u003d new IngredientQuantity(\"1 cup\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity b \u003d new IngredientQuantity(\"0.25 cup\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity c \u003d new IngredientQuantity(\"1.2cup\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity d \u003d new IngredientQuantity(\"3/4 cup\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity e \u003d new IngredientQuantity(\"2 1/2 cup\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity f \u003d new IngredientQuantity(\"100 ml\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e a.add(f));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e b.add(f));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e c.add(f));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e d.add(f));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e e.add(f));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.add(a));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.add(b));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.add(c));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.add(d));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.add(e));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.25 cup\", a.add(b).toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.2 cup\", a.add(c).toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 3/4 cup\", a.add(d).toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3 1/2 cup\", a.add(e).toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.25 cup\", b.add(a).toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.45 cup\", b.add(c).toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 cup\", b.add(d).toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 3/4 cup\", b.add(e).toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.2 cup\", c.add(a).toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.45 cup\", c.add(b).toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.95 cup\", c.add(d).toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3.7 cup\", c.add(e).toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 3/4 cup\", d.add(a).toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 cup\", d.add(b).toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.95 cup\", d.add(c).toString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3 1/4 cup\", d.add(e).toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3 1/2 cup\", e.add(a).toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 3/4 cup\", e.add(b).toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3.7 cup\", e.add(c).toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3 1/4 cup\", e.add(d).toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void subtract() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity a \u003d new IngredientQuantity(\"1 cup\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity b \u003d new IngredientQuantity(\"0.25 cup\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity c \u003d new IngredientQuantity(\"1.2cup\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity d \u003d new IngredientQuantity(\"3/4 cup\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity e \u003d new IngredientQuantity(\"2 1/2 cup\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity f \u003d new IngredientQuantity(\"100 ml\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e a.subtract(f));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e b.subtract(f));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e c.subtract(f));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e d.subtract(f));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e e.subtract(f));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.subtract(a));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.subtract(b));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.subtract(c));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.subtract(d));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.subtract(e));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.75 cup\", a.subtract(b).toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e a.subtract(c).toString());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/4 cup\", a.subtract(d).toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e a.subtract(e).toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e b.subtract(a).toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e b.subtract(c).toString());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e b.subtract(d).toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e b.subtract(e).toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.2 cup\", c.subtract(a).toString());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.95 cup\", c.subtract(b).toString());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.45 cup\", c.subtract(d).toString());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e c.subtract(e).toString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e d.subtract(a).toString());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/2 cup\", d.subtract(b).toString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e d.subtract(c).toString());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e d.subtract(e).toString());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 1/2 cup\", e.subtract(a).toString());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 1/4 cup\", e.subtract(b).toString());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.3 cup\", e.subtract(c).toString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 3/4 cup\", e.subtract(d).toString());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void asProportionOf() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity a \u003d new IngredientQuantity(\"1 cup\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity b \u003d new IngredientQuantity(\"0.25 cup\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity c \u003d new IngredientQuantity(\"1.2cup\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity d \u003d new IngredientQuantity(\"3/4 cup\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity e \u003d new IngredientQuantity(\"2 1/2 cup\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity f \u003d new IngredientQuantity(\"100 ml\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e a.asProportionOf(f));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e b.asProportionOf(f));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e c.asProportionOf(f));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e d.asProportionOf(f));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e e.asProportionOf(f));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.asProportionOf(a));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.asProportionOf(b));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.asProportionOf(c));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.asProportionOf(d));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.asProportionOf(e));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, a.asProportionOf(b));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1 / 1.2, a.asProportionOf(c));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, a.asProportionOf(d));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0.4, a.asProportionOf(e));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0.25, b.asProportionOf(a));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0.25 / 1.2, b.asProportionOf(c));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1.0 / 3, b.asProportionOf(d));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0.1, b.asProportionOf(e));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, c.asProportionOf(a));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, c.asProportionOf(b));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, c.asProportionOf(d));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0.48, c.asProportionOf(e));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0.75, d.asProportionOf(a));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, d.asProportionOf(b));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0.75 / 1.2, d.asProportionOf(c));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0.3, d.asProportionOf(e));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, e.asProportionOf(a));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, e.asProportionOf(b));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, e.asProportionOf(c));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, e.asProportionOf(d));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseValue() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid ingredient quantity"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"12345\", IngredientQuantity.parseValue(\"12345\").toString()); // whole number"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.5\", IngredientQuantity.parseValue(\"0.5\").toString()); // decimal number"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/2\", IngredientQuantity.parseValue(\"1/2\").toString()); // pure fraction"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 1/2\", IngredientQuantity.parseValue(\"1 1/2\").toString()); // mixed fraction"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"100\", IngredientQuantity.parseValue(\"100 ml\").toString()); // whole number and unit"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"100\", IngredientQuantity.parseValue(\"100ml\").toString()); // no space between value and unit"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.5\", IngredientQuantity.parseValue(\"2.5 cups\").toString()); // decimal number and unit"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.5\", IngredientQuantity.parseValue(\".5 cups\").toString()); // starts with decimal point"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/2\", IngredientQuantity.parseValue(\"1/2 cups\").toString()); // pure fractions and unit"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.3\", IngredientQuantity.parseValue(\"2 3/10 cups\").toString()); // denominator larger than 6"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1\", IngredientQuantity.parseValue(\"1 Tablespoon\").toString()); // with capital letters"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1\", IngredientQuantity.parseValue(\"1 rounded tsp\").toString()); // unit with spaces;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseUnit() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid ingredient quantity"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"\", IngredientQuantity.parseUnit(\"12345\")); // whole number"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"\", IngredientQuantity.parseUnit(\"0.5\")); // decimal number"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"\", IngredientQuantity.parseUnit(\"1/2\")); // pure fraction"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"\", IngredientQuantity.parseUnit(\"1 1/2\")); // mixed fraction"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"ml\", IngredientQuantity.parseUnit(\"100 ml\")); // whole number and unit"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"ml\", IngredientQuantity.parseUnit(\"100ml\")); // no space between value and unit"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"cups\", IngredientQuantity.parseUnit(\"2.5 cups\")); // decimal number and unit"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"cups\", IngredientQuantity.parseUnit(\".5 cups\")); // starts with decimal point"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"cups\", IngredientQuantity.parseUnit(\"1/2 cups\")); // pure fractions and unit"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"cups\", IngredientQuantity.parseUnit(\"2 3/5 cups\")); // mixed fractions and unit"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Tablespoon\", IngredientQuantity.parseUnit(\"1 Tablespoon\")); // with capital letters"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"rounded tsp\", IngredientQuantity.parseUnit(\"1 rounded tsp \")); // unit with spaces;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toString_validIngredientQuantity_returnsStringRepresentation() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid ingredient quantity"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"12345\", new IngredientQuantity(\"12345\").toString()); // whole number"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.5\", new IngredientQuantity(\"0.5\").toString()); // decimal number"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/2\", new IngredientQuantity(\"1/2\").toString()); // pure fraction"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 1/2\", new IngredientQuantity(\"1 1/2\").toString()); // mixed fraction"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"100 ml\", new IngredientQuantity(\"100 ml\").toString()); // whole number and unit"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"100 ml\", new IngredientQuantity(\"100ml\").toString()); // no space between value and unit"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.5 cups\", new IngredientQuantity(\"2.5 cups\").toString()); // decimal number and unit"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.5 cups\", new IngredientQuantity(\".5 cups\").toString()); // starts with decimal point"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/2 cups\", new IngredientQuantity(\"1/2 cups\").toString()); // pure fractions and unit"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.3 cups\", new IngredientQuantity(\"2 3/10 cups\").toString()); // mixed fractions and unit"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 Tablespoon\", new IngredientQuantity(\"1 Tablespoon\").toString()); // with capital letters"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 rounded tsp\", new IngredientQuantity(\"1 rounded tsp \").toString()); // unit with spaces;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity testIngredientQuantity \u003d new IngredientQuantity(\"100 ml\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same quantity -\u003e returns true"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientQuantity.equals(new IngredientQuantity(\"100 ml\")));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientQuantity.equals(testIngredientQuantity));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same quantity with no whitespace between value and unit -\u003e returns true"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientQuantity.equals(new IngredientQuantity(\"100ml\")));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same quantity with trailing whitespace -\u003e returns true"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientQuantity.equals(new IngredientQuantity(\"100 ml \")));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientQuantity.equals(null));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient quantity -\u003e returns false"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientQuantity.equals(new IngredientQuantity(\"200 g\")));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient quantity value -\u003e returns false"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientQuantity.equals(new IngredientQuantity(\"200 ml\")));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient quantity unit -\u003e returns false"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientQuantity.equals(new IngredientQuantity(\"100 g\")));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient quantity unit -\u003e returns false"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientQuantity.equals(new IngredientQuantity(\"100\")));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 307
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IncompatibleIngredientException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.NonPositiveIngredientQuantityException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_compatibleIngredient_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient expectedIngredient \u003d new IngredientBuilder(APPLE)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .withQuantity(APPLE.getQuantity().add(editedApple.getQuantity()).toString()).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedIngredient, APPLE.add(editedApple));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_ingredientWithDifferentUnit_throwsIncompatibleIngredientException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IncompatibleIngredientException.class, () -\u003e APPLE.add(editedApple));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_differentIngredient_throwsIncompatibleIngredientException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IncompatibleIngredientException.class, () -\u003e APPLE.add(BANANA));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void subtract_compatibleIngredient_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient expectedIngredient \u003d new IngredientBuilder(APPLE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .withQuantity(APPLE.getQuantity().subtract(editedApple.getQuantity()).toString()).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedIngredient, APPLE.subtract(editedApple));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void subtract_equalIngredientQuantity_throwsNonPositiveIngredientQuantityException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e APPLE.subtract(APPLE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void subtract_largerIngredientQuantity_throwsNonPositiveIngredientQuantityException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NonPositiveIngredientQuantityException.class, () -\u003e editedApple.subtract(APPLE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void subtract_ingredientWithDifferentUnit_throwsIncompatibleIngredientException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IncompatibleIngredientException.class, () -\u003e APPLE.subtract(editedApple));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void subtract_differentIngredient_throwsIncompatibleIngredientException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IncompatibleIngredientException.class, () -\u003e APPLE.subtract(BANANA));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void asProportionOf_compatibleIngredient_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(APPLE.getQuantity().asProportionOf(BANANA.getQuantity()), APPLE.asProportionOf(editedApple));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void asProportionOf_ingredientWithDifferentUnit_throwsIncompatibleIngredientException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IncompatibleIngredientException.class, () -\u003e APPLE.asProportionOf(editedApple));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void asProportionOf_differentIngredient_throwsIncompatibleIngredientException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IncompatibleIngredientException.class, () -\u003e APPLE.asProportionOf(BANANA));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isCompatibleWith() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.isCompatibleWith(APPLE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.isCompatibleWith(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withName(VALID_INGREDIENT_NAME_BANANA).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.isCompatibleWith(editedApple));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name, different quantity value -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.isCompatibleWith(editedApple));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name, different quantity unit -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.isCompatibleWith(editedApple));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isSameIngredient() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.isSameIngredient(APPLE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.isSameIngredient(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withName(VALID_INGREDIENT_NAME_BANANA).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.isSameIngredient(editedApple));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name, different quantity value -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.isSameIngredient(editedApple));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name, different quantity unit -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.isSameIngredient(editedApple));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient appleCopy \u003d new IngredientBuilder(APPLE).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.equals(appleCopy));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.equals(APPLE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.equals(null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.equals(5));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.equals(BANANA));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withName(VALID_INGREDIENT_NAME_BANANA).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name, different quantity value -\u003e returns false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name, different quantity unit -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/UniqueIngredientListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.CHICKEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IncompatibleIngredientException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class UniqueIngredientListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private final UniqueIngredientList uniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void size() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0, uniqueIngredientList.size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, uniqueIngredientList.size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.remove(APPLE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0, uniqueIngredientList.size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.contains(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(uniqueIngredientList.contains(APPLE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientInList_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(uniqueIngredientList.contains(APPLE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientWithSameNameAndSameUnitInList_returnsTrue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(uniqueIngredientList.contains(editedApple));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientWithSameNameAndDifferentUnitInList_returnsTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(uniqueIngredientList.contains(editedApple));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.add(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_existingIngredientWithSameUnit_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(APPLE.add(APPLE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_existingIngredientWithDifferentUnit_throwsIncompatibleIngredientException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IncompatibleIngredientException.class, () -\u003e uniqueIngredientList.add(editedApple));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_nullTargetIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredient(null, APPLE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_nullEditedIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredient(APPLE, null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_targetIngredientNotInList_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IngredientNotFoundException.class, () -\u003e uniqueIngredientList.setIngredient(APPLE, APPLE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientIsSameIngredient_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredient(APPLE, APPLE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredient(APPLE, editedApple);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(editedApple);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredient(APPLE, BANANA);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientHasNonUniqueIdentity_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredient(APPLE, BANANA);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(BANANA.add(BANANA));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.remove((Ingredient) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_ingredientDoesNotExist_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IngredientNotFoundException.class, () -\u003e uniqueIngredientList.remove(APPLE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_existingIngredient_removesIngredient() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.remove(APPLE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_nullIngredientName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.remove((IngredientName) null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_ingredientNameDoesNotExist_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IngredientNotFoundException.class, () -\u003e uniqueIngredientList.remove(APPLE.getName()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_existingIngredientName_removesIngredient() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.remove(APPLE.getName());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_nullUniqueIngredientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                uniqueIngredientList.setIngredients((UniqueIngredientList) null));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_uniqueIngredientList_replacesOwnListWithProvidedUniqueIngredientList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredients(expectedUniqueIngredientList);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredients((List\u003cIngredient\u003e) null));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cIngredient\u003e ingredientList \u003d Collections.singletonList(BANANA);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredients(ingredientList);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_listWithDuplicateCompatibleIngredients_clearsOwnListAndAddsIngredientsInProvidedList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cIngredient\u003e listWithDuplicateIngredients \u003d Arrays.asList(APPLE, APPLE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredients(listWithDuplicateIngredients);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(APPLE.add(APPLE));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_listWithDuplicateIncompatibleIngredients_throwsIncompatibleIngredientException() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cIngredient\u003e listWithDuplicateIngredients \u003d Arrays.asList(APPLE, editedApple);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IncompatibleIngredientException.class, () -\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                uniqueIngredientList.setIngredients(listWithDuplicateIngredients));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            -\u003e uniqueIngredientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void sort_success() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueIngredientList.add(CHICKEN);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.sort(new IngredientDefaultComparator());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueIngredientList editedList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editedList.add(APPLE);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editedList.add(BANANA);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editedList.add(CHICKEN);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(uniqueIngredientList, editedList);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 212,
      "hans555": 12,
      "tzihiang": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeContainsInventoryIngredientsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getValidRecipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeContainsInventoryIngredientsPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Ingredient VALID_INGREDIENT \u003d new Ingredient(new IngredientName(\"Ingredient\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            new IngredientQuantity(\"1\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Recipe VALID_RECIPE \u003d getValidRecipe();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void test_inventoryContainsAllRecipeIngredients_returnsTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.setIngredients(VALID_RECIPE.getIngredients());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(VALID_RECIPE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.setInventory(inventory);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        RecipeContainsInventoryIngredientsPredicate c \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            new RecipeContainsInventoryIngredientsPredicate(model.getInventory());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(c.test(VALID_RECIPE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void test_inventoryContainsSomeRecipeIngredients_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.addIngredient(VALID_INGREDIENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.addCookbookRecipe(VALID_RECIPE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.setInventory(inventory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        RecipeContainsInventoryIngredientsPredicate c \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            new RecipeContainsInventoryIngredientsPredicate(model.getInventory());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(c.test(VALID_RECIPE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void test_inventoryDoesNotContainRecipeIngredients_returnsFalse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.addCookbookRecipe(VALID_RECIPE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.setInventory(new Inventory());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeContainsInventoryIngredientsPredicate c \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeContainsInventoryIngredientsPredicate(model.getInventory());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(c.test(VALID_RECIPE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(VALID_RECIPE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addInventoryIngredient(VALID_INGREDIENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeContainsInventoryIngredientsPredicate c \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeContainsInventoryIngredientsPredicate(model.getInventory());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeContainsInventoryIngredientsPredicate(model.getInventory()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 37,
      "teo-jun-xiong": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeContainsTagsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getValidRecipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeContainsTagsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final List\u003cString\u003e VALID_TAGS \u003d Arrays.asList(\"tag\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Recipe VALID_RECIPE \u003d getValidRecipe();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeContainsTagsPredicate c \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeContainsTagsPredicate(VALID_TAGS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeContainsTagsPredicate(VALID_TAGS));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void test_validInput() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(VALID_RECIPE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeContainsTagsPredicate c \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeContainsTagsPredicate(VALID_TAGS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(c.test(VALID_RECIPE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addCookbookRecipe(VALID_RECIPE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeContainsTagsPredicate c \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeContainsTagsPredicate(VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeContainsTagsPredicate(VALID_TAGS));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(c, null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeDescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeDescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeDescription(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String invalidRecipeDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new RecipeDescription(invalidRecipeDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void isValidRecipeDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e RecipeDescription.isValidRecipeDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(RecipeDescription.isValidRecipeDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(RecipeDescription.isValidRecipeDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"eggs scrambled with pepper\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"11223344\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"1st in the world\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"Succulent Pork Belly\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"A-grade\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"Roasted cod with crushed potatoes, artichoke, \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                + \"salted capers, red wine and lemon sauce\")); // long descriptions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeNameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        list.add(\"Carbonara\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeNameContainsKeywordsPredicate c \u003d new RecipeNameContainsKeywordsPredicate(list);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(c, new RecipeNameContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void test_validInput() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        list.add(\"Carbonara\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeNameContainsKeywordsPredicate c \u003d new RecipeNameContainsKeywordsPredicate(list);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(c.test(CARBONARA));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeNameContainsKeywordsPredicate d \u003d new RecipeNameContainsKeywordsPredicate(list);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(c.test(AGLIO_OLIO));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeNameContainsKeywordsPredicate(list),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeNameContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        list.add(\"Carbonara\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(new RecipeNameContainsKeywordsPredicate(list),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeNameContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ArrayList\u003cString\u003e otherList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(new RecipeNameContainsKeywordsPredicate(list),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new RecipeNameContainsKeywordsPredicate(otherList));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 2,
      "teo-jun-xiong": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String invalidRecipeName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new RecipeName(invalidRecipeName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void isValidRecipeName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e RecipeName.isValidRecipeName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(RecipeName.isValidRecipeName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(RecipeName.isValidRecipeName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"bacon carbonara\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"0123210\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"number 1 cake\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"Beef Wellington\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"Shepherd\u0027s Pie\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"Slow-roasted Cumbrian saddleback pork belly\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final RecipeName VALID_RECIPE_NAME \u003d new RecipeName(\"Recipe\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final RecipeDescription VALID_RECIPE_DESCRIPTION \u003d new RecipeDescription(\"Description\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final UniqueIngredientList VALID_INGREDIENTS \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final UniqueStepList VALID_STEPS \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final Set\u003cTag\u003e VALID_TAGS \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_validInput() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipe \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipe, new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipeOverloaded, new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(null, VALID_RECIPE_DESCRIPTION));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(VALID_RECIPE_NAME, null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(null, null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(null, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(VALID_RECIPE_NAME, null, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, null,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_INGREDIENTS, null, VALID_TAGS));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_INGREDIENTS, VALID_STEPS, null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Recipe(null, null, null,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                null, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void getName_validInput() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipeOverloaded.getName(), VALID_RECIPE_NAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void getDescription_validInput() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipeOverloaded.getDescription(), VALID_RECIPE_DESCRIPTION);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void getIngredients_validInput() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(recipeOverloaded.getIngredients(), VALID_INGREDIENTS.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void getSteps_validInput() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipeOverloaded.getSteps(), VALID_STEPS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void getTags_validInput() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipeOverloaded.getTags(), VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void isSameRecipe_validInput() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipe \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(recipe.isSameRecipe(recipe));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(recipeOverloaded.isSameRecipe(recipeOverloaded));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(recipe.isSameRecipe(recipeOverloaded));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipe \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Recipe recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipe, recipe);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipeOverloaded, recipeOverloaded);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(recipe, recipeOverloaded);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(recipe, null);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        tags.add(new Tag(\"Easy\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeOverloaded \u003d new Recipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION, VALID_INGREDIENTS,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            VALID_STEPS, tags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotEquals(recipe, recipeOverloaded);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "shanecsj": 2,
      "teo-jun-xiong": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/UniqueRecipeListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class UniqueRecipeListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final UniqueRecipeList uniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void containsNullRecipeThrowsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.contains(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void contains_recipeNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(uniqueRecipeList.contains(CARBONARA));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void contains_recipeInList_returnsTrue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        uniqueRecipeList.add(CARBONARA);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(uniqueRecipeList.contains(CARBONARA));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void add_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.add(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void add_duplicateRecipe_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        uniqueRecipeList.add(CARBONARA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.add(CARBONARA));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipe_nullTargetRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipe(null, CARBONARA));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipe_nullEditedRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipe(CARBONARA, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipe_targetRecipeNotInList_throwsRecipeNotFoundException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(RecipeNotFoundException.class, () -\u003e uniqueRecipeList.setRecipe(CARBONARA, CARBONARA));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipe_editedRecipeIsSameRecipe_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        uniqueRecipeList.add(CARBONARA);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        uniqueRecipeList.setRecipe(CARBONARA, CARBONARA);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        expectedUniqueRecipeList.add(CARBONARA);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/step/StepTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class StepTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Step(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void constructor_invalidStep_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String invalidStep \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Step(invalidStep));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void isValidStep() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "        // null step"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Step.isValidStep(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "        // invalid step"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertFalse(Step.isValidStep(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertFalse(Step.isValidStep(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        // valid step"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(Step.isValidStep(\"hahahaha\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(Step.isValidStep(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(Step.isValidStep(\"throw 2 eggs in the water\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(Step.isValidStep(\"Sear the meat\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(Step.isValidStep(\"Peel the egg. Then throw the egg in the soup.\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hans555": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/step/UniqueStepListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.exceptions.DuplicateStepException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.exceptions.StepNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class UniqueStepListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Step TESTSTEP \u003d new Step(\"Cook 1 egg.\"); // for the time being only"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Step TESTSTEP2 \u003d new Step(\"Boil 2 egg.\"); // for the time being only"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final UniqueStepList uniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void contains_nullStep_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void contains_stepNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertFalse(uniqueStepList.contains(TESTSTEP));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void contains_stepInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(uniqueStepList.contains(TESTSTEP));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void add_nullStep_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.add(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void add_duplicateStep_throwsDuplicateStepException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(DuplicateStepException.class, () -\u003e uniqueStepList.add(TESTSTEP));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep_nullTargetStep_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.setStep(null, TESTSTEP));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep_nullEditedStep_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.setStep(TESTSTEP, null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep_targetStepNotInList_throwsStepNotFoundException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(StepNotFoundException.class, () -\u003e uniqueStepList.setStep(TESTSTEP, TESTSTEP));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep_editedStepIsSameStep_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.setStep(TESTSTEP, TESTSTEP);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList expectedUniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": "        expectedUniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(expectedUniqueStepList, uniqueStepList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setStep_editedStepHasDifferentDescription_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.setStep(TESTSTEP, TESTSTEP2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList expectedUniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": "        expectedUniqueStepList.add(TESTSTEP2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(expectedUniqueStepList, uniqueStepList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep_editedStepHasNonUniqueDescription_throwsDuplicateStepException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(DuplicateStepException.class, () -\u003e uniqueStepList.setStep(TESTSTEP, TESTSTEP2));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void remove_nullStep_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.remove((Step) null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void remove_stepDoesNotExist_throwsStepNotFoundException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(StepNotFoundException.class, () -\u003e uniqueStepList.remove(TESTSTEP));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void remove_existingStep_removesStep() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.remove(TESTSTEP);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList expectedUniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(expectedUniqueStepList, uniqueStepList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps_nullUniqueStepList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.setSteps((UniqueStepList) null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps_uniqueStepList_replacesOwnListWithProvidedUniqueStepList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList expectedUniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hans555"
        },
        "content": "        expectedUniqueStepList.add(TESTSTEP2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.setSteps(expectedUniqueStepList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(expectedUniqueStepList, uniqueStepList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.setSteps((List\u003cStep\u003e) null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hans555"
        },
        "content": "        List\u003cStep\u003e stepList \u003d Collections.singletonList(TESTSTEP2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.setSteps(stepList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList expectedUniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hans555"
        },
        "content": "        expectedUniqueStepList.add(TESTSTEP2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(expectedUniqueStepList, uniqueStepList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps_listWithDuplicateSteps_throwsDuplicateStepException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hans555"
        },
        "content": "        List\u003cStep\u003e listWithDuplicateSteps \u003d Arrays.asList(TESTSTEP, TESTSTEP);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(DuplicateStepException.class, () -\u003e uniqueStepList.setSteps(listWithDuplicateSteps));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hans555"
        },
        "content": "            -\u003e uniqueStepList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "hans555": 148
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedIngredientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.storage.JsonAdaptedIngredient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BUTTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonAdaptedIngredientTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String INVALID_INGREDIENT_NAME \u003d \"R!ce\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String INVALID_INGREDIENT_QUANTITY \u003d \"one\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String VALID_INGREDIENT_NAME \u003d BUTTER.getName().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String VALID_INGREDIENT_QUANTITY \u003d BUTTER.getQuantity().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_validIngredientDetails_returnsIngredient() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(BUTTER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(BUTTER, ingredient.toModelType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_invalidIngredientName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonAdaptedIngredient(INVALID_INGREDIENT_NAME, VALID_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String expectedMessage \u003d IngredientName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_nullIngredientName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(null, VALID_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, IngredientName.class.getSimpleName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_invalidIngredientQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonAdaptedIngredient(VALID_INGREDIENT_NAME, INVALID_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String expectedMessage \u003d IngredientQuantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_nullIngredientQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(VALID_INGREDIENT_NAME, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, IngredientQuantity.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedRecipeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.storage.JsonAdaptedRecipe.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class JsonAdaptedRecipeTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_INGREDIENT_NAME \u003d \"r!ce\"; // contains invalid symbol"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_INGREDIENT_QUANTITY \u003d \"one\"; // starts with alphabets"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_RECIPE_DESCRIPTION \u003d \" \"; // spaces only"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_RECIPE_NAME \u003d \" \"; // spaces only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_STEP_DESCRIPTION \u003d \" \"; // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\"; // contains symbol"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_INGREDIENT_NAME \u003d APPLE.getName().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_INGREDIENT_QUANTITY \u003d APPLE.getQuantity().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final List\u003cJsonAdaptedIngredient\u003e VALID_INGREDIENTS \u003d CARBONARA.getIngredients().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_RECIPE_NAME \u003d CARBONARA.getName().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final String VALID_RECIPE_DESCRIPTION \u003d CARBONARA.getDescription().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final List\u003cJsonAdaptedStep\u003e VALID_STEPS \u003d CARBONARA.getSteps()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .map(JsonAdaptedStep::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d CARBONARA.getTags().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_validRecipeDetails_returnsRecipe() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(CARBONARA);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(CARBONARA, recipe.toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_invalidRecipeName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new JsonAdaptedRecipe(INVALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        VALID_INGREDIENTS, VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String expectedMessage \u003d RecipeName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_nullRecipeName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(null, VALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                VALID_INGREDIENTS, VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, RecipeName.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_invalidRecipeDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new JsonAdaptedRecipe(VALID_RECIPE_NAME, INVALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        VALID_INGREDIENTS, VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String expectedMessage \u003d RecipeDescription.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_nullRecipeDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(VALID_RECIPE_NAME, null,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                VALID_INGREDIENTS, VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, RecipeDescription.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_invalidRecipeIngredientName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        List\u003cJsonAdaptedIngredient\u003e invalidIngredients \u003d new ArrayList\u003c\u003e(VALID_INGREDIENTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        invalidIngredients.add(new JsonAdaptedIngredient(INVALID_INGREDIENT_NAME, VALID_INGREDIENT_QUANTITY));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new JsonAdaptedRecipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        invalidIngredients, VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String expectedMessage \u003d IngredientName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_invalidRecipeIngredientQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        List\u003cJsonAdaptedIngredient\u003e invalidIngredients \u003d new ArrayList\u003c\u003e(VALID_INGREDIENTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        invalidIngredients.add(new JsonAdaptedIngredient(VALID_INGREDIENT_NAME, INVALID_INGREDIENT_QUANTITY));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new JsonAdaptedRecipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        invalidIngredients, VALID_STEPS, VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String expectedMessage \u003d IngredientQuantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_invalidRecipeSteps_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        List\u003cJsonAdaptedStep\u003e invalidSteps \u003d new ArrayList\u003c\u003e(VALID_STEPS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        invalidSteps.add(new JsonAdaptedStep(INVALID_STEP_DESCRIPTION));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new JsonAdaptedRecipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        VALID_INGREDIENTS, invalidSteps, VALID_TAGS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String expectedMessage \u003d Step.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                new JsonAdaptedRecipe(VALID_RECIPE_NAME, VALID_RECIPE_DESCRIPTION,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                        VALID_INGREDIENTS, VALID_STEPS, invalidTags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, recipe::toModelType);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "shanecsj": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedStepTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.storage.JsonAdaptedStep.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalSteps.CARBONARA_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class JsonAdaptedStepTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_STEP_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_STEP_DESCRIPTION \u003d CARBONARA_ONE.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void toModelType_validStepDescription_returnsStep() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        JsonAdaptedStep step \u003d new JsonAdaptedStep(VALID_STEP_DESCRIPTION);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(CARBONARA_ONE, step.toModelType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void toModelType_invalidStepDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        JsonAdaptedStep step \u003d new JsonAdaptedStep(INVALID_STEP_DESCRIPTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        String expectedMessage \u003d Step.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, step::toModelType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void toModelType_nullStepDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        JsonAdaptedStep step \u003d new JsonAdaptedStep((String) null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"step description\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, step::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonCartStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.HAZELNUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ICECREAM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalCart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonCartStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonIngredientListStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readCart_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCart(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCart\u003e readCart(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new JsonCartStorage(Paths.get(filePath)).readCart(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(readCart(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCart(\"notJsonFormatIngredientList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readCart_invalidIngredientCart_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCart(\"invalidIngredientList.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readCart_invalidAndValidIngredientCart_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCart(\"invalidAndValidIngredientList.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readAndSaveCart_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempCart.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart original \u003d getTypicalCart();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCartStorage jsonCartStorage \u003d new JsonCartStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonCartStorage.saveCart(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyCart readBack \u003d jsonCartStorage.readCart(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Cart(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.addIngredient(HAZELNUT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.removeIngredient(APPLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonCartStorage.saveCart(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        readBack \u003d jsonCartStorage.readCart(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Cart(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.addIngredient(ICECREAM);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonCartStorage.saveCart(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        readBack \u003d jsonCartStorage.readCart().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Cart(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart_nullCart_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCart(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Saves {@code cart} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void saveCart(ReadOnlyCart cart, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            new JsonCartStorage(Paths.get(filePath)).saveCart(cart, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCart(new Cart(), null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonCookbookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AGLIO_OLIO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalCookbook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class JsonCookbookStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonCookbookStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void readCookbook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCookbook(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCookbook\u003e readCookbook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new JsonCookbookStorage(Paths.get(filePath)).readCookbook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(readCookbook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCookbook(\"notJsonFormatCookbook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void readCookbook_invalidRecipeCookbook_throwDataConversionException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCookbook(\"invalidRecipeCookbook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void readCookbook_invalidAndValidRecipeCookbook_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCookbook(\"invalidAndValidRecipeCookbook.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void readAndSaveCookbook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempCookbook.json\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Cookbook original \u003d getTypicalCookbook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonCookbookStorage jsonCookbookStorage \u003d new JsonCookbookStorage(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        jsonCookbookStorage.saveCookbook(original, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        ReadOnlyCookbook readBack \u003d jsonCookbookStorage.readCookbook(filePath).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(original, new Cookbook(readBack));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        original.removeRecipe(AGLIO_OLIO);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        jsonCookbookStorage.saveCookbook(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        readBack \u003d jsonCookbookStorage.readCookbook(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(original, new Cookbook(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        jsonCookbookStorage.saveCookbook(original); // file path not specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        readBack \u003d jsonCookbookStorage.readCookbook().get(); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertEquals(original, new Cookbook(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void saveCookbook_nullCookbook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCookbook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Saves {@code cookbook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private void saveCookbook(ReadOnlyCookbook cookbook, String filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            new JsonCookbookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    .saveCookbook(cookbook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void saveCookbook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCookbook(new Cookbook(), null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonInventoryStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.HAZELNUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ICECREAM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonInventoryStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonIngredientListStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readInventory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readInventory(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyInventory\u003e readInventory(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new JsonInventoryStorage(Paths.get(filePath)).readInventory(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(readInventory(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventory(\"notJsonFormatIngredientList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readInventory_invalidIngredientInventory_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventory(\"invalidIngredientList.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readInventory_invalidAndValidIngredientInventory_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventory(\"invalidAndValidIngredientList.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readAndSaveInventory_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempInventory.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory original \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonInventoryStorage jsonInventoryStorage \u003d new JsonInventoryStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonInventoryStorage.saveInventory(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyInventory readBack \u003d jsonInventoryStorage.readInventory(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.addIngredient(HAZELNUT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.removeIngredient(APPLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonInventoryStorage.saveInventory(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        readBack \u003d jsonInventoryStorage.readInventory(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.addIngredient(ICECREAM);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonInventoryStorage.saveInventory(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        readBack \u003d jsonInventoryStorage.readInventory().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory_nullInventory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveInventory(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Saves {@code inventory} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void saveInventory(ReadOnlyInventory inventory, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            new JsonInventoryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .saveInventory(inventory, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveInventory(new Inventory(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableCartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.TypicalIngredients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonSerializableCartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonSerializableIngredientListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TYPICAL_INGREDIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalIngredients.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path INVALID_INGREDIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidIngredient.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path DUPLICATE_INGREDIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateIngredients.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_typicalIngredientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableCart dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_INGREDIENTS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableCart.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart cartFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart typicalIngredientsCart \u003d TypicalIngredients.getTypicalCart();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(cartFromFile, typicalIngredientsCart);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_invalidIngredientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableCart dataFromFile \u003d JsonUtil.readJsonFile(INVALID_INGREDIENT_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableCart.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_duplicateIngredients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableCart dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_INGREDIENTS_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableCart.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableCart.MESSAGE_DUPLICATE_INGREDIENT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableCookbookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "//import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "//import seedu.address.testutil.TypicalRecipes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class JsonSerializableCookbookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonSerializableCookbookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //private static final Path TYPICAL_RECIPES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalRecipes.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Path INVALID_RECIPE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidRecipe.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Path DUPLICATE_RECIPES_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateRecipes.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //public void toModelType_typicalRecipesFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //    JsonSerializableCookbook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_RECIPES_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //            JsonSerializableCookbook.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //    Cookbook cookbookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //    Cookbook typicalRecipesCookbook \u003d TypicalRecipes.getTypicalCookbook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //    assertEquals(cookbookFromFile, typicalRecipesCookbook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_invalidRecipeFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonSerializableCookbook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_RECIPE_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                JsonSerializableCookbook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void toModelType_duplicateRecipes_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonSerializableCookbook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_RECIPES_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                JsonSerializableCookbook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableCookbook.MESSAGE_DUPLICATE_RECIPE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableInventoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.TypicalIngredients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonSerializableInventoryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonSerializableIngredientListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TYPICAL_INGREDIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalIngredients.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path INVALID_INGREDIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidIngredient.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path DUPLICATE_INGREDIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateIngredients.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_typicalIngredientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_INGREDIENTS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory inventoryFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory typicalIngredientsInventory \u003d TypicalIngredients.getTypicalInventory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(inventoryFromFile, typicalIngredientsInventory);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_invalidIngredientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(INVALID_INGREDIENT_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_duplicateIngredients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_INGREDIENTS_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableInventory.MESSAGE_DUPLICATE_INGREDIENT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalCart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalInventory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalCookbook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCookbookStorage cookbookStorage \u003d new JsonCookbookStorage(getTempFilePath(\"cookbook\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d new JsonInventoryStorage(getTempFilePath(\"inventory\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCartStorage cartStorage \u003d new JsonCartStorage(getTempFilePath(\"cart\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storageManager \u003d new StorageManager(cookbookStorage, inventoryStorage, cartStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void cookbookReadSave() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * {@link JsonCookbookStorage} class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonCookbookStorageTest} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cookbook original \u003d getTypicalCookbook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storageManager.saveCookbook(original);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyCookbook retrieved \u003d original; //storageManager.readCookbook().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Cookbook(retrieved));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void inventoryReadSave() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * {@link JsonInventoryStorage} class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonInventoryStorageTest} class."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory original \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storageManager.saveInventory(original);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyInventory retrieved \u003d original; //storageManager.readInventory().get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Inventory(retrieved));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void cartReadSave() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * {@link JsonCartStorage} class."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonCartStorageTest} class."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart original \u003d getTypicalCart();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storageManager.saveCart(original);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyCart retrieved \u003d original; //storageManager.readCart().get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Cart(retrieved));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getCookbookFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertNotNull(storageManager.getCookbookFilePath());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getInventoryFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertNotNull(storageManager.getInventoryFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getCartFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertNotNull(storageManager.getCartFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 58,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/IngredientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A utility class to help with building {@code Ingredient} objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String DEFAULT_INGREDIENT_NAME \u003d \"Apples\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String DEFAULT_INGREDIENT_QUANTITY \u003d \"10\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private IngredientName ingredientName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private IngredientQuantity ingredientQuantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredientName \u003d new IngredientName(DEFAULT_INGREDIENT_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredientQuantity \u003d new IngredientQuantity(DEFAULT_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Initializes the IngredientBuilder with the data of {@code ingredientToCopy}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientBuilder(Ingredient ingredientToCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredientName \u003d ingredientToCopy.getName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredientQuantity \u003d ingredientToCopy.getQuantity();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sets the {@code IngredientName} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientBuilder withName(String ingredientName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientName \u003d new IngredientName(ingredientName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sets the {@code IngredientQuantity} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientBuilder withQuantity(String ingredientQuantity) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientQuantity \u003d new IngredientQuantity(ingredientQuantity);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient build() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Ingredient(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecipeBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * A utility class to help with building Recipe objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String DEFAULT_RECIPE_NAME \u003d \"CARBONARA\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String DEFAULT_RECIPE_DESCRIPTION \u003d \"The best dish sold in NUS.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private RecipeName recipeName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private RecipeDescription recipeDescription;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private UniqueIngredientList ingredients;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private UniqueStepList steps;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeName \u003d new RecipeName(DEFAULT_RECIPE_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeDescription \u003d new RecipeDescription(DEFAULT_RECIPE_DESCRIPTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        steps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Initializes the RecipeBuilder with the data of {@code recipeToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeBuilder(Recipe recipeToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipeName \u003d recipeToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipeDescription \u003d recipeToCopy.getDescription();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients.setIngredients(recipeToCopy.getIngredients());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.steps \u003d recipeToCopy.getSteps();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e(recipeToCopy.getTags());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Sets the {@code recipeName} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @param recipeName"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeBuilder withRecipeName(String recipeName) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.recipeName \u003d new RecipeName(recipeName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Sets the {@code recipeDescription} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @param recipeDescription"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeBuilder withRecipeDescription(String recipeDescription) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.recipeDescription \u003d new RecipeDescription(recipeDescription);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Adds the {@code ingredient} to the ingredient list of the recipe."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @param ingredient"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public RecipeBuilder withIngredients(Ingredient ingredient) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.ingredients.add(ingredient);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Adds the {@code steps} to the steps list of the recipe."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @param step"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public RecipeBuilder withStep(Step step) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.steps.add(step);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public Recipe build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new Recipe(recipeName, recipeDescription, ingredients, steps, tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "teo-jun-xiong": 63,
      "shanecsj": 12,
      "tzihiang": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StepBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * A utility class to help with building {@code Step} objects"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class StepBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String DEFAULT_STEP_NAME \u003d \"Drink some water\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private String stepName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public StepBuilder(String stepName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.stepName \u003d stepName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public StepBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.stepName \u003d DEFAULT_STEP_NAME;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Sets the {@code stepName} to this step\u0027s stepName."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public StepBuilder editStep(String stepName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.stepName \u003d stepName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public Step build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new Step(stepName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static void getMidIndex(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static void getLastIndex(Model model) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 2,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIngredients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_ALMOND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_BANANA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A utility class containing a list of {@code Ingredient} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class TypicalIngredients {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient APPLE \u003d new IngredientBuilder().withName(\"Apples\").withQuantity(\"5\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient BUTTER \u003d new IngredientBuilder().withName(\"Butter\").withQuantity(\"200 g\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient CHICKEN \u003d new IngredientBuilder().withName(\"Chicken\").withQuantity(\"600 g\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient DUCK \u003d new IngredientBuilder().withName(\"Duck\").withQuantity(\"800 g\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient EGG \u003d new IngredientBuilder().withName(\"Eggs\").withQuantity(\"12\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient FLOUR \u003d new IngredientBuilder().withName(\"Flour\").withQuantity(\"500 g\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient GARLIC \u003d new IngredientBuilder().withName(\"Garlic\").withQuantity(\"3 cloves\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient HAZELNUT \u003d new IngredientBuilder().withName(\"Hazelnuts\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient ICECREAM \u003d new IngredientBuilder().withName(\"Ice cream\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    // Manually added - Ingredient\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient ALMOND \u003d new IngredientBuilder().withName(VALID_INGREDIENT_NAME_ALMOND)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient BANANA \u003d new IngredientBuilder().withName(VALID_INGREDIENT_NAME_BANANA)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String KEYWORD_MATCHING_APPLE \u003d \"Apple\"; // A keyword that matches APPLE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private TypicalIngredients() {} // prevents instantiation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an {@code Inventory} with all the typical ingredients."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static Inventory getTypicalInventory() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (Ingredient ingredient : getTypicalIngredients()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            inventory.addIngredient(ingredient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns a {@code Cart} with all the typical Ingredients."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static Cart getTypicalCart() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart cart \u003d new Cart();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (Ingredient ingredient : getTypicalIngredients()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            cart.addIngredient(ingredient);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cart;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static List\u003cIngredient\u003e getTypicalIngredients() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPLE, BUTTER, CHICKEN, DUCK, EGG, FLOUR, GARLIC));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRecipes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * A utility class containing a list of {@code Recipe} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class TypicalRecipes {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static final Recipe[] TYPICAL_RECIPES \u003d SampleDataUtil.getSampleRecipes();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final Recipe SCRAMBLED_EGG \u003d TYPICAL_RECIPES[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final Recipe CARBONARA \u003d TYPICAL_RECIPES[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final Recipe AGLIO_OLIO \u003d TYPICAL_RECIPES[2];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final Recipe SPAGHETTI_BOLOGNESE \u003d TYPICAL_RECIPES[3];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private TypicalRecipes() {} // prevents instantiation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Returns a {@code Recipe} with sample ingredients, steps, and tags."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static Recipe getValidRecipe() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        UniqueIngredientList ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ingredients.add(new Ingredient(new IngredientName(\"Ingredient\"), new IngredientQuantity(\"5\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        UniqueStepList steps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        steps.add(new Step(\"Step\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new Recipe("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeName(\"Recipe\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeDescription(\"Description\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                ingredients,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                steps,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                SampleDataUtil.getTagSet(\"Tag\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns a {@code Cookbook} with all the typical recipes."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static Cookbook getTypicalCookbook() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cookbook cookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (Recipe recipe : getTypicalRecipes()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            cookbook.addRecipe(recipe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cookbook;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static List\u003cRecipe\u003e getTypicalRecipes() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(AGLIO_OLIO, CARBONARA, SCRAMBLED_EGG, SPAGHETTI_BOLOGNESE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 6,
      "teo-jun-xiong": 51,
      "tzihiang": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalSteps.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * A utility class containing a list of {@code Step} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class TypicalSteps {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Step CARBONARA_ONE \u003d new Step(\"Boil the pasta.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Step CARBONARA_TWO \u003d new Step(\"Fry pancetta in oil in a frying pan for a few mins \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"until golden and crisp. Add garlic, fry for 1 min.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Step CARBONARA_THREE \u003d new Step(\"Turn off the heat.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Step CARBONARA_FOUR \u003d new Step(\"Briefly whisk egg and yolks with most of the Parmesan \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"and some seasoning.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private TypicalSteps() {} // prevents instantiation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static List\u003cStep\u003e getTypicalSteps() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CARBONARA_ONE, CARBONARA_TWO, CARBONARA_THREE, CARBONARA_FOUR));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 26
    }
  }
]
